Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> CODE
Rule 1     CODE -> INSTRUCTIONS
Rule 2     INSTRUCTIONS -> { INSTRUCTIONS }
Rule 3     INSTRUCTIONS -> INSTRUCTION INSTRUCTIONS
Rule 4     INSTRUCTIONS -> INSTRUCTION
Rule 5     INSTRUCTION -> ASSIGN ;
Rule 6     INSTRUCTION -> IF_CONDITION
Rule 7     INSTRUCTION -> FOR_LOOP
Rule 8     INSTRUCTION -> WHILE_LOOP
Rule 9     INSTRUCTION -> CONTROL_INSTRUCTION ;
Rule 10    INSTRUCTION -> PRINT_CALL ;
Rule 11    ASSIGN -> ID ASSIGN_TYPE EXPRESSION
Rule 12    ASSIGN -> ID [ INTNUM ] ASSIGN_TYPE EXPRESSION
Rule 13    ASSIGN -> ID [ INTNUM , INTNUM ] ASSIGN_TYPE EXPRESSION
Rule 14    ASSIGN_TYPE -> =
Rule 15    ASSIGN_TYPE -> ADDASSIGN
Rule 16    ASSIGN_TYPE -> SUBASSIGN
Rule 17    ASSIGN_TYPE -> DIVASSIGN
Rule 18    ASSIGN_TYPE -> MULASSIGN
Rule 19    EXPRESSION -> BINARY_EXPRESSION
Rule 20    EXPRESSION -> LOGICAL_EXPRESSION
Rule 21    EXPRESSION -> MATRIX_EXPRESSION
Rule 22    EXPRESSION -> ( EXPRESSION )
Rule 23    EXPRESSION -> TERM
Rule 24    BINARY_EXPRESSION -> EXPRESSION + EXPRESSION
Rule 25    BINARY_EXPRESSION -> EXPRESSION - EXPRESSION
Rule 26    BINARY_EXPRESSION -> EXPRESSION * EXPRESSION
Rule 27    BINARY_EXPRESSION -> EXPRESSION / EXPRESSION
Rule 28    LOGICAL_EXPRESSION -> EXPRESSION > EXPRESSION
Rule 29    LOGICAL_EXPRESSION -> EXPRESSION < EXPRESSION
Rule 30    LOGICAL_EXPRESSION -> EXPRESSION EQORGT EXPRESSION
Rule 31    LOGICAL_EXPRESSION -> EXPRESSION EQORLESS EXPRESSION
Rule 32    LOGICAL_EXPRESSION -> EXPRESSION EQUAL EXPRESSION
Rule 33    LOGICAL_EXPRESSION -> EXPRESSION NOTEQUAL EXPRESSION
Rule 34    MATRIX_EXPRESSION -> EXPRESSION DOTADD EXPRESSION
Rule 35    MATRIX_EXPRESSION -> EXPRESSION DOTSUB EXPRESSION
Rule 36    MATRIX_EXPRESSION -> EXPRESSION DOTMUL EXPRESSION
Rule 37    MATRIX_EXPRESSION -> EXPRESSION DOTDIV EXPRESSION
Rule 38    TERM -> ID
Rule 39    TERM -> INTNUM
Rule 40    TERM -> FLOATNUM
Rule 41    TERM -> STRING
Rule 42    TERM -> MATRIX
Rule 43    TERM -> FUNCTION_CALL
Rule 44    TERM -> ID '
Rule 45    TERM -> - ID
Rule 46    EXPRESSION -> RETURN TERM
Rule 47    INTNUM_OR_ID -> INTNUM
Rule 48    INTNUM_OR_ID -> ID
Rule 49    MATRIX -> [ VECTORS ]
Rule 50    VECTORS -> VECTORS ; VECTOR
Rule 51    VECTORS -> VECTOR
Rule 52    VECTOR -> VECTOR , TERM
Rule 53    VECTOR -> TERM
Rule 54    FUNCTION_CALL -> FUNCTION_NAME ( TERM )
Rule 55    FUNCTION_NAME -> ZEROS
Rule 56    FUNCTION_NAME -> ONES
Rule 57    FUNCTION_NAME -> EYE
Rule 58    CONTROL_INSTRUCTION -> BREAK
Rule 59    CONTROL_INSTRUCTION -> CONTINUE
Rule 60    CONTROL_INSTRUCTION -> RETURN
Rule 61    CONTROL_INSTRUCTION -> RETURN TERM
Rule 62    PRINT_CALL -> PRINT PRINT_TERMS
Rule 63    PRINT_TERMS -> PRINT_TERMS , TERM
Rule 64    PRINT_TERMS -> TERM
Rule 65    IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT
Rule 66    IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT
Rule 67    ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS
Rule 68    ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS
Rule 69    ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION
Rule 70    ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS }
Rule 71    ELSE_STATEMENT -> ELSE INSTRUCTION
Rule 72    ELSE_STATEMENT -> ELSE { INSTRUCTIONS }
Rule 73    ELSE_STATEMENT -> <empty>
Rule 74    FOR_LOOP -> FOR FOR_CONDITION { INSTRUCTIONS }
Rule 75    FOR_LOOP -> FOR FOR_CONDITION INSTRUCTION
Rule 76    FOR_CONDITION -> TERM = INTNUM_OR_ID : INTNUM_OR_ID
Rule 77    WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS }
Rule 78    WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION

Terminals, with rules where they appear

'                    : 44
(                    : 22 54 65 66 67 68 69 70 77 78
)                    : 22 54 65 66 67 68 69 70 77 78
*                    : 26
+                    : 24
,                    : 13 52 63
-                    : 25 45
/                    : 27
:                    : 76
;                    : 5 9 10 50
<                    : 29
=                    : 14 76
>                    : 28
ADDASSIGN            : 15
BREAK                : 58
CONTINUE             : 59
DIVASSIGN            : 17
DOTADD               : 34
DOTDIV               : 37
DOTMUL               : 36
DOTSUB               : 35
ELSE                 : 71 72
ELSEIF               : 67 68 69 70
EQORGT               : 30
EQORLESS             : 31
EQUAL                : 32
EYE                  : 57
FLOATNUM             : 40
FOR                  : 74 75
ID                   : 11 12 13 38 44 45 48
IF                   : 65 66
INTNUM               : 12 13 13 39 47
MULASSIGN            : 18
NOTEQUAL             : 33
ONES                 : 56
PRINT                : 62
RETURN               : 46 60 61
STRING               : 41
SUBASSIGN            : 16
WHILE                : 77 78
ZEROS                : 55
[                    : 12 13 49
]                    : 12 13 49
error                : 
{                    : 2 66 68 70 72 74 77
}                    : 2 66 68 70 72 74 77

Nonterminals, with rules where they appear

ASSIGN               : 5
ASSIGN_TYPE          : 11 12 13
BINARY_EXPRESSION    : 19
CODE                 : 0
CONTROL_INSTRUCTION  : 9
ELIF_STATEMENTS      : 65 66 67 68
ELSE_STATEMENT       : 65 66
EXPRESSION           : 11 12 13 22 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37
FOR_CONDITION        : 74 75
FOR_LOOP             : 7
FUNCTION_CALL        : 43
FUNCTION_NAME        : 54
IF_CONDITION         : 6
INSTRUCTION          : 3 4 65 67 69 71 75 78
INSTRUCTIONS         : 1 2 3 66 68 70 72 74 77
INTNUM_OR_ID         : 76 76
LOGICAL_EXPRESSION   : 20 65 66 67 68 69 70 77 78
MATRIX               : 42
MATRIX_EXPRESSION    : 21
PRINT_CALL           : 10
PRINT_TERMS          : 62 63
TERM                 : 23 46 52 53 54 61 63 64 76
VECTOR               : 50 51 52
VECTORS              : 49 50
WHILE_LOOP           : 8

Parsing method: LALR

state 0

    (0) S' -> . CODE
    (1) CODE -> . INSTRUCTIONS
    (2) INSTRUCTIONS -> . { INSTRUCTIONS }
    (3) INSTRUCTIONS -> . INSTRUCTION INSTRUCTIONS
    (4) INSTRUCTIONS -> . INSTRUCTION
    (5) INSTRUCTION -> . ASSIGN ;
    (6) INSTRUCTION -> . IF_CONDITION
    (7) INSTRUCTION -> . FOR_LOOP
    (8) INSTRUCTION -> . WHILE_LOOP
    (9) INSTRUCTION -> . CONTROL_INSTRUCTION ;
    (10) INSTRUCTION -> . PRINT_CALL ;
    (11) ASSIGN -> . ID ASSIGN_TYPE EXPRESSION
    (12) ASSIGN -> . ID [ INTNUM ] ASSIGN_TYPE EXPRESSION
    (13) ASSIGN -> . ID [ INTNUM , INTNUM ] ASSIGN_TYPE EXPRESSION
    (65) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT
    (66) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT
    (74) FOR_LOOP -> . FOR FOR_CONDITION { INSTRUCTIONS }
    (75) FOR_LOOP -> . FOR FOR_CONDITION INSTRUCTION
    (77) WHILE_LOOP -> . WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS }
    (78) WHILE_LOOP -> . WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION
    (58) CONTROL_INSTRUCTION -> . BREAK
    (59) CONTROL_INSTRUCTION -> . CONTINUE
    (60) CONTROL_INSTRUCTION -> . RETURN
    (61) CONTROL_INSTRUCTION -> . RETURN TERM
    (62) PRINT_CALL -> . PRINT PRINT_TERMS

    {               shift and go to state 3
    ID              shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18

    CODE                           shift and go to state 1
    INSTRUCTIONS                   shift and go to state 2
    INSTRUCTION                    shift and go to state 4
    ASSIGN                         shift and go to state 5
    IF_CONDITION                   shift and go to state 6
    FOR_LOOP                       shift and go to state 7
    WHILE_LOOP                     shift and go to state 8
    CONTROL_INSTRUCTION            shift and go to state 9
    PRINT_CALL                     shift and go to state 10

state 1

    (0) S' -> CODE .



state 2

    (1) CODE -> INSTRUCTIONS .

    $end            reduce using rule 1 (CODE -> INSTRUCTIONS .)


state 3

    (2) INSTRUCTIONS -> { . INSTRUCTIONS }
    (2) INSTRUCTIONS -> . { INSTRUCTIONS }
    (3) INSTRUCTIONS -> . INSTRUCTION INSTRUCTIONS
    (4) INSTRUCTIONS -> . INSTRUCTION
    (5) INSTRUCTION -> . ASSIGN ;
    (6) INSTRUCTION -> . IF_CONDITION
    (7) INSTRUCTION -> . FOR_LOOP
    (8) INSTRUCTION -> . WHILE_LOOP
    (9) INSTRUCTION -> . CONTROL_INSTRUCTION ;
    (10) INSTRUCTION -> . PRINT_CALL ;
    (11) ASSIGN -> . ID ASSIGN_TYPE EXPRESSION
    (12) ASSIGN -> . ID [ INTNUM ] ASSIGN_TYPE EXPRESSION
    (13) ASSIGN -> . ID [ INTNUM , INTNUM ] ASSIGN_TYPE EXPRESSION
    (65) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT
    (66) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT
    (74) FOR_LOOP -> . FOR FOR_CONDITION { INSTRUCTIONS }
    (75) FOR_LOOP -> . FOR FOR_CONDITION INSTRUCTION
    (77) WHILE_LOOP -> . WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS }
    (78) WHILE_LOOP -> . WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION
    (58) CONTROL_INSTRUCTION -> . BREAK
    (59) CONTROL_INSTRUCTION -> . CONTINUE
    (60) CONTROL_INSTRUCTION -> . RETURN
    (61) CONTROL_INSTRUCTION -> . RETURN TERM
    (62) PRINT_CALL -> . PRINT PRINT_TERMS

    {               shift and go to state 3
    ID              shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18

    INSTRUCTIONS                   shift and go to state 19
    INSTRUCTION                    shift and go to state 4
    ASSIGN                         shift and go to state 5
    IF_CONDITION                   shift and go to state 6
    FOR_LOOP                       shift and go to state 7
    WHILE_LOOP                     shift and go to state 8
    CONTROL_INSTRUCTION            shift and go to state 9
    PRINT_CALL                     shift and go to state 10

state 4

    (3) INSTRUCTIONS -> INSTRUCTION . INSTRUCTIONS
    (4) INSTRUCTIONS -> INSTRUCTION .
    (2) INSTRUCTIONS -> . { INSTRUCTIONS }
    (3) INSTRUCTIONS -> . INSTRUCTION INSTRUCTIONS
    (4) INSTRUCTIONS -> . INSTRUCTION
    (5) INSTRUCTION -> . ASSIGN ;
    (6) INSTRUCTION -> . IF_CONDITION
    (7) INSTRUCTION -> . FOR_LOOP
    (8) INSTRUCTION -> . WHILE_LOOP
    (9) INSTRUCTION -> . CONTROL_INSTRUCTION ;
    (10) INSTRUCTION -> . PRINT_CALL ;
    (11) ASSIGN -> . ID ASSIGN_TYPE EXPRESSION
    (12) ASSIGN -> . ID [ INTNUM ] ASSIGN_TYPE EXPRESSION
    (13) ASSIGN -> . ID [ INTNUM , INTNUM ] ASSIGN_TYPE EXPRESSION
    (65) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT
    (66) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT
    (74) FOR_LOOP -> . FOR FOR_CONDITION { INSTRUCTIONS }
    (75) FOR_LOOP -> . FOR FOR_CONDITION INSTRUCTION
    (77) WHILE_LOOP -> . WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS }
    (78) WHILE_LOOP -> . WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION
    (58) CONTROL_INSTRUCTION -> . BREAK
    (59) CONTROL_INSTRUCTION -> . CONTINUE
    (60) CONTROL_INSTRUCTION -> . RETURN
    (61) CONTROL_INSTRUCTION -> . RETURN TERM
    (62) PRINT_CALL -> . PRINT PRINT_TERMS

    $end            reduce using rule 4 (INSTRUCTIONS -> INSTRUCTION .)
    }               reduce using rule 4 (INSTRUCTIONS -> INSTRUCTION .)
    {               shift and go to state 3
    ID              shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18

    INSTRUCTION                    shift and go to state 4
    INSTRUCTIONS                   shift and go to state 20
    ASSIGN                         shift and go to state 5
    IF_CONDITION                   shift and go to state 6
    FOR_LOOP                       shift and go to state 7
    WHILE_LOOP                     shift and go to state 8
    CONTROL_INSTRUCTION            shift and go to state 9
    PRINT_CALL                     shift and go to state 10

state 5

    (5) INSTRUCTION -> ASSIGN . ;

    ;               shift and go to state 21


state 6

    (6) INSTRUCTION -> IF_CONDITION .

    {               reduce using rule 6 (INSTRUCTION -> IF_CONDITION .)
    ID              reduce using rule 6 (INSTRUCTION -> IF_CONDITION .)
    IF              reduce using rule 6 (INSTRUCTION -> IF_CONDITION .)
    FOR             reduce using rule 6 (INSTRUCTION -> IF_CONDITION .)
    WHILE           reduce using rule 6 (INSTRUCTION -> IF_CONDITION .)
    BREAK           reduce using rule 6 (INSTRUCTION -> IF_CONDITION .)
    CONTINUE        reduce using rule 6 (INSTRUCTION -> IF_CONDITION .)
    RETURN          reduce using rule 6 (INSTRUCTION -> IF_CONDITION .)
    PRINT           reduce using rule 6 (INSTRUCTION -> IF_CONDITION .)
    $end            reduce using rule 6 (INSTRUCTION -> IF_CONDITION .)
    }               reduce using rule 6 (INSTRUCTION -> IF_CONDITION .)
    ELSEIF          reduce using rule 6 (INSTRUCTION -> IF_CONDITION .)
    ELSE            reduce using rule 6 (INSTRUCTION -> IF_CONDITION .)


state 7

    (7) INSTRUCTION -> FOR_LOOP .

    {               reduce using rule 7 (INSTRUCTION -> FOR_LOOP .)
    ID              reduce using rule 7 (INSTRUCTION -> FOR_LOOP .)
    IF              reduce using rule 7 (INSTRUCTION -> FOR_LOOP .)
    FOR             reduce using rule 7 (INSTRUCTION -> FOR_LOOP .)
    WHILE           reduce using rule 7 (INSTRUCTION -> FOR_LOOP .)
    BREAK           reduce using rule 7 (INSTRUCTION -> FOR_LOOP .)
    CONTINUE        reduce using rule 7 (INSTRUCTION -> FOR_LOOP .)
    RETURN          reduce using rule 7 (INSTRUCTION -> FOR_LOOP .)
    PRINT           reduce using rule 7 (INSTRUCTION -> FOR_LOOP .)
    $end            reduce using rule 7 (INSTRUCTION -> FOR_LOOP .)
    }               reduce using rule 7 (INSTRUCTION -> FOR_LOOP .)
    ELSEIF          reduce using rule 7 (INSTRUCTION -> FOR_LOOP .)
    ELSE            reduce using rule 7 (INSTRUCTION -> FOR_LOOP .)


state 8

    (8) INSTRUCTION -> WHILE_LOOP .

    {               reduce using rule 8 (INSTRUCTION -> WHILE_LOOP .)
    ID              reduce using rule 8 (INSTRUCTION -> WHILE_LOOP .)
    IF              reduce using rule 8 (INSTRUCTION -> WHILE_LOOP .)
    FOR             reduce using rule 8 (INSTRUCTION -> WHILE_LOOP .)
    WHILE           reduce using rule 8 (INSTRUCTION -> WHILE_LOOP .)
    BREAK           reduce using rule 8 (INSTRUCTION -> WHILE_LOOP .)
    CONTINUE        reduce using rule 8 (INSTRUCTION -> WHILE_LOOP .)
    RETURN          reduce using rule 8 (INSTRUCTION -> WHILE_LOOP .)
    PRINT           reduce using rule 8 (INSTRUCTION -> WHILE_LOOP .)
    $end            reduce using rule 8 (INSTRUCTION -> WHILE_LOOP .)
    }               reduce using rule 8 (INSTRUCTION -> WHILE_LOOP .)
    ELSEIF          reduce using rule 8 (INSTRUCTION -> WHILE_LOOP .)
    ELSE            reduce using rule 8 (INSTRUCTION -> WHILE_LOOP .)


state 9

    (9) INSTRUCTION -> CONTROL_INSTRUCTION . ;

    ;               shift and go to state 22


state 10

    (10) INSTRUCTION -> PRINT_CALL . ;

    ;               shift and go to state 23


state 11

    (11) ASSIGN -> ID . ASSIGN_TYPE EXPRESSION
    (12) ASSIGN -> ID . [ INTNUM ] ASSIGN_TYPE EXPRESSION
    (13) ASSIGN -> ID . [ INTNUM , INTNUM ] ASSIGN_TYPE EXPRESSION
    (14) ASSIGN_TYPE -> . =
    (15) ASSIGN_TYPE -> . ADDASSIGN
    (16) ASSIGN_TYPE -> . SUBASSIGN
    (17) ASSIGN_TYPE -> . DIVASSIGN
    (18) ASSIGN_TYPE -> . MULASSIGN

    [               shift and go to state 25
    =               shift and go to state 26
    ADDASSIGN       shift and go to state 27
    SUBASSIGN       shift and go to state 28
    DIVASSIGN       shift and go to state 29
    MULASSIGN       shift and go to state 30

    ASSIGN_TYPE                    shift and go to state 24

state 12

    (65) IF_CONDITION -> IF . ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT
    (66) IF_CONDITION -> IF . ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT

    (               shift and go to state 31


state 13

    (74) FOR_LOOP -> FOR . FOR_CONDITION { INSTRUCTIONS }
    (75) FOR_LOOP -> FOR . FOR_CONDITION INSTRUCTION
    (76) FOR_CONDITION -> . TERM = INTNUM_OR_ID : INTNUM_OR_ID
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    FOR_CONDITION                  shift and go to state 32
    TERM                           shift and go to state 33
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 14

    (77) WHILE_LOOP -> WHILE . ( LOGICAL_EXPRESSION ) { INSTRUCTIONS }
    (78) WHILE_LOOP -> WHILE . ( LOGICAL_EXPRESSION ) INSTRUCTION

    (               shift and go to state 46


state 15

    (58) CONTROL_INSTRUCTION -> BREAK .

    ;               reduce using rule 58 (CONTROL_INSTRUCTION -> BREAK .)


state 16

    (59) CONTROL_INSTRUCTION -> CONTINUE .

    ;               reduce using rule 59 (CONTROL_INSTRUCTION -> CONTINUE .)


state 17

    (60) CONTROL_INSTRUCTION -> RETURN .
    (61) CONTROL_INSTRUCTION -> RETURN . TERM
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    ;               reduce using rule 60 (CONTROL_INSTRUCTION -> RETURN .)
    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    TERM                           shift and go to state 47
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 18

    (62) PRINT_CALL -> PRINT . PRINT_TERMS
    (63) PRINT_TERMS -> . PRINT_TERMS , TERM
    (64) PRINT_TERMS -> . TERM
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    PRINT_TERMS                    shift and go to state 48
    TERM                           shift and go to state 49
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 19

    (2) INSTRUCTIONS -> { INSTRUCTIONS . }

    }               shift and go to state 50


state 20

    (3) INSTRUCTIONS -> INSTRUCTION INSTRUCTIONS .

    $end            reduce using rule 3 (INSTRUCTIONS -> INSTRUCTION INSTRUCTIONS .)
    }               reduce using rule 3 (INSTRUCTIONS -> INSTRUCTION INSTRUCTIONS .)


state 21

    (5) INSTRUCTION -> ASSIGN ; .

    {               reduce using rule 5 (INSTRUCTION -> ASSIGN ; .)
    ID              reduce using rule 5 (INSTRUCTION -> ASSIGN ; .)
    IF              reduce using rule 5 (INSTRUCTION -> ASSIGN ; .)
    FOR             reduce using rule 5 (INSTRUCTION -> ASSIGN ; .)
    WHILE           reduce using rule 5 (INSTRUCTION -> ASSIGN ; .)
    BREAK           reduce using rule 5 (INSTRUCTION -> ASSIGN ; .)
    CONTINUE        reduce using rule 5 (INSTRUCTION -> ASSIGN ; .)
    RETURN          reduce using rule 5 (INSTRUCTION -> ASSIGN ; .)
    PRINT           reduce using rule 5 (INSTRUCTION -> ASSIGN ; .)
    $end            reduce using rule 5 (INSTRUCTION -> ASSIGN ; .)
    }               reduce using rule 5 (INSTRUCTION -> ASSIGN ; .)
    ELSEIF          reduce using rule 5 (INSTRUCTION -> ASSIGN ; .)
    ELSE            reduce using rule 5 (INSTRUCTION -> ASSIGN ; .)


state 22

    (9) INSTRUCTION -> CONTROL_INSTRUCTION ; .

    {               reduce using rule 9 (INSTRUCTION -> CONTROL_INSTRUCTION ; .)
    ID              reduce using rule 9 (INSTRUCTION -> CONTROL_INSTRUCTION ; .)
    IF              reduce using rule 9 (INSTRUCTION -> CONTROL_INSTRUCTION ; .)
    FOR             reduce using rule 9 (INSTRUCTION -> CONTROL_INSTRUCTION ; .)
    WHILE           reduce using rule 9 (INSTRUCTION -> CONTROL_INSTRUCTION ; .)
    BREAK           reduce using rule 9 (INSTRUCTION -> CONTROL_INSTRUCTION ; .)
    CONTINUE        reduce using rule 9 (INSTRUCTION -> CONTROL_INSTRUCTION ; .)
    RETURN          reduce using rule 9 (INSTRUCTION -> CONTROL_INSTRUCTION ; .)
    PRINT           reduce using rule 9 (INSTRUCTION -> CONTROL_INSTRUCTION ; .)
    $end            reduce using rule 9 (INSTRUCTION -> CONTROL_INSTRUCTION ; .)
    }               reduce using rule 9 (INSTRUCTION -> CONTROL_INSTRUCTION ; .)
    ELSEIF          reduce using rule 9 (INSTRUCTION -> CONTROL_INSTRUCTION ; .)
    ELSE            reduce using rule 9 (INSTRUCTION -> CONTROL_INSTRUCTION ; .)


state 23

    (10) INSTRUCTION -> PRINT_CALL ; .

    {               reduce using rule 10 (INSTRUCTION -> PRINT_CALL ; .)
    ID              reduce using rule 10 (INSTRUCTION -> PRINT_CALL ; .)
    IF              reduce using rule 10 (INSTRUCTION -> PRINT_CALL ; .)
    FOR             reduce using rule 10 (INSTRUCTION -> PRINT_CALL ; .)
    WHILE           reduce using rule 10 (INSTRUCTION -> PRINT_CALL ; .)
    BREAK           reduce using rule 10 (INSTRUCTION -> PRINT_CALL ; .)
    CONTINUE        reduce using rule 10 (INSTRUCTION -> PRINT_CALL ; .)
    RETURN          reduce using rule 10 (INSTRUCTION -> PRINT_CALL ; .)
    PRINT           reduce using rule 10 (INSTRUCTION -> PRINT_CALL ; .)
    $end            reduce using rule 10 (INSTRUCTION -> PRINT_CALL ; .)
    }               reduce using rule 10 (INSTRUCTION -> PRINT_CALL ; .)
    ELSEIF          reduce using rule 10 (INSTRUCTION -> PRINT_CALL ; .)
    ELSE            reduce using rule 10 (INSTRUCTION -> PRINT_CALL ; .)


state 24

    (11) ASSIGN -> ID ASSIGN_TYPE . EXPRESSION
    (19) EXPRESSION -> . BINARY_EXPRESSION
    (20) EXPRESSION -> . LOGICAL_EXPRESSION
    (21) EXPRESSION -> . MATRIX_EXPRESSION
    (22) EXPRESSION -> . ( EXPRESSION )
    (23) EXPRESSION -> . TERM
    (46) EXPRESSION -> . RETURN TERM
    (24) BINARY_EXPRESSION -> . EXPRESSION + EXPRESSION
    (25) BINARY_EXPRESSION -> . EXPRESSION - EXPRESSION
    (26) BINARY_EXPRESSION -> . EXPRESSION * EXPRESSION
    (27) BINARY_EXPRESSION -> . EXPRESSION / EXPRESSION
    (28) LOGICAL_EXPRESSION -> . EXPRESSION > EXPRESSION
    (29) LOGICAL_EXPRESSION -> . EXPRESSION < EXPRESSION
    (30) LOGICAL_EXPRESSION -> . EXPRESSION EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> . EXPRESSION EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> . EXPRESSION EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> . EXPRESSION NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> . EXPRESSION DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> . EXPRESSION DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> . EXPRESSION DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> . EXPRESSION DOTDIV EXPRESSION
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    (               shift and go to state 55
    RETURN          shift and go to state 57
    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    EXPRESSION                     shift and go to state 51
    BINARY_EXPRESSION              shift and go to state 52
    LOGICAL_EXPRESSION             shift and go to state 53
    MATRIX_EXPRESSION              shift and go to state 54
    TERM                           shift and go to state 56
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 25

    (12) ASSIGN -> ID [ . INTNUM ] ASSIGN_TYPE EXPRESSION
    (13) ASSIGN -> ID [ . INTNUM , INTNUM ] ASSIGN_TYPE EXPRESSION

    INTNUM          shift and go to state 58


state 26

    (14) ASSIGN_TYPE -> = .

    (               reduce using rule 14 (ASSIGN_TYPE -> = .)
    RETURN          reduce using rule 14 (ASSIGN_TYPE -> = .)
    ID              reduce using rule 14 (ASSIGN_TYPE -> = .)
    INTNUM          reduce using rule 14 (ASSIGN_TYPE -> = .)
    FLOATNUM        reduce using rule 14 (ASSIGN_TYPE -> = .)
    STRING          reduce using rule 14 (ASSIGN_TYPE -> = .)
    -               reduce using rule 14 (ASSIGN_TYPE -> = .)
    [               reduce using rule 14 (ASSIGN_TYPE -> = .)
    ZEROS           reduce using rule 14 (ASSIGN_TYPE -> = .)
    ONES            reduce using rule 14 (ASSIGN_TYPE -> = .)
    EYE             reduce using rule 14 (ASSIGN_TYPE -> = .)


state 27

    (15) ASSIGN_TYPE -> ADDASSIGN .

    (               reduce using rule 15 (ASSIGN_TYPE -> ADDASSIGN .)
    RETURN          reduce using rule 15 (ASSIGN_TYPE -> ADDASSIGN .)
    ID              reduce using rule 15 (ASSIGN_TYPE -> ADDASSIGN .)
    INTNUM          reduce using rule 15 (ASSIGN_TYPE -> ADDASSIGN .)
    FLOATNUM        reduce using rule 15 (ASSIGN_TYPE -> ADDASSIGN .)
    STRING          reduce using rule 15 (ASSIGN_TYPE -> ADDASSIGN .)
    -               reduce using rule 15 (ASSIGN_TYPE -> ADDASSIGN .)
    [               reduce using rule 15 (ASSIGN_TYPE -> ADDASSIGN .)
    ZEROS           reduce using rule 15 (ASSIGN_TYPE -> ADDASSIGN .)
    ONES            reduce using rule 15 (ASSIGN_TYPE -> ADDASSIGN .)
    EYE             reduce using rule 15 (ASSIGN_TYPE -> ADDASSIGN .)


state 28

    (16) ASSIGN_TYPE -> SUBASSIGN .

    (               reduce using rule 16 (ASSIGN_TYPE -> SUBASSIGN .)
    RETURN          reduce using rule 16 (ASSIGN_TYPE -> SUBASSIGN .)
    ID              reduce using rule 16 (ASSIGN_TYPE -> SUBASSIGN .)
    INTNUM          reduce using rule 16 (ASSIGN_TYPE -> SUBASSIGN .)
    FLOATNUM        reduce using rule 16 (ASSIGN_TYPE -> SUBASSIGN .)
    STRING          reduce using rule 16 (ASSIGN_TYPE -> SUBASSIGN .)
    -               reduce using rule 16 (ASSIGN_TYPE -> SUBASSIGN .)
    [               reduce using rule 16 (ASSIGN_TYPE -> SUBASSIGN .)
    ZEROS           reduce using rule 16 (ASSIGN_TYPE -> SUBASSIGN .)
    ONES            reduce using rule 16 (ASSIGN_TYPE -> SUBASSIGN .)
    EYE             reduce using rule 16 (ASSIGN_TYPE -> SUBASSIGN .)


state 29

    (17) ASSIGN_TYPE -> DIVASSIGN .

    (               reduce using rule 17 (ASSIGN_TYPE -> DIVASSIGN .)
    RETURN          reduce using rule 17 (ASSIGN_TYPE -> DIVASSIGN .)
    ID              reduce using rule 17 (ASSIGN_TYPE -> DIVASSIGN .)
    INTNUM          reduce using rule 17 (ASSIGN_TYPE -> DIVASSIGN .)
    FLOATNUM        reduce using rule 17 (ASSIGN_TYPE -> DIVASSIGN .)
    STRING          reduce using rule 17 (ASSIGN_TYPE -> DIVASSIGN .)
    -               reduce using rule 17 (ASSIGN_TYPE -> DIVASSIGN .)
    [               reduce using rule 17 (ASSIGN_TYPE -> DIVASSIGN .)
    ZEROS           reduce using rule 17 (ASSIGN_TYPE -> DIVASSIGN .)
    ONES            reduce using rule 17 (ASSIGN_TYPE -> DIVASSIGN .)
    EYE             reduce using rule 17 (ASSIGN_TYPE -> DIVASSIGN .)


state 30

    (18) ASSIGN_TYPE -> MULASSIGN .

    (               reduce using rule 18 (ASSIGN_TYPE -> MULASSIGN .)
    RETURN          reduce using rule 18 (ASSIGN_TYPE -> MULASSIGN .)
    ID              reduce using rule 18 (ASSIGN_TYPE -> MULASSIGN .)
    INTNUM          reduce using rule 18 (ASSIGN_TYPE -> MULASSIGN .)
    FLOATNUM        reduce using rule 18 (ASSIGN_TYPE -> MULASSIGN .)
    STRING          reduce using rule 18 (ASSIGN_TYPE -> MULASSIGN .)
    -               reduce using rule 18 (ASSIGN_TYPE -> MULASSIGN .)
    [               reduce using rule 18 (ASSIGN_TYPE -> MULASSIGN .)
    ZEROS           reduce using rule 18 (ASSIGN_TYPE -> MULASSIGN .)
    ONES            reduce using rule 18 (ASSIGN_TYPE -> MULASSIGN .)
    EYE             reduce using rule 18 (ASSIGN_TYPE -> MULASSIGN .)


state 31

    (65) IF_CONDITION -> IF ( . LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT
    (66) IF_CONDITION -> IF ( . LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT
    (28) LOGICAL_EXPRESSION -> . EXPRESSION > EXPRESSION
    (29) LOGICAL_EXPRESSION -> . EXPRESSION < EXPRESSION
    (30) LOGICAL_EXPRESSION -> . EXPRESSION EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> . EXPRESSION EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> . EXPRESSION EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> . EXPRESSION NOTEQUAL EXPRESSION
    (19) EXPRESSION -> . BINARY_EXPRESSION
    (20) EXPRESSION -> . LOGICAL_EXPRESSION
    (21) EXPRESSION -> . MATRIX_EXPRESSION
    (22) EXPRESSION -> . ( EXPRESSION )
    (23) EXPRESSION -> . TERM
    (46) EXPRESSION -> . RETURN TERM
    (24) BINARY_EXPRESSION -> . EXPRESSION + EXPRESSION
    (25) BINARY_EXPRESSION -> . EXPRESSION - EXPRESSION
    (26) BINARY_EXPRESSION -> . EXPRESSION * EXPRESSION
    (27) BINARY_EXPRESSION -> . EXPRESSION / EXPRESSION
    (34) MATRIX_EXPRESSION -> . EXPRESSION DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> . EXPRESSION DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> . EXPRESSION DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> . EXPRESSION DOTDIV EXPRESSION
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    (               shift and go to state 55
    RETURN          shift and go to state 57
    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    LOGICAL_EXPRESSION             shift and go to state 59
    EXPRESSION                     shift and go to state 60
    BINARY_EXPRESSION              shift and go to state 52
    MATRIX_EXPRESSION              shift and go to state 54
    TERM                           shift and go to state 56
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 32

    (74) FOR_LOOP -> FOR FOR_CONDITION . { INSTRUCTIONS }
    (75) FOR_LOOP -> FOR FOR_CONDITION . INSTRUCTION
    (5) INSTRUCTION -> . ASSIGN ;
    (6) INSTRUCTION -> . IF_CONDITION
    (7) INSTRUCTION -> . FOR_LOOP
    (8) INSTRUCTION -> . WHILE_LOOP
    (9) INSTRUCTION -> . CONTROL_INSTRUCTION ;
    (10) INSTRUCTION -> . PRINT_CALL ;
    (11) ASSIGN -> . ID ASSIGN_TYPE EXPRESSION
    (12) ASSIGN -> . ID [ INTNUM ] ASSIGN_TYPE EXPRESSION
    (13) ASSIGN -> . ID [ INTNUM , INTNUM ] ASSIGN_TYPE EXPRESSION
    (65) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT
    (66) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT
    (74) FOR_LOOP -> . FOR FOR_CONDITION { INSTRUCTIONS }
    (75) FOR_LOOP -> . FOR FOR_CONDITION INSTRUCTION
    (77) WHILE_LOOP -> . WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS }
    (78) WHILE_LOOP -> . WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION
    (58) CONTROL_INSTRUCTION -> . BREAK
    (59) CONTROL_INSTRUCTION -> . CONTINUE
    (60) CONTROL_INSTRUCTION -> . RETURN
    (61) CONTROL_INSTRUCTION -> . RETURN TERM
    (62) PRINT_CALL -> . PRINT PRINT_TERMS

    {               shift and go to state 61
    ID              shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18

    INSTRUCTION                    shift and go to state 62
    ASSIGN                         shift and go to state 5
    IF_CONDITION                   shift and go to state 6
    FOR_LOOP                       shift and go to state 7
    WHILE_LOOP                     shift and go to state 8
    CONTROL_INSTRUCTION            shift and go to state 9
    PRINT_CALL                     shift and go to state 10

state 33

    (76) FOR_CONDITION -> TERM . = INTNUM_OR_ID : INTNUM_OR_ID

    =               shift and go to state 63


state 34

    (38) TERM -> ID .
    (44) TERM -> ID . '

    =               reduce using rule 38 (TERM -> ID .)
    ;               reduce using rule 38 (TERM -> ID .)
    ,               reduce using rule 38 (TERM -> ID .)
    +               reduce using rule 38 (TERM -> ID .)
    -               reduce using rule 38 (TERM -> ID .)
    *               reduce using rule 38 (TERM -> ID .)
    /               reduce using rule 38 (TERM -> ID .)
    >               reduce using rule 38 (TERM -> ID .)
    <               reduce using rule 38 (TERM -> ID .)
    EQORGT          reduce using rule 38 (TERM -> ID .)
    EQORLESS        reduce using rule 38 (TERM -> ID .)
    EQUAL           reduce using rule 38 (TERM -> ID .)
    NOTEQUAL        reduce using rule 38 (TERM -> ID .)
    DOTADD          reduce using rule 38 (TERM -> ID .)
    DOTSUB          reduce using rule 38 (TERM -> ID .)
    DOTMUL          reduce using rule 38 (TERM -> ID .)
    DOTDIV          reduce using rule 38 (TERM -> ID .)
    ]               reduce using rule 38 (TERM -> ID .)
    )               reduce using rule 38 (TERM -> ID .)
    '               shift and go to state 64


state 35

    (39) TERM -> INTNUM .

    =               reduce using rule 39 (TERM -> INTNUM .)
    ;               reduce using rule 39 (TERM -> INTNUM .)
    ,               reduce using rule 39 (TERM -> INTNUM .)
    +               reduce using rule 39 (TERM -> INTNUM .)
    -               reduce using rule 39 (TERM -> INTNUM .)
    *               reduce using rule 39 (TERM -> INTNUM .)
    /               reduce using rule 39 (TERM -> INTNUM .)
    >               reduce using rule 39 (TERM -> INTNUM .)
    <               reduce using rule 39 (TERM -> INTNUM .)
    EQORGT          reduce using rule 39 (TERM -> INTNUM .)
    EQORLESS        reduce using rule 39 (TERM -> INTNUM .)
    EQUAL           reduce using rule 39 (TERM -> INTNUM .)
    NOTEQUAL        reduce using rule 39 (TERM -> INTNUM .)
    DOTADD          reduce using rule 39 (TERM -> INTNUM .)
    DOTSUB          reduce using rule 39 (TERM -> INTNUM .)
    DOTMUL          reduce using rule 39 (TERM -> INTNUM .)
    DOTDIV          reduce using rule 39 (TERM -> INTNUM .)
    ]               reduce using rule 39 (TERM -> INTNUM .)
    )               reduce using rule 39 (TERM -> INTNUM .)


state 36

    (40) TERM -> FLOATNUM .

    =               reduce using rule 40 (TERM -> FLOATNUM .)
    ;               reduce using rule 40 (TERM -> FLOATNUM .)
    ,               reduce using rule 40 (TERM -> FLOATNUM .)
    +               reduce using rule 40 (TERM -> FLOATNUM .)
    -               reduce using rule 40 (TERM -> FLOATNUM .)
    *               reduce using rule 40 (TERM -> FLOATNUM .)
    /               reduce using rule 40 (TERM -> FLOATNUM .)
    >               reduce using rule 40 (TERM -> FLOATNUM .)
    <               reduce using rule 40 (TERM -> FLOATNUM .)
    EQORGT          reduce using rule 40 (TERM -> FLOATNUM .)
    EQORLESS        reduce using rule 40 (TERM -> FLOATNUM .)
    EQUAL           reduce using rule 40 (TERM -> FLOATNUM .)
    NOTEQUAL        reduce using rule 40 (TERM -> FLOATNUM .)
    DOTADD          reduce using rule 40 (TERM -> FLOATNUM .)
    DOTSUB          reduce using rule 40 (TERM -> FLOATNUM .)
    DOTMUL          reduce using rule 40 (TERM -> FLOATNUM .)
    DOTDIV          reduce using rule 40 (TERM -> FLOATNUM .)
    ]               reduce using rule 40 (TERM -> FLOATNUM .)
    )               reduce using rule 40 (TERM -> FLOATNUM .)


state 37

    (41) TERM -> STRING .

    =               reduce using rule 41 (TERM -> STRING .)
    ;               reduce using rule 41 (TERM -> STRING .)
    ,               reduce using rule 41 (TERM -> STRING .)
    +               reduce using rule 41 (TERM -> STRING .)
    -               reduce using rule 41 (TERM -> STRING .)
    *               reduce using rule 41 (TERM -> STRING .)
    /               reduce using rule 41 (TERM -> STRING .)
    >               reduce using rule 41 (TERM -> STRING .)
    <               reduce using rule 41 (TERM -> STRING .)
    EQORGT          reduce using rule 41 (TERM -> STRING .)
    EQORLESS        reduce using rule 41 (TERM -> STRING .)
    EQUAL           reduce using rule 41 (TERM -> STRING .)
    NOTEQUAL        reduce using rule 41 (TERM -> STRING .)
    DOTADD          reduce using rule 41 (TERM -> STRING .)
    DOTSUB          reduce using rule 41 (TERM -> STRING .)
    DOTMUL          reduce using rule 41 (TERM -> STRING .)
    DOTDIV          reduce using rule 41 (TERM -> STRING .)
    ]               reduce using rule 41 (TERM -> STRING .)
    )               reduce using rule 41 (TERM -> STRING .)


state 38

    (42) TERM -> MATRIX .

    =               reduce using rule 42 (TERM -> MATRIX .)
    ;               reduce using rule 42 (TERM -> MATRIX .)
    ,               reduce using rule 42 (TERM -> MATRIX .)
    +               reduce using rule 42 (TERM -> MATRIX .)
    -               reduce using rule 42 (TERM -> MATRIX .)
    *               reduce using rule 42 (TERM -> MATRIX .)
    /               reduce using rule 42 (TERM -> MATRIX .)
    >               reduce using rule 42 (TERM -> MATRIX .)
    <               reduce using rule 42 (TERM -> MATRIX .)
    EQORGT          reduce using rule 42 (TERM -> MATRIX .)
    EQORLESS        reduce using rule 42 (TERM -> MATRIX .)
    EQUAL           reduce using rule 42 (TERM -> MATRIX .)
    NOTEQUAL        reduce using rule 42 (TERM -> MATRIX .)
    DOTADD          reduce using rule 42 (TERM -> MATRIX .)
    DOTSUB          reduce using rule 42 (TERM -> MATRIX .)
    DOTMUL          reduce using rule 42 (TERM -> MATRIX .)
    DOTDIV          reduce using rule 42 (TERM -> MATRIX .)
    ]               reduce using rule 42 (TERM -> MATRIX .)
    )               reduce using rule 42 (TERM -> MATRIX .)


state 39

    (43) TERM -> FUNCTION_CALL .

    =               reduce using rule 43 (TERM -> FUNCTION_CALL .)
    ;               reduce using rule 43 (TERM -> FUNCTION_CALL .)
    ,               reduce using rule 43 (TERM -> FUNCTION_CALL .)
    +               reduce using rule 43 (TERM -> FUNCTION_CALL .)
    -               reduce using rule 43 (TERM -> FUNCTION_CALL .)
    *               reduce using rule 43 (TERM -> FUNCTION_CALL .)
    /               reduce using rule 43 (TERM -> FUNCTION_CALL .)
    >               reduce using rule 43 (TERM -> FUNCTION_CALL .)
    <               reduce using rule 43 (TERM -> FUNCTION_CALL .)
    EQORGT          reduce using rule 43 (TERM -> FUNCTION_CALL .)
    EQORLESS        reduce using rule 43 (TERM -> FUNCTION_CALL .)
    EQUAL           reduce using rule 43 (TERM -> FUNCTION_CALL .)
    NOTEQUAL        reduce using rule 43 (TERM -> FUNCTION_CALL .)
    DOTADD          reduce using rule 43 (TERM -> FUNCTION_CALL .)
    DOTSUB          reduce using rule 43 (TERM -> FUNCTION_CALL .)
    DOTMUL          reduce using rule 43 (TERM -> FUNCTION_CALL .)
    DOTDIV          reduce using rule 43 (TERM -> FUNCTION_CALL .)
    ]               reduce using rule 43 (TERM -> FUNCTION_CALL .)
    )               reduce using rule 43 (TERM -> FUNCTION_CALL .)


state 40

    (45) TERM -> - . ID

    ID              shift and go to state 65


state 41

    (49) MATRIX -> [ . VECTORS ]
    (50) VECTORS -> . VECTORS ; VECTOR
    (51) VECTORS -> . VECTOR
    (52) VECTOR -> . VECTOR , TERM
    (53) VECTOR -> . TERM
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    VECTORS                        shift and go to state 66
    VECTOR                         shift and go to state 67
    TERM                           shift and go to state 68
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 42

    (54) FUNCTION_CALL -> FUNCTION_NAME . ( TERM )

    (               shift and go to state 69


state 43

    (55) FUNCTION_NAME -> ZEROS .

    (               reduce using rule 55 (FUNCTION_NAME -> ZEROS .)


state 44

    (56) FUNCTION_NAME -> ONES .

    (               reduce using rule 56 (FUNCTION_NAME -> ONES .)


state 45

    (57) FUNCTION_NAME -> EYE .

    (               reduce using rule 57 (FUNCTION_NAME -> EYE .)


state 46

    (77) WHILE_LOOP -> WHILE ( . LOGICAL_EXPRESSION ) { INSTRUCTIONS }
    (78) WHILE_LOOP -> WHILE ( . LOGICAL_EXPRESSION ) INSTRUCTION
    (28) LOGICAL_EXPRESSION -> . EXPRESSION > EXPRESSION
    (29) LOGICAL_EXPRESSION -> . EXPRESSION < EXPRESSION
    (30) LOGICAL_EXPRESSION -> . EXPRESSION EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> . EXPRESSION EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> . EXPRESSION EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> . EXPRESSION NOTEQUAL EXPRESSION
    (19) EXPRESSION -> . BINARY_EXPRESSION
    (20) EXPRESSION -> . LOGICAL_EXPRESSION
    (21) EXPRESSION -> . MATRIX_EXPRESSION
    (22) EXPRESSION -> . ( EXPRESSION )
    (23) EXPRESSION -> . TERM
    (46) EXPRESSION -> . RETURN TERM
    (24) BINARY_EXPRESSION -> . EXPRESSION + EXPRESSION
    (25) BINARY_EXPRESSION -> . EXPRESSION - EXPRESSION
    (26) BINARY_EXPRESSION -> . EXPRESSION * EXPRESSION
    (27) BINARY_EXPRESSION -> . EXPRESSION / EXPRESSION
    (34) MATRIX_EXPRESSION -> . EXPRESSION DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> . EXPRESSION DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> . EXPRESSION DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> . EXPRESSION DOTDIV EXPRESSION
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    (               shift and go to state 55
    RETURN          shift and go to state 57
    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    LOGICAL_EXPRESSION             shift and go to state 70
    EXPRESSION                     shift and go to state 60
    BINARY_EXPRESSION              shift and go to state 52
    MATRIX_EXPRESSION              shift and go to state 54
    TERM                           shift and go to state 56
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 47

    (61) CONTROL_INSTRUCTION -> RETURN TERM .

    ;               reduce using rule 61 (CONTROL_INSTRUCTION -> RETURN TERM .)


state 48

    (62) PRINT_CALL -> PRINT PRINT_TERMS .
    (63) PRINT_TERMS -> PRINT_TERMS . , TERM

    ;               reduce using rule 62 (PRINT_CALL -> PRINT PRINT_TERMS .)
    ,               shift and go to state 71


state 49

    (64) PRINT_TERMS -> TERM .

    ,               reduce using rule 64 (PRINT_TERMS -> TERM .)
    ;               reduce using rule 64 (PRINT_TERMS -> TERM .)


state 50

    (2) INSTRUCTIONS -> { INSTRUCTIONS } .

    $end            reduce using rule 2 (INSTRUCTIONS -> { INSTRUCTIONS } .)
    }               reduce using rule 2 (INSTRUCTIONS -> { INSTRUCTIONS } .)


state 51

    (11) ASSIGN -> ID ASSIGN_TYPE EXPRESSION .
    (24) BINARY_EXPRESSION -> EXPRESSION . + EXPRESSION
    (25) BINARY_EXPRESSION -> EXPRESSION . - EXPRESSION
    (26) BINARY_EXPRESSION -> EXPRESSION . * EXPRESSION
    (27) BINARY_EXPRESSION -> EXPRESSION . / EXPRESSION
    (28) LOGICAL_EXPRESSION -> EXPRESSION . > EXPRESSION
    (29) LOGICAL_EXPRESSION -> EXPRESSION . < EXPRESSION
    (30) LOGICAL_EXPRESSION -> EXPRESSION . EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> EXPRESSION . EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> EXPRESSION . EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> EXPRESSION . NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> EXPRESSION . DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> EXPRESSION . DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> EXPRESSION . DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> EXPRESSION . DOTDIV EXPRESSION

    ;               reduce using rule 11 (ASSIGN -> ID ASSIGN_TYPE EXPRESSION .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    >               shift and go to state 76
    <               shift and go to state 77
    EQORGT          shift and go to state 78
    EQORLESS        shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    DOTADD          shift and go to state 82
    DOTSUB          shift and go to state 83
    DOTMUL          shift and go to state 84
    DOTDIV          shift and go to state 85


state 52

    (19) EXPRESSION -> BINARY_EXPRESSION .

    +               reduce using rule 19 (EXPRESSION -> BINARY_EXPRESSION .)
    -               reduce using rule 19 (EXPRESSION -> BINARY_EXPRESSION .)
    *               reduce using rule 19 (EXPRESSION -> BINARY_EXPRESSION .)
    /               reduce using rule 19 (EXPRESSION -> BINARY_EXPRESSION .)
    >               reduce using rule 19 (EXPRESSION -> BINARY_EXPRESSION .)
    <               reduce using rule 19 (EXPRESSION -> BINARY_EXPRESSION .)
    EQORGT          reduce using rule 19 (EXPRESSION -> BINARY_EXPRESSION .)
    EQORLESS        reduce using rule 19 (EXPRESSION -> BINARY_EXPRESSION .)
    EQUAL           reduce using rule 19 (EXPRESSION -> BINARY_EXPRESSION .)
    NOTEQUAL        reduce using rule 19 (EXPRESSION -> BINARY_EXPRESSION .)
    DOTADD          reduce using rule 19 (EXPRESSION -> BINARY_EXPRESSION .)
    DOTSUB          reduce using rule 19 (EXPRESSION -> BINARY_EXPRESSION .)
    DOTMUL          reduce using rule 19 (EXPRESSION -> BINARY_EXPRESSION .)
    DOTDIV          reduce using rule 19 (EXPRESSION -> BINARY_EXPRESSION .)
    ;               reduce using rule 19 (EXPRESSION -> BINARY_EXPRESSION .)
    )               reduce using rule 19 (EXPRESSION -> BINARY_EXPRESSION .)


state 53

    (20) EXPRESSION -> LOGICAL_EXPRESSION .

    +               reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    -               reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    *               reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    /               reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    >               reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    <               reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    EQORGT          reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    EQORLESS        reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    EQUAL           reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    NOTEQUAL        reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    DOTADD          reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    DOTSUB          reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    DOTMUL          reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    DOTDIV          reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    ;               reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    )               reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)


state 54

    (21) EXPRESSION -> MATRIX_EXPRESSION .

    +               reduce using rule 21 (EXPRESSION -> MATRIX_EXPRESSION .)
    -               reduce using rule 21 (EXPRESSION -> MATRIX_EXPRESSION .)
    *               reduce using rule 21 (EXPRESSION -> MATRIX_EXPRESSION .)
    /               reduce using rule 21 (EXPRESSION -> MATRIX_EXPRESSION .)
    >               reduce using rule 21 (EXPRESSION -> MATRIX_EXPRESSION .)
    <               reduce using rule 21 (EXPRESSION -> MATRIX_EXPRESSION .)
    EQORGT          reduce using rule 21 (EXPRESSION -> MATRIX_EXPRESSION .)
    EQORLESS        reduce using rule 21 (EXPRESSION -> MATRIX_EXPRESSION .)
    EQUAL           reduce using rule 21 (EXPRESSION -> MATRIX_EXPRESSION .)
    NOTEQUAL        reduce using rule 21 (EXPRESSION -> MATRIX_EXPRESSION .)
    DOTADD          reduce using rule 21 (EXPRESSION -> MATRIX_EXPRESSION .)
    DOTSUB          reduce using rule 21 (EXPRESSION -> MATRIX_EXPRESSION .)
    DOTMUL          reduce using rule 21 (EXPRESSION -> MATRIX_EXPRESSION .)
    DOTDIV          reduce using rule 21 (EXPRESSION -> MATRIX_EXPRESSION .)
    ;               reduce using rule 21 (EXPRESSION -> MATRIX_EXPRESSION .)
    )               reduce using rule 21 (EXPRESSION -> MATRIX_EXPRESSION .)


state 55

    (22) EXPRESSION -> ( . EXPRESSION )
    (19) EXPRESSION -> . BINARY_EXPRESSION
    (20) EXPRESSION -> . LOGICAL_EXPRESSION
    (21) EXPRESSION -> . MATRIX_EXPRESSION
    (22) EXPRESSION -> . ( EXPRESSION )
    (23) EXPRESSION -> . TERM
    (46) EXPRESSION -> . RETURN TERM
    (24) BINARY_EXPRESSION -> . EXPRESSION + EXPRESSION
    (25) BINARY_EXPRESSION -> . EXPRESSION - EXPRESSION
    (26) BINARY_EXPRESSION -> . EXPRESSION * EXPRESSION
    (27) BINARY_EXPRESSION -> . EXPRESSION / EXPRESSION
    (28) LOGICAL_EXPRESSION -> . EXPRESSION > EXPRESSION
    (29) LOGICAL_EXPRESSION -> . EXPRESSION < EXPRESSION
    (30) LOGICAL_EXPRESSION -> . EXPRESSION EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> . EXPRESSION EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> . EXPRESSION EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> . EXPRESSION NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> . EXPRESSION DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> . EXPRESSION DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> . EXPRESSION DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> . EXPRESSION DOTDIV EXPRESSION
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    (               shift and go to state 55
    RETURN          shift and go to state 57
    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    EXPRESSION                     shift and go to state 86
    BINARY_EXPRESSION              shift and go to state 52
    LOGICAL_EXPRESSION             shift and go to state 53
    MATRIX_EXPRESSION              shift and go to state 54
    TERM                           shift and go to state 56
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 56

    (23) EXPRESSION -> TERM .

    +               reduce using rule 23 (EXPRESSION -> TERM .)
    -               reduce using rule 23 (EXPRESSION -> TERM .)
    *               reduce using rule 23 (EXPRESSION -> TERM .)
    /               reduce using rule 23 (EXPRESSION -> TERM .)
    >               reduce using rule 23 (EXPRESSION -> TERM .)
    <               reduce using rule 23 (EXPRESSION -> TERM .)
    EQORGT          reduce using rule 23 (EXPRESSION -> TERM .)
    EQORLESS        reduce using rule 23 (EXPRESSION -> TERM .)
    EQUAL           reduce using rule 23 (EXPRESSION -> TERM .)
    NOTEQUAL        reduce using rule 23 (EXPRESSION -> TERM .)
    DOTADD          reduce using rule 23 (EXPRESSION -> TERM .)
    DOTSUB          reduce using rule 23 (EXPRESSION -> TERM .)
    DOTMUL          reduce using rule 23 (EXPRESSION -> TERM .)
    DOTDIV          reduce using rule 23 (EXPRESSION -> TERM .)
    ;               reduce using rule 23 (EXPRESSION -> TERM .)
    )               reduce using rule 23 (EXPRESSION -> TERM .)


state 57

    (46) EXPRESSION -> RETURN . TERM
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    TERM                           shift and go to state 87
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 58

    (12) ASSIGN -> ID [ INTNUM . ] ASSIGN_TYPE EXPRESSION
    (13) ASSIGN -> ID [ INTNUM . , INTNUM ] ASSIGN_TYPE EXPRESSION

    ]               shift and go to state 88
    ,               shift and go to state 89


state 59

    (65) IF_CONDITION -> IF ( LOGICAL_EXPRESSION . ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT
    (66) IF_CONDITION -> IF ( LOGICAL_EXPRESSION . ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT
    (20) EXPRESSION -> LOGICAL_EXPRESSION .

    )               shift and go to state 90
    >               reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    <               reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    EQORGT          reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    EQORLESS        reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    EQUAL           reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    NOTEQUAL        reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    +               reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    -               reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    *               reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    /               reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    DOTADD          reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    DOTSUB          reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    DOTMUL          reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    DOTDIV          reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)


state 60

    (28) LOGICAL_EXPRESSION -> EXPRESSION . > EXPRESSION
    (29) LOGICAL_EXPRESSION -> EXPRESSION . < EXPRESSION
    (30) LOGICAL_EXPRESSION -> EXPRESSION . EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> EXPRESSION . EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> EXPRESSION . EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> EXPRESSION . NOTEQUAL EXPRESSION
    (24) BINARY_EXPRESSION -> EXPRESSION . + EXPRESSION
    (25) BINARY_EXPRESSION -> EXPRESSION . - EXPRESSION
    (26) BINARY_EXPRESSION -> EXPRESSION . * EXPRESSION
    (27) BINARY_EXPRESSION -> EXPRESSION . / EXPRESSION
    (34) MATRIX_EXPRESSION -> EXPRESSION . DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> EXPRESSION . DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> EXPRESSION . DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> EXPRESSION . DOTDIV EXPRESSION

    >               shift and go to state 76
    <               shift and go to state 77
    EQORGT          shift and go to state 78
    EQORLESS        shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    DOTADD          shift and go to state 82
    DOTSUB          shift and go to state 83
    DOTMUL          shift and go to state 84
    DOTDIV          shift and go to state 85


state 61

    (74) FOR_LOOP -> FOR FOR_CONDITION { . INSTRUCTIONS }
    (2) INSTRUCTIONS -> . { INSTRUCTIONS }
    (3) INSTRUCTIONS -> . INSTRUCTION INSTRUCTIONS
    (4) INSTRUCTIONS -> . INSTRUCTION
    (5) INSTRUCTION -> . ASSIGN ;
    (6) INSTRUCTION -> . IF_CONDITION
    (7) INSTRUCTION -> . FOR_LOOP
    (8) INSTRUCTION -> . WHILE_LOOP
    (9) INSTRUCTION -> . CONTROL_INSTRUCTION ;
    (10) INSTRUCTION -> . PRINT_CALL ;
    (11) ASSIGN -> . ID ASSIGN_TYPE EXPRESSION
    (12) ASSIGN -> . ID [ INTNUM ] ASSIGN_TYPE EXPRESSION
    (13) ASSIGN -> . ID [ INTNUM , INTNUM ] ASSIGN_TYPE EXPRESSION
    (65) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT
    (66) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT
    (74) FOR_LOOP -> . FOR FOR_CONDITION { INSTRUCTIONS }
    (75) FOR_LOOP -> . FOR FOR_CONDITION INSTRUCTION
    (77) WHILE_LOOP -> . WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS }
    (78) WHILE_LOOP -> . WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION
    (58) CONTROL_INSTRUCTION -> . BREAK
    (59) CONTROL_INSTRUCTION -> . CONTINUE
    (60) CONTROL_INSTRUCTION -> . RETURN
    (61) CONTROL_INSTRUCTION -> . RETURN TERM
    (62) PRINT_CALL -> . PRINT PRINT_TERMS

    {               shift and go to state 3
    ID              shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18

    INSTRUCTIONS                   shift and go to state 91
    INSTRUCTION                    shift and go to state 4
    ASSIGN                         shift and go to state 5
    IF_CONDITION                   shift and go to state 6
    FOR_LOOP                       shift and go to state 7
    WHILE_LOOP                     shift and go to state 8
    CONTROL_INSTRUCTION            shift and go to state 9
    PRINT_CALL                     shift and go to state 10

state 62

    (75) FOR_LOOP -> FOR FOR_CONDITION INSTRUCTION .

    {               reduce using rule 75 (FOR_LOOP -> FOR FOR_CONDITION INSTRUCTION .)
    ID              reduce using rule 75 (FOR_LOOP -> FOR FOR_CONDITION INSTRUCTION .)
    IF              reduce using rule 75 (FOR_LOOP -> FOR FOR_CONDITION INSTRUCTION .)
    FOR             reduce using rule 75 (FOR_LOOP -> FOR FOR_CONDITION INSTRUCTION .)
    WHILE           reduce using rule 75 (FOR_LOOP -> FOR FOR_CONDITION INSTRUCTION .)
    BREAK           reduce using rule 75 (FOR_LOOP -> FOR FOR_CONDITION INSTRUCTION .)
    CONTINUE        reduce using rule 75 (FOR_LOOP -> FOR FOR_CONDITION INSTRUCTION .)
    RETURN          reduce using rule 75 (FOR_LOOP -> FOR FOR_CONDITION INSTRUCTION .)
    PRINT           reduce using rule 75 (FOR_LOOP -> FOR FOR_CONDITION INSTRUCTION .)
    $end            reduce using rule 75 (FOR_LOOP -> FOR FOR_CONDITION INSTRUCTION .)
    }               reduce using rule 75 (FOR_LOOP -> FOR FOR_CONDITION INSTRUCTION .)
    ELSEIF          reduce using rule 75 (FOR_LOOP -> FOR FOR_CONDITION INSTRUCTION .)
    ELSE            reduce using rule 75 (FOR_LOOP -> FOR FOR_CONDITION INSTRUCTION .)


state 63

    (76) FOR_CONDITION -> TERM = . INTNUM_OR_ID : INTNUM_OR_ID
    (47) INTNUM_OR_ID -> . INTNUM
    (48) INTNUM_OR_ID -> . ID

    INTNUM          shift and go to state 93
    ID              shift and go to state 94

    INTNUM_OR_ID                   shift and go to state 92

state 64

    (44) TERM -> ID ' .

    =               reduce using rule 44 (TERM -> ID ' .)
    ;               reduce using rule 44 (TERM -> ID ' .)
    ,               reduce using rule 44 (TERM -> ID ' .)
    +               reduce using rule 44 (TERM -> ID ' .)
    -               reduce using rule 44 (TERM -> ID ' .)
    *               reduce using rule 44 (TERM -> ID ' .)
    /               reduce using rule 44 (TERM -> ID ' .)
    >               reduce using rule 44 (TERM -> ID ' .)
    <               reduce using rule 44 (TERM -> ID ' .)
    EQORGT          reduce using rule 44 (TERM -> ID ' .)
    EQORLESS        reduce using rule 44 (TERM -> ID ' .)
    EQUAL           reduce using rule 44 (TERM -> ID ' .)
    NOTEQUAL        reduce using rule 44 (TERM -> ID ' .)
    DOTADD          reduce using rule 44 (TERM -> ID ' .)
    DOTSUB          reduce using rule 44 (TERM -> ID ' .)
    DOTMUL          reduce using rule 44 (TERM -> ID ' .)
    DOTDIV          reduce using rule 44 (TERM -> ID ' .)
    ]               reduce using rule 44 (TERM -> ID ' .)
    )               reduce using rule 44 (TERM -> ID ' .)


state 65

    (45) TERM -> - ID .

    =               reduce using rule 45 (TERM -> - ID .)
    ;               reduce using rule 45 (TERM -> - ID .)
    ,               reduce using rule 45 (TERM -> - ID .)
    +               reduce using rule 45 (TERM -> - ID .)
    -               reduce using rule 45 (TERM -> - ID .)
    *               reduce using rule 45 (TERM -> - ID .)
    /               reduce using rule 45 (TERM -> - ID .)
    >               reduce using rule 45 (TERM -> - ID .)
    <               reduce using rule 45 (TERM -> - ID .)
    EQORGT          reduce using rule 45 (TERM -> - ID .)
    EQORLESS        reduce using rule 45 (TERM -> - ID .)
    EQUAL           reduce using rule 45 (TERM -> - ID .)
    NOTEQUAL        reduce using rule 45 (TERM -> - ID .)
    DOTADD          reduce using rule 45 (TERM -> - ID .)
    DOTSUB          reduce using rule 45 (TERM -> - ID .)
    DOTMUL          reduce using rule 45 (TERM -> - ID .)
    DOTDIV          reduce using rule 45 (TERM -> - ID .)
    ]               reduce using rule 45 (TERM -> - ID .)
    )               reduce using rule 45 (TERM -> - ID .)


state 66

    (49) MATRIX -> [ VECTORS . ]
    (50) VECTORS -> VECTORS . ; VECTOR

    ]               shift and go to state 95
    ;               shift and go to state 96


state 67

    (51) VECTORS -> VECTOR .
    (52) VECTOR -> VECTOR . , TERM

    ]               reduce using rule 51 (VECTORS -> VECTOR .)
    ;               reduce using rule 51 (VECTORS -> VECTOR .)
    ,               shift and go to state 97


state 68

    (53) VECTOR -> TERM .

    ,               reduce using rule 53 (VECTOR -> TERM .)
    ]               reduce using rule 53 (VECTOR -> TERM .)
    ;               reduce using rule 53 (VECTOR -> TERM .)


state 69

    (54) FUNCTION_CALL -> FUNCTION_NAME ( . TERM )
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    FUNCTION_NAME                  shift and go to state 42
    TERM                           shift and go to state 98
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39

state 70

    (77) WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION . ) { INSTRUCTIONS }
    (78) WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION . ) INSTRUCTION
    (20) EXPRESSION -> LOGICAL_EXPRESSION .

    )               shift and go to state 99
    >               reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    <               reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    EQORGT          reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    EQORLESS        reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    EQUAL           reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    NOTEQUAL        reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    +               reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    -               reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    *               reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    /               reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    DOTADD          reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    DOTSUB          reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    DOTMUL          reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    DOTDIV          reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)


state 71

    (63) PRINT_TERMS -> PRINT_TERMS , . TERM
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    TERM                           shift and go to state 100
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 72

    (24) BINARY_EXPRESSION -> EXPRESSION + . EXPRESSION
    (19) EXPRESSION -> . BINARY_EXPRESSION
    (20) EXPRESSION -> . LOGICAL_EXPRESSION
    (21) EXPRESSION -> . MATRIX_EXPRESSION
    (22) EXPRESSION -> . ( EXPRESSION )
    (23) EXPRESSION -> . TERM
    (46) EXPRESSION -> . RETURN TERM
    (24) BINARY_EXPRESSION -> . EXPRESSION + EXPRESSION
    (25) BINARY_EXPRESSION -> . EXPRESSION - EXPRESSION
    (26) BINARY_EXPRESSION -> . EXPRESSION * EXPRESSION
    (27) BINARY_EXPRESSION -> . EXPRESSION / EXPRESSION
    (28) LOGICAL_EXPRESSION -> . EXPRESSION > EXPRESSION
    (29) LOGICAL_EXPRESSION -> . EXPRESSION < EXPRESSION
    (30) LOGICAL_EXPRESSION -> . EXPRESSION EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> . EXPRESSION EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> . EXPRESSION EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> . EXPRESSION NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> . EXPRESSION DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> . EXPRESSION DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> . EXPRESSION DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> . EXPRESSION DOTDIV EXPRESSION
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    (               shift and go to state 55
    RETURN          shift and go to state 57
    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    EXPRESSION                     shift and go to state 101
    BINARY_EXPRESSION              shift and go to state 52
    LOGICAL_EXPRESSION             shift and go to state 53
    MATRIX_EXPRESSION              shift and go to state 54
    TERM                           shift and go to state 56
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 73

    (25) BINARY_EXPRESSION -> EXPRESSION - . EXPRESSION
    (19) EXPRESSION -> . BINARY_EXPRESSION
    (20) EXPRESSION -> . LOGICAL_EXPRESSION
    (21) EXPRESSION -> . MATRIX_EXPRESSION
    (22) EXPRESSION -> . ( EXPRESSION )
    (23) EXPRESSION -> . TERM
    (46) EXPRESSION -> . RETURN TERM
    (24) BINARY_EXPRESSION -> . EXPRESSION + EXPRESSION
    (25) BINARY_EXPRESSION -> . EXPRESSION - EXPRESSION
    (26) BINARY_EXPRESSION -> . EXPRESSION * EXPRESSION
    (27) BINARY_EXPRESSION -> . EXPRESSION / EXPRESSION
    (28) LOGICAL_EXPRESSION -> . EXPRESSION > EXPRESSION
    (29) LOGICAL_EXPRESSION -> . EXPRESSION < EXPRESSION
    (30) LOGICAL_EXPRESSION -> . EXPRESSION EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> . EXPRESSION EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> . EXPRESSION EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> . EXPRESSION NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> . EXPRESSION DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> . EXPRESSION DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> . EXPRESSION DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> . EXPRESSION DOTDIV EXPRESSION
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    (               shift and go to state 55
    RETURN          shift and go to state 57
    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    EXPRESSION                     shift and go to state 102
    BINARY_EXPRESSION              shift and go to state 52
    LOGICAL_EXPRESSION             shift and go to state 53
    MATRIX_EXPRESSION              shift and go to state 54
    TERM                           shift and go to state 56
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 74

    (26) BINARY_EXPRESSION -> EXPRESSION * . EXPRESSION
    (19) EXPRESSION -> . BINARY_EXPRESSION
    (20) EXPRESSION -> . LOGICAL_EXPRESSION
    (21) EXPRESSION -> . MATRIX_EXPRESSION
    (22) EXPRESSION -> . ( EXPRESSION )
    (23) EXPRESSION -> . TERM
    (46) EXPRESSION -> . RETURN TERM
    (24) BINARY_EXPRESSION -> . EXPRESSION + EXPRESSION
    (25) BINARY_EXPRESSION -> . EXPRESSION - EXPRESSION
    (26) BINARY_EXPRESSION -> . EXPRESSION * EXPRESSION
    (27) BINARY_EXPRESSION -> . EXPRESSION / EXPRESSION
    (28) LOGICAL_EXPRESSION -> . EXPRESSION > EXPRESSION
    (29) LOGICAL_EXPRESSION -> . EXPRESSION < EXPRESSION
    (30) LOGICAL_EXPRESSION -> . EXPRESSION EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> . EXPRESSION EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> . EXPRESSION EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> . EXPRESSION NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> . EXPRESSION DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> . EXPRESSION DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> . EXPRESSION DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> . EXPRESSION DOTDIV EXPRESSION
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    (               shift and go to state 55
    RETURN          shift and go to state 57
    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    EXPRESSION                     shift and go to state 103
    BINARY_EXPRESSION              shift and go to state 52
    LOGICAL_EXPRESSION             shift and go to state 53
    MATRIX_EXPRESSION              shift and go to state 54
    TERM                           shift and go to state 56
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 75

    (27) BINARY_EXPRESSION -> EXPRESSION / . EXPRESSION
    (19) EXPRESSION -> . BINARY_EXPRESSION
    (20) EXPRESSION -> . LOGICAL_EXPRESSION
    (21) EXPRESSION -> . MATRIX_EXPRESSION
    (22) EXPRESSION -> . ( EXPRESSION )
    (23) EXPRESSION -> . TERM
    (46) EXPRESSION -> . RETURN TERM
    (24) BINARY_EXPRESSION -> . EXPRESSION + EXPRESSION
    (25) BINARY_EXPRESSION -> . EXPRESSION - EXPRESSION
    (26) BINARY_EXPRESSION -> . EXPRESSION * EXPRESSION
    (27) BINARY_EXPRESSION -> . EXPRESSION / EXPRESSION
    (28) LOGICAL_EXPRESSION -> . EXPRESSION > EXPRESSION
    (29) LOGICAL_EXPRESSION -> . EXPRESSION < EXPRESSION
    (30) LOGICAL_EXPRESSION -> . EXPRESSION EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> . EXPRESSION EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> . EXPRESSION EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> . EXPRESSION NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> . EXPRESSION DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> . EXPRESSION DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> . EXPRESSION DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> . EXPRESSION DOTDIV EXPRESSION
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    (               shift and go to state 55
    RETURN          shift and go to state 57
    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    EXPRESSION                     shift and go to state 104
    BINARY_EXPRESSION              shift and go to state 52
    LOGICAL_EXPRESSION             shift and go to state 53
    MATRIX_EXPRESSION              shift and go to state 54
    TERM                           shift and go to state 56
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 76

    (28) LOGICAL_EXPRESSION -> EXPRESSION > . EXPRESSION
    (19) EXPRESSION -> . BINARY_EXPRESSION
    (20) EXPRESSION -> . LOGICAL_EXPRESSION
    (21) EXPRESSION -> . MATRIX_EXPRESSION
    (22) EXPRESSION -> . ( EXPRESSION )
    (23) EXPRESSION -> . TERM
    (46) EXPRESSION -> . RETURN TERM
    (24) BINARY_EXPRESSION -> . EXPRESSION + EXPRESSION
    (25) BINARY_EXPRESSION -> . EXPRESSION - EXPRESSION
    (26) BINARY_EXPRESSION -> . EXPRESSION * EXPRESSION
    (27) BINARY_EXPRESSION -> . EXPRESSION / EXPRESSION
    (28) LOGICAL_EXPRESSION -> . EXPRESSION > EXPRESSION
    (29) LOGICAL_EXPRESSION -> . EXPRESSION < EXPRESSION
    (30) LOGICAL_EXPRESSION -> . EXPRESSION EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> . EXPRESSION EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> . EXPRESSION EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> . EXPRESSION NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> . EXPRESSION DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> . EXPRESSION DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> . EXPRESSION DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> . EXPRESSION DOTDIV EXPRESSION
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    (               shift and go to state 55
    RETURN          shift and go to state 57
    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    EXPRESSION                     shift and go to state 105
    BINARY_EXPRESSION              shift and go to state 52
    LOGICAL_EXPRESSION             shift and go to state 53
    MATRIX_EXPRESSION              shift and go to state 54
    TERM                           shift and go to state 56
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 77

    (29) LOGICAL_EXPRESSION -> EXPRESSION < . EXPRESSION
    (19) EXPRESSION -> . BINARY_EXPRESSION
    (20) EXPRESSION -> . LOGICAL_EXPRESSION
    (21) EXPRESSION -> . MATRIX_EXPRESSION
    (22) EXPRESSION -> . ( EXPRESSION )
    (23) EXPRESSION -> . TERM
    (46) EXPRESSION -> . RETURN TERM
    (24) BINARY_EXPRESSION -> . EXPRESSION + EXPRESSION
    (25) BINARY_EXPRESSION -> . EXPRESSION - EXPRESSION
    (26) BINARY_EXPRESSION -> . EXPRESSION * EXPRESSION
    (27) BINARY_EXPRESSION -> . EXPRESSION / EXPRESSION
    (28) LOGICAL_EXPRESSION -> . EXPRESSION > EXPRESSION
    (29) LOGICAL_EXPRESSION -> . EXPRESSION < EXPRESSION
    (30) LOGICAL_EXPRESSION -> . EXPRESSION EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> . EXPRESSION EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> . EXPRESSION EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> . EXPRESSION NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> . EXPRESSION DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> . EXPRESSION DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> . EXPRESSION DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> . EXPRESSION DOTDIV EXPRESSION
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    (               shift and go to state 55
    RETURN          shift and go to state 57
    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    EXPRESSION                     shift and go to state 106
    BINARY_EXPRESSION              shift and go to state 52
    LOGICAL_EXPRESSION             shift and go to state 53
    MATRIX_EXPRESSION              shift and go to state 54
    TERM                           shift and go to state 56
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 78

    (30) LOGICAL_EXPRESSION -> EXPRESSION EQORGT . EXPRESSION
    (19) EXPRESSION -> . BINARY_EXPRESSION
    (20) EXPRESSION -> . LOGICAL_EXPRESSION
    (21) EXPRESSION -> . MATRIX_EXPRESSION
    (22) EXPRESSION -> . ( EXPRESSION )
    (23) EXPRESSION -> . TERM
    (46) EXPRESSION -> . RETURN TERM
    (24) BINARY_EXPRESSION -> . EXPRESSION + EXPRESSION
    (25) BINARY_EXPRESSION -> . EXPRESSION - EXPRESSION
    (26) BINARY_EXPRESSION -> . EXPRESSION * EXPRESSION
    (27) BINARY_EXPRESSION -> . EXPRESSION / EXPRESSION
    (28) LOGICAL_EXPRESSION -> . EXPRESSION > EXPRESSION
    (29) LOGICAL_EXPRESSION -> . EXPRESSION < EXPRESSION
    (30) LOGICAL_EXPRESSION -> . EXPRESSION EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> . EXPRESSION EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> . EXPRESSION EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> . EXPRESSION NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> . EXPRESSION DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> . EXPRESSION DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> . EXPRESSION DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> . EXPRESSION DOTDIV EXPRESSION
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    (               shift and go to state 55
    RETURN          shift and go to state 57
    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    EXPRESSION                     shift and go to state 107
    BINARY_EXPRESSION              shift and go to state 52
    LOGICAL_EXPRESSION             shift and go to state 53
    MATRIX_EXPRESSION              shift and go to state 54
    TERM                           shift and go to state 56
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 79

    (31) LOGICAL_EXPRESSION -> EXPRESSION EQORLESS . EXPRESSION
    (19) EXPRESSION -> . BINARY_EXPRESSION
    (20) EXPRESSION -> . LOGICAL_EXPRESSION
    (21) EXPRESSION -> . MATRIX_EXPRESSION
    (22) EXPRESSION -> . ( EXPRESSION )
    (23) EXPRESSION -> . TERM
    (46) EXPRESSION -> . RETURN TERM
    (24) BINARY_EXPRESSION -> . EXPRESSION + EXPRESSION
    (25) BINARY_EXPRESSION -> . EXPRESSION - EXPRESSION
    (26) BINARY_EXPRESSION -> . EXPRESSION * EXPRESSION
    (27) BINARY_EXPRESSION -> . EXPRESSION / EXPRESSION
    (28) LOGICAL_EXPRESSION -> . EXPRESSION > EXPRESSION
    (29) LOGICAL_EXPRESSION -> . EXPRESSION < EXPRESSION
    (30) LOGICAL_EXPRESSION -> . EXPRESSION EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> . EXPRESSION EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> . EXPRESSION EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> . EXPRESSION NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> . EXPRESSION DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> . EXPRESSION DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> . EXPRESSION DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> . EXPRESSION DOTDIV EXPRESSION
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    (               shift and go to state 55
    RETURN          shift and go to state 57
    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    EXPRESSION                     shift and go to state 108
    BINARY_EXPRESSION              shift and go to state 52
    LOGICAL_EXPRESSION             shift and go to state 53
    MATRIX_EXPRESSION              shift and go to state 54
    TERM                           shift and go to state 56
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 80

    (32) LOGICAL_EXPRESSION -> EXPRESSION EQUAL . EXPRESSION
    (19) EXPRESSION -> . BINARY_EXPRESSION
    (20) EXPRESSION -> . LOGICAL_EXPRESSION
    (21) EXPRESSION -> . MATRIX_EXPRESSION
    (22) EXPRESSION -> . ( EXPRESSION )
    (23) EXPRESSION -> . TERM
    (46) EXPRESSION -> . RETURN TERM
    (24) BINARY_EXPRESSION -> . EXPRESSION + EXPRESSION
    (25) BINARY_EXPRESSION -> . EXPRESSION - EXPRESSION
    (26) BINARY_EXPRESSION -> . EXPRESSION * EXPRESSION
    (27) BINARY_EXPRESSION -> . EXPRESSION / EXPRESSION
    (28) LOGICAL_EXPRESSION -> . EXPRESSION > EXPRESSION
    (29) LOGICAL_EXPRESSION -> . EXPRESSION < EXPRESSION
    (30) LOGICAL_EXPRESSION -> . EXPRESSION EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> . EXPRESSION EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> . EXPRESSION EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> . EXPRESSION NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> . EXPRESSION DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> . EXPRESSION DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> . EXPRESSION DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> . EXPRESSION DOTDIV EXPRESSION
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    (               shift and go to state 55
    RETURN          shift and go to state 57
    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    EXPRESSION                     shift and go to state 109
    BINARY_EXPRESSION              shift and go to state 52
    LOGICAL_EXPRESSION             shift and go to state 53
    MATRIX_EXPRESSION              shift and go to state 54
    TERM                           shift and go to state 56
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 81

    (33) LOGICAL_EXPRESSION -> EXPRESSION NOTEQUAL . EXPRESSION
    (19) EXPRESSION -> . BINARY_EXPRESSION
    (20) EXPRESSION -> . LOGICAL_EXPRESSION
    (21) EXPRESSION -> . MATRIX_EXPRESSION
    (22) EXPRESSION -> . ( EXPRESSION )
    (23) EXPRESSION -> . TERM
    (46) EXPRESSION -> . RETURN TERM
    (24) BINARY_EXPRESSION -> . EXPRESSION + EXPRESSION
    (25) BINARY_EXPRESSION -> . EXPRESSION - EXPRESSION
    (26) BINARY_EXPRESSION -> . EXPRESSION * EXPRESSION
    (27) BINARY_EXPRESSION -> . EXPRESSION / EXPRESSION
    (28) LOGICAL_EXPRESSION -> . EXPRESSION > EXPRESSION
    (29) LOGICAL_EXPRESSION -> . EXPRESSION < EXPRESSION
    (30) LOGICAL_EXPRESSION -> . EXPRESSION EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> . EXPRESSION EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> . EXPRESSION EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> . EXPRESSION NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> . EXPRESSION DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> . EXPRESSION DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> . EXPRESSION DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> . EXPRESSION DOTDIV EXPRESSION
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    (               shift and go to state 55
    RETURN          shift and go to state 57
    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    EXPRESSION                     shift and go to state 110
    BINARY_EXPRESSION              shift and go to state 52
    LOGICAL_EXPRESSION             shift and go to state 53
    MATRIX_EXPRESSION              shift and go to state 54
    TERM                           shift and go to state 56
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 82

    (34) MATRIX_EXPRESSION -> EXPRESSION DOTADD . EXPRESSION
    (19) EXPRESSION -> . BINARY_EXPRESSION
    (20) EXPRESSION -> . LOGICAL_EXPRESSION
    (21) EXPRESSION -> . MATRIX_EXPRESSION
    (22) EXPRESSION -> . ( EXPRESSION )
    (23) EXPRESSION -> . TERM
    (46) EXPRESSION -> . RETURN TERM
    (24) BINARY_EXPRESSION -> . EXPRESSION + EXPRESSION
    (25) BINARY_EXPRESSION -> . EXPRESSION - EXPRESSION
    (26) BINARY_EXPRESSION -> . EXPRESSION * EXPRESSION
    (27) BINARY_EXPRESSION -> . EXPRESSION / EXPRESSION
    (28) LOGICAL_EXPRESSION -> . EXPRESSION > EXPRESSION
    (29) LOGICAL_EXPRESSION -> . EXPRESSION < EXPRESSION
    (30) LOGICAL_EXPRESSION -> . EXPRESSION EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> . EXPRESSION EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> . EXPRESSION EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> . EXPRESSION NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> . EXPRESSION DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> . EXPRESSION DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> . EXPRESSION DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> . EXPRESSION DOTDIV EXPRESSION
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    (               shift and go to state 55
    RETURN          shift and go to state 57
    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    EXPRESSION                     shift and go to state 111
    BINARY_EXPRESSION              shift and go to state 52
    LOGICAL_EXPRESSION             shift and go to state 53
    MATRIX_EXPRESSION              shift and go to state 54
    TERM                           shift and go to state 56
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 83

    (35) MATRIX_EXPRESSION -> EXPRESSION DOTSUB . EXPRESSION
    (19) EXPRESSION -> . BINARY_EXPRESSION
    (20) EXPRESSION -> . LOGICAL_EXPRESSION
    (21) EXPRESSION -> . MATRIX_EXPRESSION
    (22) EXPRESSION -> . ( EXPRESSION )
    (23) EXPRESSION -> . TERM
    (46) EXPRESSION -> . RETURN TERM
    (24) BINARY_EXPRESSION -> . EXPRESSION + EXPRESSION
    (25) BINARY_EXPRESSION -> . EXPRESSION - EXPRESSION
    (26) BINARY_EXPRESSION -> . EXPRESSION * EXPRESSION
    (27) BINARY_EXPRESSION -> . EXPRESSION / EXPRESSION
    (28) LOGICAL_EXPRESSION -> . EXPRESSION > EXPRESSION
    (29) LOGICAL_EXPRESSION -> . EXPRESSION < EXPRESSION
    (30) LOGICAL_EXPRESSION -> . EXPRESSION EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> . EXPRESSION EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> . EXPRESSION EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> . EXPRESSION NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> . EXPRESSION DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> . EXPRESSION DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> . EXPRESSION DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> . EXPRESSION DOTDIV EXPRESSION
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    (               shift and go to state 55
    RETURN          shift and go to state 57
    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    EXPRESSION                     shift and go to state 112
    BINARY_EXPRESSION              shift and go to state 52
    LOGICAL_EXPRESSION             shift and go to state 53
    MATRIX_EXPRESSION              shift and go to state 54
    TERM                           shift and go to state 56
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 84

    (36) MATRIX_EXPRESSION -> EXPRESSION DOTMUL . EXPRESSION
    (19) EXPRESSION -> . BINARY_EXPRESSION
    (20) EXPRESSION -> . LOGICAL_EXPRESSION
    (21) EXPRESSION -> . MATRIX_EXPRESSION
    (22) EXPRESSION -> . ( EXPRESSION )
    (23) EXPRESSION -> . TERM
    (46) EXPRESSION -> . RETURN TERM
    (24) BINARY_EXPRESSION -> . EXPRESSION + EXPRESSION
    (25) BINARY_EXPRESSION -> . EXPRESSION - EXPRESSION
    (26) BINARY_EXPRESSION -> . EXPRESSION * EXPRESSION
    (27) BINARY_EXPRESSION -> . EXPRESSION / EXPRESSION
    (28) LOGICAL_EXPRESSION -> . EXPRESSION > EXPRESSION
    (29) LOGICAL_EXPRESSION -> . EXPRESSION < EXPRESSION
    (30) LOGICAL_EXPRESSION -> . EXPRESSION EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> . EXPRESSION EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> . EXPRESSION EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> . EXPRESSION NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> . EXPRESSION DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> . EXPRESSION DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> . EXPRESSION DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> . EXPRESSION DOTDIV EXPRESSION
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    (               shift and go to state 55
    RETURN          shift and go to state 57
    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    EXPRESSION                     shift and go to state 113
    BINARY_EXPRESSION              shift and go to state 52
    LOGICAL_EXPRESSION             shift and go to state 53
    MATRIX_EXPRESSION              shift and go to state 54
    TERM                           shift and go to state 56
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 85

    (37) MATRIX_EXPRESSION -> EXPRESSION DOTDIV . EXPRESSION
    (19) EXPRESSION -> . BINARY_EXPRESSION
    (20) EXPRESSION -> . LOGICAL_EXPRESSION
    (21) EXPRESSION -> . MATRIX_EXPRESSION
    (22) EXPRESSION -> . ( EXPRESSION )
    (23) EXPRESSION -> . TERM
    (46) EXPRESSION -> . RETURN TERM
    (24) BINARY_EXPRESSION -> . EXPRESSION + EXPRESSION
    (25) BINARY_EXPRESSION -> . EXPRESSION - EXPRESSION
    (26) BINARY_EXPRESSION -> . EXPRESSION * EXPRESSION
    (27) BINARY_EXPRESSION -> . EXPRESSION / EXPRESSION
    (28) LOGICAL_EXPRESSION -> . EXPRESSION > EXPRESSION
    (29) LOGICAL_EXPRESSION -> . EXPRESSION < EXPRESSION
    (30) LOGICAL_EXPRESSION -> . EXPRESSION EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> . EXPRESSION EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> . EXPRESSION EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> . EXPRESSION NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> . EXPRESSION DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> . EXPRESSION DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> . EXPRESSION DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> . EXPRESSION DOTDIV EXPRESSION
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    (               shift and go to state 55
    RETURN          shift and go to state 57
    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    EXPRESSION                     shift and go to state 114
    BINARY_EXPRESSION              shift and go to state 52
    LOGICAL_EXPRESSION             shift and go to state 53
    MATRIX_EXPRESSION              shift and go to state 54
    TERM                           shift and go to state 56
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 86

    (22) EXPRESSION -> ( EXPRESSION . )
    (24) BINARY_EXPRESSION -> EXPRESSION . + EXPRESSION
    (25) BINARY_EXPRESSION -> EXPRESSION . - EXPRESSION
    (26) BINARY_EXPRESSION -> EXPRESSION . * EXPRESSION
    (27) BINARY_EXPRESSION -> EXPRESSION . / EXPRESSION
    (28) LOGICAL_EXPRESSION -> EXPRESSION . > EXPRESSION
    (29) LOGICAL_EXPRESSION -> EXPRESSION . < EXPRESSION
    (30) LOGICAL_EXPRESSION -> EXPRESSION . EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> EXPRESSION . EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> EXPRESSION . EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> EXPRESSION . NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> EXPRESSION . DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> EXPRESSION . DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> EXPRESSION . DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> EXPRESSION . DOTDIV EXPRESSION

    )               shift and go to state 115
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    >               shift and go to state 76
    <               shift and go to state 77
    EQORGT          shift and go to state 78
    EQORLESS        shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    DOTADD          shift and go to state 82
    DOTSUB          shift and go to state 83
    DOTMUL          shift and go to state 84
    DOTDIV          shift and go to state 85


state 87

    (46) EXPRESSION -> RETURN TERM .

    +               reduce using rule 46 (EXPRESSION -> RETURN TERM .)
    -               reduce using rule 46 (EXPRESSION -> RETURN TERM .)
    *               reduce using rule 46 (EXPRESSION -> RETURN TERM .)
    /               reduce using rule 46 (EXPRESSION -> RETURN TERM .)
    >               reduce using rule 46 (EXPRESSION -> RETURN TERM .)
    <               reduce using rule 46 (EXPRESSION -> RETURN TERM .)
    EQORGT          reduce using rule 46 (EXPRESSION -> RETURN TERM .)
    EQORLESS        reduce using rule 46 (EXPRESSION -> RETURN TERM .)
    EQUAL           reduce using rule 46 (EXPRESSION -> RETURN TERM .)
    NOTEQUAL        reduce using rule 46 (EXPRESSION -> RETURN TERM .)
    DOTADD          reduce using rule 46 (EXPRESSION -> RETURN TERM .)
    DOTSUB          reduce using rule 46 (EXPRESSION -> RETURN TERM .)
    DOTMUL          reduce using rule 46 (EXPRESSION -> RETURN TERM .)
    DOTDIV          reduce using rule 46 (EXPRESSION -> RETURN TERM .)
    ;               reduce using rule 46 (EXPRESSION -> RETURN TERM .)
    )               reduce using rule 46 (EXPRESSION -> RETURN TERM .)


state 88

    (12) ASSIGN -> ID [ INTNUM ] . ASSIGN_TYPE EXPRESSION
    (14) ASSIGN_TYPE -> . =
    (15) ASSIGN_TYPE -> . ADDASSIGN
    (16) ASSIGN_TYPE -> . SUBASSIGN
    (17) ASSIGN_TYPE -> . DIVASSIGN
    (18) ASSIGN_TYPE -> . MULASSIGN

    =               shift and go to state 26
    ADDASSIGN       shift and go to state 27
    SUBASSIGN       shift and go to state 28
    DIVASSIGN       shift and go to state 29
    MULASSIGN       shift and go to state 30

    ASSIGN_TYPE                    shift and go to state 116

state 89

    (13) ASSIGN -> ID [ INTNUM , . INTNUM ] ASSIGN_TYPE EXPRESSION

    INTNUM          shift and go to state 117


state 90

    (65) IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) . INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT
    (66) IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) . { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT
    (5) INSTRUCTION -> . ASSIGN ;
    (6) INSTRUCTION -> . IF_CONDITION
    (7) INSTRUCTION -> . FOR_LOOP
    (8) INSTRUCTION -> . WHILE_LOOP
    (9) INSTRUCTION -> . CONTROL_INSTRUCTION ;
    (10) INSTRUCTION -> . PRINT_CALL ;
    (11) ASSIGN -> . ID ASSIGN_TYPE EXPRESSION
    (12) ASSIGN -> . ID [ INTNUM ] ASSIGN_TYPE EXPRESSION
    (13) ASSIGN -> . ID [ INTNUM , INTNUM ] ASSIGN_TYPE EXPRESSION
    (65) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT
    (66) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT
    (74) FOR_LOOP -> . FOR FOR_CONDITION { INSTRUCTIONS }
    (75) FOR_LOOP -> . FOR FOR_CONDITION INSTRUCTION
    (77) WHILE_LOOP -> . WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS }
    (78) WHILE_LOOP -> . WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION
    (58) CONTROL_INSTRUCTION -> . BREAK
    (59) CONTROL_INSTRUCTION -> . CONTINUE
    (60) CONTROL_INSTRUCTION -> . RETURN
    (61) CONTROL_INSTRUCTION -> . RETURN TERM
    (62) PRINT_CALL -> . PRINT PRINT_TERMS

    {               shift and go to state 119
    ID              shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18

    INSTRUCTION                    shift and go to state 118
    ASSIGN                         shift and go to state 5
    IF_CONDITION                   shift and go to state 6
    FOR_LOOP                       shift and go to state 7
    WHILE_LOOP                     shift and go to state 8
    CONTROL_INSTRUCTION            shift and go to state 9
    PRINT_CALL                     shift and go to state 10

state 91

    (74) FOR_LOOP -> FOR FOR_CONDITION { INSTRUCTIONS . }

    }               shift and go to state 120


state 92

    (76) FOR_CONDITION -> TERM = INTNUM_OR_ID . : INTNUM_OR_ID

    :               shift and go to state 121


state 93

    (47) INTNUM_OR_ID -> INTNUM .

    :               reduce using rule 47 (INTNUM_OR_ID -> INTNUM .)
    {               reduce using rule 47 (INTNUM_OR_ID -> INTNUM .)
    ID              reduce using rule 47 (INTNUM_OR_ID -> INTNUM .)
    IF              reduce using rule 47 (INTNUM_OR_ID -> INTNUM .)
    FOR             reduce using rule 47 (INTNUM_OR_ID -> INTNUM .)
    WHILE           reduce using rule 47 (INTNUM_OR_ID -> INTNUM .)
    BREAK           reduce using rule 47 (INTNUM_OR_ID -> INTNUM .)
    CONTINUE        reduce using rule 47 (INTNUM_OR_ID -> INTNUM .)
    RETURN          reduce using rule 47 (INTNUM_OR_ID -> INTNUM .)
    PRINT           reduce using rule 47 (INTNUM_OR_ID -> INTNUM .)


state 94

    (48) INTNUM_OR_ID -> ID .

    :               reduce using rule 48 (INTNUM_OR_ID -> ID .)
    {               reduce using rule 48 (INTNUM_OR_ID -> ID .)
    ID              reduce using rule 48 (INTNUM_OR_ID -> ID .)
    IF              reduce using rule 48 (INTNUM_OR_ID -> ID .)
    FOR             reduce using rule 48 (INTNUM_OR_ID -> ID .)
    WHILE           reduce using rule 48 (INTNUM_OR_ID -> ID .)
    BREAK           reduce using rule 48 (INTNUM_OR_ID -> ID .)
    CONTINUE        reduce using rule 48 (INTNUM_OR_ID -> ID .)
    RETURN          reduce using rule 48 (INTNUM_OR_ID -> ID .)
    PRINT           reduce using rule 48 (INTNUM_OR_ID -> ID .)


state 95

    (49) MATRIX -> [ VECTORS ] .

    =               reduce using rule 49 (MATRIX -> [ VECTORS ] .)
    ;               reduce using rule 49 (MATRIX -> [ VECTORS ] .)
    ,               reduce using rule 49 (MATRIX -> [ VECTORS ] .)
    +               reduce using rule 49 (MATRIX -> [ VECTORS ] .)
    -               reduce using rule 49 (MATRIX -> [ VECTORS ] .)
    *               reduce using rule 49 (MATRIX -> [ VECTORS ] .)
    /               reduce using rule 49 (MATRIX -> [ VECTORS ] .)
    >               reduce using rule 49 (MATRIX -> [ VECTORS ] .)
    <               reduce using rule 49 (MATRIX -> [ VECTORS ] .)
    EQORGT          reduce using rule 49 (MATRIX -> [ VECTORS ] .)
    EQORLESS        reduce using rule 49 (MATRIX -> [ VECTORS ] .)
    EQUAL           reduce using rule 49 (MATRIX -> [ VECTORS ] .)
    NOTEQUAL        reduce using rule 49 (MATRIX -> [ VECTORS ] .)
    DOTADD          reduce using rule 49 (MATRIX -> [ VECTORS ] .)
    DOTSUB          reduce using rule 49 (MATRIX -> [ VECTORS ] .)
    DOTMUL          reduce using rule 49 (MATRIX -> [ VECTORS ] .)
    DOTDIV          reduce using rule 49 (MATRIX -> [ VECTORS ] .)
    ]               reduce using rule 49 (MATRIX -> [ VECTORS ] .)
    )               reduce using rule 49 (MATRIX -> [ VECTORS ] .)


state 96

    (50) VECTORS -> VECTORS ; . VECTOR
    (52) VECTOR -> . VECTOR , TERM
    (53) VECTOR -> . TERM
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    VECTOR                         shift and go to state 122
    TERM                           shift and go to state 68
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 97

    (52) VECTOR -> VECTOR , . TERM
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    TERM                           shift and go to state 123
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 98

    (54) FUNCTION_CALL -> FUNCTION_NAME ( TERM . )

    )               shift and go to state 124


state 99

    (77) WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) . { INSTRUCTIONS }
    (78) WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) . INSTRUCTION
    (5) INSTRUCTION -> . ASSIGN ;
    (6) INSTRUCTION -> . IF_CONDITION
    (7) INSTRUCTION -> . FOR_LOOP
    (8) INSTRUCTION -> . WHILE_LOOP
    (9) INSTRUCTION -> . CONTROL_INSTRUCTION ;
    (10) INSTRUCTION -> . PRINT_CALL ;
    (11) ASSIGN -> . ID ASSIGN_TYPE EXPRESSION
    (12) ASSIGN -> . ID [ INTNUM ] ASSIGN_TYPE EXPRESSION
    (13) ASSIGN -> . ID [ INTNUM , INTNUM ] ASSIGN_TYPE EXPRESSION
    (65) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT
    (66) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT
    (74) FOR_LOOP -> . FOR FOR_CONDITION { INSTRUCTIONS }
    (75) FOR_LOOP -> . FOR FOR_CONDITION INSTRUCTION
    (77) WHILE_LOOP -> . WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS }
    (78) WHILE_LOOP -> . WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION
    (58) CONTROL_INSTRUCTION -> . BREAK
    (59) CONTROL_INSTRUCTION -> . CONTINUE
    (60) CONTROL_INSTRUCTION -> . RETURN
    (61) CONTROL_INSTRUCTION -> . RETURN TERM
    (62) PRINT_CALL -> . PRINT PRINT_TERMS

    {               shift and go to state 125
    ID              shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18

    INSTRUCTION                    shift and go to state 126
    ASSIGN                         shift and go to state 5
    IF_CONDITION                   shift and go to state 6
    FOR_LOOP                       shift and go to state 7
    WHILE_LOOP                     shift and go to state 8
    CONTROL_INSTRUCTION            shift and go to state 9
    PRINT_CALL                     shift and go to state 10

state 100

    (63) PRINT_TERMS -> PRINT_TERMS , TERM .

    ,               reduce using rule 63 (PRINT_TERMS -> PRINT_TERMS , TERM .)
    ;               reduce using rule 63 (PRINT_TERMS -> PRINT_TERMS , TERM .)


state 101

    (24) BINARY_EXPRESSION -> EXPRESSION + EXPRESSION .
    (24) BINARY_EXPRESSION -> EXPRESSION . + EXPRESSION
    (25) BINARY_EXPRESSION -> EXPRESSION . - EXPRESSION
    (26) BINARY_EXPRESSION -> EXPRESSION . * EXPRESSION
    (27) BINARY_EXPRESSION -> EXPRESSION . / EXPRESSION
    (28) LOGICAL_EXPRESSION -> EXPRESSION . > EXPRESSION
    (29) LOGICAL_EXPRESSION -> EXPRESSION . < EXPRESSION
    (30) LOGICAL_EXPRESSION -> EXPRESSION . EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> EXPRESSION . EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> EXPRESSION . EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> EXPRESSION . NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> EXPRESSION . DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> EXPRESSION . DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> EXPRESSION . DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> EXPRESSION . DOTDIV EXPRESSION

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for EQORGT resolved as shift
  ! shift/reduce conflict for EQORLESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for DOTADD resolved as shift
  ! shift/reduce conflict for DOTSUB resolved as shift
  ! shift/reduce conflict for DOTMUL resolved as shift
  ! shift/reduce conflict for DOTDIV resolved as shift
    ;               reduce using rule 24 (BINARY_EXPRESSION -> EXPRESSION + EXPRESSION .)
    )               reduce using rule 24 (BINARY_EXPRESSION -> EXPRESSION + EXPRESSION .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    >               shift and go to state 76
    <               shift and go to state 77
    EQORGT          shift and go to state 78
    EQORLESS        shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    DOTADD          shift and go to state 82
    DOTSUB          shift and go to state 83
    DOTMUL          shift and go to state 84
    DOTDIV          shift and go to state 85

  ! +               [ reduce using rule 24 (BINARY_EXPRESSION -> EXPRESSION + EXPRESSION .) ]
  ! -               [ reduce using rule 24 (BINARY_EXPRESSION -> EXPRESSION + EXPRESSION .) ]
  ! *               [ reduce using rule 24 (BINARY_EXPRESSION -> EXPRESSION + EXPRESSION .) ]
  ! /               [ reduce using rule 24 (BINARY_EXPRESSION -> EXPRESSION + EXPRESSION .) ]
  ! >               [ reduce using rule 24 (BINARY_EXPRESSION -> EXPRESSION + EXPRESSION .) ]
  ! <               [ reduce using rule 24 (BINARY_EXPRESSION -> EXPRESSION + EXPRESSION .) ]
  ! EQORGT          [ reduce using rule 24 (BINARY_EXPRESSION -> EXPRESSION + EXPRESSION .) ]
  ! EQORLESS        [ reduce using rule 24 (BINARY_EXPRESSION -> EXPRESSION + EXPRESSION .) ]
  ! EQUAL           [ reduce using rule 24 (BINARY_EXPRESSION -> EXPRESSION + EXPRESSION .) ]
  ! NOTEQUAL        [ reduce using rule 24 (BINARY_EXPRESSION -> EXPRESSION + EXPRESSION .) ]
  ! DOTADD          [ reduce using rule 24 (BINARY_EXPRESSION -> EXPRESSION + EXPRESSION .) ]
  ! DOTSUB          [ reduce using rule 24 (BINARY_EXPRESSION -> EXPRESSION + EXPRESSION .) ]
  ! DOTMUL          [ reduce using rule 24 (BINARY_EXPRESSION -> EXPRESSION + EXPRESSION .) ]
  ! DOTDIV          [ reduce using rule 24 (BINARY_EXPRESSION -> EXPRESSION + EXPRESSION .) ]


state 102

    (25) BINARY_EXPRESSION -> EXPRESSION - EXPRESSION .
    (24) BINARY_EXPRESSION -> EXPRESSION . + EXPRESSION
    (25) BINARY_EXPRESSION -> EXPRESSION . - EXPRESSION
    (26) BINARY_EXPRESSION -> EXPRESSION . * EXPRESSION
    (27) BINARY_EXPRESSION -> EXPRESSION . / EXPRESSION
    (28) LOGICAL_EXPRESSION -> EXPRESSION . > EXPRESSION
    (29) LOGICAL_EXPRESSION -> EXPRESSION . < EXPRESSION
    (30) LOGICAL_EXPRESSION -> EXPRESSION . EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> EXPRESSION . EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> EXPRESSION . EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> EXPRESSION . NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> EXPRESSION . DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> EXPRESSION . DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> EXPRESSION . DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> EXPRESSION . DOTDIV EXPRESSION

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for EQORGT resolved as shift
  ! shift/reduce conflict for EQORLESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for DOTADD resolved as shift
  ! shift/reduce conflict for DOTSUB resolved as shift
  ! shift/reduce conflict for DOTMUL resolved as shift
  ! shift/reduce conflict for DOTDIV resolved as shift
    ;               reduce using rule 25 (BINARY_EXPRESSION -> EXPRESSION - EXPRESSION .)
    )               reduce using rule 25 (BINARY_EXPRESSION -> EXPRESSION - EXPRESSION .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    >               shift and go to state 76
    <               shift and go to state 77
    EQORGT          shift and go to state 78
    EQORLESS        shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    DOTADD          shift and go to state 82
    DOTSUB          shift and go to state 83
    DOTMUL          shift and go to state 84
    DOTDIV          shift and go to state 85

  ! +               [ reduce using rule 25 (BINARY_EXPRESSION -> EXPRESSION - EXPRESSION .) ]
  ! -               [ reduce using rule 25 (BINARY_EXPRESSION -> EXPRESSION - EXPRESSION .) ]
  ! *               [ reduce using rule 25 (BINARY_EXPRESSION -> EXPRESSION - EXPRESSION .) ]
  ! /               [ reduce using rule 25 (BINARY_EXPRESSION -> EXPRESSION - EXPRESSION .) ]
  ! >               [ reduce using rule 25 (BINARY_EXPRESSION -> EXPRESSION - EXPRESSION .) ]
  ! <               [ reduce using rule 25 (BINARY_EXPRESSION -> EXPRESSION - EXPRESSION .) ]
  ! EQORGT          [ reduce using rule 25 (BINARY_EXPRESSION -> EXPRESSION - EXPRESSION .) ]
  ! EQORLESS        [ reduce using rule 25 (BINARY_EXPRESSION -> EXPRESSION - EXPRESSION .) ]
  ! EQUAL           [ reduce using rule 25 (BINARY_EXPRESSION -> EXPRESSION - EXPRESSION .) ]
  ! NOTEQUAL        [ reduce using rule 25 (BINARY_EXPRESSION -> EXPRESSION - EXPRESSION .) ]
  ! DOTADD          [ reduce using rule 25 (BINARY_EXPRESSION -> EXPRESSION - EXPRESSION .) ]
  ! DOTSUB          [ reduce using rule 25 (BINARY_EXPRESSION -> EXPRESSION - EXPRESSION .) ]
  ! DOTMUL          [ reduce using rule 25 (BINARY_EXPRESSION -> EXPRESSION - EXPRESSION .) ]
  ! DOTDIV          [ reduce using rule 25 (BINARY_EXPRESSION -> EXPRESSION - EXPRESSION .) ]


state 103

    (26) BINARY_EXPRESSION -> EXPRESSION * EXPRESSION .
    (24) BINARY_EXPRESSION -> EXPRESSION . + EXPRESSION
    (25) BINARY_EXPRESSION -> EXPRESSION . - EXPRESSION
    (26) BINARY_EXPRESSION -> EXPRESSION . * EXPRESSION
    (27) BINARY_EXPRESSION -> EXPRESSION . / EXPRESSION
    (28) LOGICAL_EXPRESSION -> EXPRESSION . > EXPRESSION
    (29) LOGICAL_EXPRESSION -> EXPRESSION . < EXPRESSION
    (30) LOGICAL_EXPRESSION -> EXPRESSION . EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> EXPRESSION . EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> EXPRESSION . EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> EXPRESSION . NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> EXPRESSION . DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> EXPRESSION . DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> EXPRESSION . DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> EXPRESSION . DOTDIV EXPRESSION

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for EQORGT resolved as shift
  ! shift/reduce conflict for EQORLESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for DOTADD resolved as shift
  ! shift/reduce conflict for DOTSUB resolved as shift
  ! shift/reduce conflict for DOTMUL resolved as shift
  ! shift/reduce conflict for DOTDIV resolved as shift
    ;               reduce using rule 26 (BINARY_EXPRESSION -> EXPRESSION * EXPRESSION .)
    )               reduce using rule 26 (BINARY_EXPRESSION -> EXPRESSION * EXPRESSION .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    >               shift and go to state 76
    <               shift and go to state 77
    EQORGT          shift and go to state 78
    EQORLESS        shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    DOTADD          shift and go to state 82
    DOTSUB          shift and go to state 83
    DOTMUL          shift and go to state 84
    DOTDIV          shift and go to state 85

  ! +               [ reduce using rule 26 (BINARY_EXPRESSION -> EXPRESSION * EXPRESSION .) ]
  ! -               [ reduce using rule 26 (BINARY_EXPRESSION -> EXPRESSION * EXPRESSION .) ]
  ! *               [ reduce using rule 26 (BINARY_EXPRESSION -> EXPRESSION * EXPRESSION .) ]
  ! /               [ reduce using rule 26 (BINARY_EXPRESSION -> EXPRESSION * EXPRESSION .) ]
  ! >               [ reduce using rule 26 (BINARY_EXPRESSION -> EXPRESSION * EXPRESSION .) ]
  ! <               [ reduce using rule 26 (BINARY_EXPRESSION -> EXPRESSION * EXPRESSION .) ]
  ! EQORGT          [ reduce using rule 26 (BINARY_EXPRESSION -> EXPRESSION * EXPRESSION .) ]
  ! EQORLESS        [ reduce using rule 26 (BINARY_EXPRESSION -> EXPRESSION * EXPRESSION .) ]
  ! EQUAL           [ reduce using rule 26 (BINARY_EXPRESSION -> EXPRESSION * EXPRESSION .) ]
  ! NOTEQUAL        [ reduce using rule 26 (BINARY_EXPRESSION -> EXPRESSION * EXPRESSION .) ]
  ! DOTADD          [ reduce using rule 26 (BINARY_EXPRESSION -> EXPRESSION * EXPRESSION .) ]
  ! DOTSUB          [ reduce using rule 26 (BINARY_EXPRESSION -> EXPRESSION * EXPRESSION .) ]
  ! DOTMUL          [ reduce using rule 26 (BINARY_EXPRESSION -> EXPRESSION * EXPRESSION .) ]
  ! DOTDIV          [ reduce using rule 26 (BINARY_EXPRESSION -> EXPRESSION * EXPRESSION .) ]


state 104

    (27) BINARY_EXPRESSION -> EXPRESSION / EXPRESSION .
    (24) BINARY_EXPRESSION -> EXPRESSION . + EXPRESSION
    (25) BINARY_EXPRESSION -> EXPRESSION . - EXPRESSION
    (26) BINARY_EXPRESSION -> EXPRESSION . * EXPRESSION
    (27) BINARY_EXPRESSION -> EXPRESSION . / EXPRESSION
    (28) LOGICAL_EXPRESSION -> EXPRESSION . > EXPRESSION
    (29) LOGICAL_EXPRESSION -> EXPRESSION . < EXPRESSION
    (30) LOGICAL_EXPRESSION -> EXPRESSION . EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> EXPRESSION . EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> EXPRESSION . EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> EXPRESSION . NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> EXPRESSION . DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> EXPRESSION . DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> EXPRESSION . DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> EXPRESSION . DOTDIV EXPRESSION

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for EQORGT resolved as shift
  ! shift/reduce conflict for EQORLESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for DOTADD resolved as shift
  ! shift/reduce conflict for DOTSUB resolved as shift
  ! shift/reduce conflict for DOTMUL resolved as shift
  ! shift/reduce conflict for DOTDIV resolved as shift
    ;               reduce using rule 27 (BINARY_EXPRESSION -> EXPRESSION / EXPRESSION .)
    )               reduce using rule 27 (BINARY_EXPRESSION -> EXPRESSION / EXPRESSION .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    >               shift and go to state 76
    <               shift and go to state 77
    EQORGT          shift and go to state 78
    EQORLESS        shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    DOTADD          shift and go to state 82
    DOTSUB          shift and go to state 83
    DOTMUL          shift and go to state 84
    DOTDIV          shift and go to state 85

  ! +               [ reduce using rule 27 (BINARY_EXPRESSION -> EXPRESSION / EXPRESSION .) ]
  ! -               [ reduce using rule 27 (BINARY_EXPRESSION -> EXPRESSION / EXPRESSION .) ]
  ! *               [ reduce using rule 27 (BINARY_EXPRESSION -> EXPRESSION / EXPRESSION .) ]
  ! /               [ reduce using rule 27 (BINARY_EXPRESSION -> EXPRESSION / EXPRESSION .) ]
  ! >               [ reduce using rule 27 (BINARY_EXPRESSION -> EXPRESSION / EXPRESSION .) ]
  ! <               [ reduce using rule 27 (BINARY_EXPRESSION -> EXPRESSION / EXPRESSION .) ]
  ! EQORGT          [ reduce using rule 27 (BINARY_EXPRESSION -> EXPRESSION / EXPRESSION .) ]
  ! EQORLESS        [ reduce using rule 27 (BINARY_EXPRESSION -> EXPRESSION / EXPRESSION .) ]
  ! EQUAL           [ reduce using rule 27 (BINARY_EXPRESSION -> EXPRESSION / EXPRESSION .) ]
  ! NOTEQUAL        [ reduce using rule 27 (BINARY_EXPRESSION -> EXPRESSION / EXPRESSION .) ]
  ! DOTADD          [ reduce using rule 27 (BINARY_EXPRESSION -> EXPRESSION / EXPRESSION .) ]
  ! DOTSUB          [ reduce using rule 27 (BINARY_EXPRESSION -> EXPRESSION / EXPRESSION .) ]
  ! DOTMUL          [ reduce using rule 27 (BINARY_EXPRESSION -> EXPRESSION / EXPRESSION .) ]
  ! DOTDIV          [ reduce using rule 27 (BINARY_EXPRESSION -> EXPRESSION / EXPRESSION .) ]


state 105

    (28) LOGICAL_EXPRESSION -> EXPRESSION > EXPRESSION .
    (24) BINARY_EXPRESSION -> EXPRESSION . + EXPRESSION
    (25) BINARY_EXPRESSION -> EXPRESSION . - EXPRESSION
    (26) BINARY_EXPRESSION -> EXPRESSION . * EXPRESSION
    (27) BINARY_EXPRESSION -> EXPRESSION . / EXPRESSION
    (28) LOGICAL_EXPRESSION -> EXPRESSION . > EXPRESSION
    (29) LOGICAL_EXPRESSION -> EXPRESSION . < EXPRESSION
    (30) LOGICAL_EXPRESSION -> EXPRESSION . EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> EXPRESSION . EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> EXPRESSION . EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> EXPRESSION . NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> EXPRESSION . DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> EXPRESSION . DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> EXPRESSION . DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> EXPRESSION . DOTDIV EXPRESSION

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for EQORGT resolved as shift
  ! shift/reduce conflict for EQORLESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for DOTADD resolved as shift
  ! shift/reduce conflict for DOTSUB resolved as shift
  ! shift/reduce conflict for DOTMUL resolved as shift
  ! shift/reduce conflict for DOTDIV resolved as shift
    ;               reduce using rule 28 (LOGICAL_EXPRESSION -> EXPRESSION > EXPRESSION .)
    )               reduce using rule 28 (LOGICAL_EXPRESSION -> EXPRESSION > EXPRESSION .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    >               shift and go to state 76
    <               shift and go to state 77
    EQORGT          shift and go to state 78
    EQORLESS        shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    DOTADD          shift and go to state 82
    DOTSUB          shift and go to state 83
    DOTMUL          shift and go to state 84
    DOTDIV          shift and go to state 85

  ! +               [ reduce using rule 28 (LOGICAL_EXPRESSION -> EXPRESSION > EXPRESSION .) ]
  ! -               [ reduce using rule 28 (LOGICAL_EXPRESSION -> EXPRESSION > EXPRESSION .) ]
  ! *               [ reduce using rule 28 (LOGICAL_EXPRESSION -> EXPRESSION > EXPRESSION .) ]
  ! /               [ reduce using rule 28 (LOGICAL_EXPRESSION -> EXPRESSION > EXPRESSION .) ]
  ! >               [ reduce using rule 28 (LOGICAL_EXPRESSION -> EXPRESSION > EXPRESSION .) ]
  ! <               [ reduce using rule 28 (LOGICAL_EXPRESSION -> EXPRESSION > EXPRESSION .) ]
  ! EQORGT          [ reduce using rule 28 (LOGICAL_EXPRESSION -> EXPRESSION > EXPRESSION .) ]
  ! EQORLESS        [ reduce using rule 28 (LOGICAL_EXPRESSION -> EXPRESSION > EXPRESSION .) ]
  ! EQUAL           [ reduce using rule 28 (LOGICAL_EXPRESSION -> EXPRESSION > EXPRESSION .) ]
  ! NOTEQUAL        [ reduce using rule 28 (LOGICAL_EXPRESSION -> EXPRESSION > EXPRESSION .) ]
  ! DOTADD          [ reduce using rule 28 (LOGICAL_EXPRESSION -> EXPRESSION > EXPRESSION .) ]
  ! DOTSUB          [ reduce using rule 28 (LOGICAL_EXPRESSION -> EXPRESSION > EXPRESSION .) ]
  ! DOTMUL          [ reduce using rule 28 (LOGICAL_EXPRESSION -> EXPRESSION > EXPRESSION .) ]
  ! DOTDIV          [ reduce using rule 28 (LOGICAL_EXPRESSION -> EXPRESSION > EXPRESSION .) ]


state 106

    (29) LOGICAL_EXPRESSION -> EXPRESSION < EXPRESSION .
    (24) BINARY_EXPRESSION -> EXPRESSION . + EXPRESSION
    (25) BINARY_EXPRESSION -> EXPRESSION . - EXPRESSION
    (26) BINARY_EXPRESSION -> EXPRESSION . * EXPRESSION
    (27) BINARY_EXPRESSION -> EXPRESSION . / EXPRESSION
    (28) LOGICAL_EXPRESSION -> EXPRESSION . > EXPRESSION
    (29) LOGICAL_EXPRESSION -> EXPRESSION . < EXPRESSION
    (30) LOGICAL_EXPRESSION -> EXPRESSION . EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> EXPRESSION . EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> EXPRESSION . EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> EXPRESSION . NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> EXPRESSION . DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> EXPRESSION . DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> EXPRESSION . DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> EXPRESSION . DOTDIV EXPRESSION

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for EQORGT resolved as shift
  ! shift/reduce conflict for EQORLESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for DOTADD resolved as shift
  ! shift/reduce conflict for DOTSUB resolved as shift
  ! shift/reduce conflict for DOTMUL resolved as shift
  ! shift/reduce conflict for DOTDIV resolved as shift
    ;               reduce using rule 29 (LOGICAL_EXPRESSION -> EXPRESSION < EXPRESSION .)
    )               reduce using rule 29 (LOGICAL_EXPRESSION -> EXPRESSION < EXPRESSION .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    >               shift and go to state 76
    <               shift and go to state 77
    EQORGT          shift and go to state 78
    EQORLESS        shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    DOTADD          shift and go to state 82
    DOTSUB          shift and go to state 83
    DOTMUL          shift and go to state 84
    DOTDIV          shift and go to state 85

  ! +               [ reduce using rule 29 (LOGICAL_EXPRESSION -> EXPRESSION < EXPRESSION .) ]
  ! -               [ reduce using rule 29 (LOGICAL_EXPRESSION -> EXPRESSION < EXPRESSION .) ]
  ! *               [ reduce using rule 29 (LOGICAL_EXPRESSION -> EXPRESSION < EXPRESSION .) ]
  ! /               [ reduce using rule 29 (LOGICAL_EXPRESSION -> EXPRESSION < EXPRESSION .) ]
  ! >               [ reduce using rule 29 (LOGICAL_EXPRESSION -> EXPRESSION < EXPRESSION .) ]
  ! <               [ reduce using rule 29 (LOGICAL_EXPRESSION -> EXPRESSION < EXPRESSION .) ]
  ! EQORGT          [ reduce using rule 29 (LOGICAL_EXPRESSION -> EXPRESSION < EXPRESSION .) ]
  ! EQORLESS        [ reduce using rule 29 (LOGICAL_EXPRESSION -> EXPRESSION < EXPRESSION .) ]
  ! EQUAL           [ reduce using rule 29 (LOGICAL_EXPRESSION -> EXPRESSION < EXPRESSION .) ]
  ! NOTEQUAL        [ reduce using rule 29 (LOGICAL_EXPRESSION -> EXPRESSION < EXPRESSION .) ]
  ! DOTADD          [ reduce using rule 29 (LOGICAL_EXPRESSION -> EXPRESSION < EXPRESSION .) ]
  ! DOTSUB          [ reduce using rule 29 (LOGICAL_EXPRESSION -> EXPRESSION < EXPRESSION .) ]
  ! DOTMUL          [ reduce using rule 29 (LOGICAL_EXPRESSION -> EXPRESSION < EXPRESSION .) ]
  ! DOTDIV          [ reduce using rule 29 (LOGICAL_EXPRESSION -> EXPRESSION < EXPRESSION .) ]


state 107

    (30) LOGICAL_EXPRESSION -> EXPRESSION EQORGT EXPRESSION .
    (24) BINARY_EXPRESSION -> EXPRESSION . + EXPRESSION
    (25) BINARY_EXPRESSION -> EXPRESSION . - EXPRESSION
    (26) BINARY_EXPRESSION -> EXPRESSION . * EXPRESSION
    (27) BINARY_EXPRESSION -> EXPRESSION . / EXPRESSION
    (28) LOGICAL_EXPRESSION -> EXPRESSION . > EXPRESSION
    (29) LOGICAL_EXPRESSION -> EXPRESSION . < EXPRESSION
    (30) LOGICAL_EXPRESSION -> EXPRESSION . EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> EXPRESSION . EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> EXPRESSION . EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> EXPRESSION . NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> EXPRESSION . DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> EXPRESSION . DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> EXPRESSION . DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> EXPRESSION . DOTDIV EXPRESSION

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for EQORGT resolved as shift
  ! shift/reduce conflict for EQORLESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for DOTADD resolved as shift
  ! shift/reduce conflict for DOTSUB resolved as shift
  ! shift/reduce conflict for DOTMUL resolved as shift
  ! shift/reduce conflict for DOTDIV resolved as shift
    ;               reduce using rule 30 (LOGICAL_EXPRESSION -> EXPRESSION EQORGT EXPRESSION .)
    )               reduce using rule 30 (LOGICAL_EXPRESSION -> EXPRESSION EQORGT EXPRESSION .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    >               shift and go to state 76
    <               shift and go to state 77
    EQORGT          shift and go to state 78
    EQORLESS        shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    DOTADD          shift and go to state 82
    DOTSUB          shift and go to state 83
    DOTMUL          shift and go to state 84
    DOTDIV          shift and go to state 85

  ! +               [ reduce using rule 30 (LOGICAL_EXPRESSION -> EXPRESSION EQORGT EXPRESSION .) ]
  ! -               [ reduce using rule 30 (LOGICAL_EXPRESSION -> EXPRESSION EQORGT EXPRESSION .) ]
  ! *               [ reduce using rule 30 (LOGICAL_EXPRESSION -> EXPRESSION EQORGT EXPRESSION .) ]
  ! /               [ reduce using rule 30 (LOGICAL_EXPRESSION -> EXPRESSION EQORGT EXPRESSION .) ]
  ! >               [ reduce using rule 30 (LOGICAL_EXPRESSION -> EXPRESSION EQORGT EXPRESSION .) ]
  ! <               [ reduce using rule 30 (LOGICAL_EXPRESSION -> EXPRESSION EQORGT EXPRESSION .) ]
  ! EQORGT          [ reduce using rule 30 (LOGICAL_EXPRESSION -> EXPRESSION EQORGT EXPRESSION .) ]
  ! EQORLESS        [ reduce using rule 30 (LOGICAL_EXPRESSION -> EXPRESSION EQORGT EXPRESSION .) ]
  ! EQUAL           [ reduce using rule 30 (LOGICAL_EXPRESSION -> EXPRESSION EQORGT EXPRESSION .) ]
  ! NOTEQUAL        [ reduce using rule 30 (LOGICAL_EXPRESSION -> EXPRESSION EQORGT EXPRESSION .) ]
  ! DOTADD          [ reduce using rule 30 (LOGICAL_EXPRESSION -> EXPRESSION EQORGT EXPRESSION .) ]
  ! DOTSUB          [ reduce using rule 30 (LOGICAL_EXPRESSION -> EXPRESSION EQORGT EXPRESSION .) ]
  ! DOTMUL          [ reduce using rule 30 (LOGICAL_EXPRESSION -> EXPRESSION EQORGT EXPRESSION .) ]
  ! DOTDIV          [ reduce using rule 30 (LOGICAL_EXPRESSION -> EXPRESSION EQORGT EXPRESSION .) ]


state 108

    (31) LOGICAL_EXPRESSION -> EXPRESSION EQORLESS EXPRESSION .
    (24) BINARY_EXPRESSION -> EXPRESSION . + EXPRESSION
    (25) BINARY_EXPRESSION -> EXPRESSION . - EXPRESSION
    (26) BINARY_EXPRESSION -> EXPRESSION . * EXPRESSION
    (27) BINARY_EXPRESSION -> EXPRESSION . / EXPRESSION
    (28) LOGICAL_EXPRESSION -> EXPRESSION . > EXPRESSION
    (29) LOGICAL_EXPRESSION -> EXPRESSION . < EXPRESSION
    (30) LOGICAL_EXPRESSION -> EXPRESSION . EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> EXPRESSION . EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> EXPRESSION . EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> EXPRESSION . NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> EXPRESSION . DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> EXPRESSION . DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> EXPRESSION . DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> EXPRESSION . DOTDIV EXPRESSION

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for EQORGT resolved as shift
  ! shift/reduce conflict for EQORLESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for DOTADD resolved as shift
  ! shift/reduce conflict for DOTSUB resolved as shift
  ! shift/reduce conflict for DOTMUL resolved as shift
  ! shift/reduce conflict for DOTDIV resolved as shift
    ;               reduce using rule 31 (LOGICAL_EXPRESSION -> EXPRESSION EQORLESS EXPRESSION .)
    )               reduce using rule 31 (LOGICAL_EXPRESSION -> EXPRESSION EQORLESS EXPRESSION .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    >               shift and go to state 76
    <               shift and go to state 77
    EQORGT          shift and go to state 78
    EQORLESS        shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    DOTADD          shift and go to state 82
    DOTSUB          shift and go to state 83
    DOTMUL          shift and go to state 84
    DOTDIV          shift and go to state 85

  ! +               [ reduce using rule 31 (LOGICAL_EXPRESSION -> EXPRESSION EQORLESS EXPRESSION .) ]
  ! -               [ reduce using rule 31 (LOGICAL_EXPRESSION -> EXPRESSION EQORLESS EXPRESSION .) ]
  ! *               [ reduce using rule 31 (LOGICAL_EXPRESSION -> EXPRESSION EQORLESS EXPRESSION .) ]
  ! /               [ reduce using rule 31 (LOGICAL_EXPRESSION -> EXPRESSION EQORLESS EXPRESSION .) ]
  ! >               [ reduce using rule 31 (LOGICAL_EXPRESSION -> EXPRESSION EQORLESS EXPRESSION .) ]
  ! <               [ reduce using rule 31 (LOGICAL_EXPRESSION -> EXPRESSION EQORLESS EXPRESSION .) ]
  ! EQORGT          [ reduce using rule 31 (LOGICAL_EXPRESSION -> EXPRESSION EQORLESS EXPRESSION .) ]
  ! EQORLESS        [ reduce using rule 31 (LOGICAL_EXPRESSION -> EXPRESSION EQORLESS EXPRESSION .) ]
  ! EQUAL           [ reduce using rule 31 (LOGICAL_EXPRESSION -> EXPRESSION EQORLESS EXPRESSION .) ]
  ! NOTEQUAL        [ reduce using rule 31 (LOGICAL_EXPRESSION -> EXPRESSION EQORLESS EXPRESSION .) ]
  ! DOTADD          [ reduce using rule 31 (LOGICAL_EXPRESSION -> EXPRESSION EQORLESS EXPRESSION .) ]
  ! DOTSUB          [ reduce using rule 31 (LOGICAL_EXPRESSION -> EXPRESSION EQORLESS EXPRESSION .) ]
  ! DOTMUL          [ reduce using rule 31 (LOGICAL_EXPRESSION -> EXPRESSION EQORLESS EXPRESSION .) ]
  ! DOTDIV          [ reduce using rule 31 (LOGICAL_EXPRESSION -> EXPRESSION EQORLESS EXPRESSION .) ]


state 109

    (32) LOGICAL_EXPRESSION -> EXPRESSION EQUAL EXPRESSION .
    (24) BINARY_EXPRESSION -> EXPRESSION . + EXPRESSION
    (25) BINARY_EXPRESSION -> EXPRESSION . - EXPRESSION
    (26) BINARY_EXPRESSION -> EXPRESSION . * EXPRESSION
    (27) BINARY_EXPRESSION -> EXPRESSION . / EXPRESSION
    (28) LOGICAL_EXPRESSION -> EXPRESSION . > EXPRESSION
    (29) LOGICAL_EXPRESSION -> EXPRESSION . < EXPRESSION
    (30) LOGICAL_EXPRESSION -> EXPRESSION . EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> EXPRESSION . EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> EXPRESSION . EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> EXPRESSION . NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> EXPRESSION . DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> EXPRESSION . DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> EXPRESSION . DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> EXPRESSION . DOTDIV EXPRESSION

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for EQORGT resolved as shift
  ! shift/reduce conflict for EQORLESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for DOTADD resolved as shift
  ! shift/reduce conflict for DOTSUB resolved as shift
  ! shift/reduce conflict for DOTMUL resolved as shift
  ! shift/reduce conflict for DOTDIV resolved as shift
    ;               reduce using rule 32 (LOGICAL_EXPRESSION -> EXPRESSION EQUAL EXPRESSION .)
    )               reduce using rule 32 (LOGICAL_EXPRESSION -> EXPRESSION EQUAL EXPRESSION .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    >               shift and go to state 76
    <               shift and go to state 77
    EQORGT          shift and go to state 78
    EQORLESS        shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    DOTADD          shift and go to state 82
    DOTSUB          shift and go to state 83
    DOTMUL          shift and go to state 84
    DOTDIV          shift and go to state 85

  ! +               [ reduce using rule 32 (LOGICAL_EXPRESSION -> EXPRESSION EQUAL EXPRESSION .) ]
  ! -               [ reduce using rule 32 (LOGICAL_EXPRESSION -> EXPRESSION EQUAL EXPRESSION .) ]
  ! *               [ reduce using rule 32 (LOGICAL_EXPRESSION -> EXPRESSION EQUAL EXPRESSION .) ]
  ! /               [ reduce using rule 32 (LOGICAL_EXPRESSION -> EXPRESSION EQUAL EXPRESSION .) ]
  ! >               [ reduce using rule 32 (LOGICAL_EXPRESSION -> EXPRESSION EQUAL EXPRESSION .) ]
  ! <               [ reduce using rule 32 (LOGICAL_EXPRESSION -> EXPRESSION EQUAL EXPRESSION .) ]
  ! EQORGT          [ reduce using rule 32 (LOGICAL_EXPRESSION -> EXPRESSION EQUAL EXPRESSION .) ]
  ! EQORLESS        [ reduce using rule 32 (LOGICAL_EXPRESSION -> EXPRESSION EQUAL EXPRESSION .) ]
  ! EQUAL           [ reduce using rule 32 (LOGICAL_EXPRESSION -> EXPRESSION EQUAL EXPRESSION .) ]
  ! NOTEQUAL        [ reduce using rule 32 (LOGICAL_EXPRESSION -> EXPRESSION EQUAL EXPRESSION .) ]
  ! DOTADD          [ reduce using rule 32 (LOGICAL_EXPRESSION -> EXPRESSION EQUAL EXPRESSION .) ]
  ! DOTSUB          [ reduce using rule 32 (LOGICAL_EXPRESSION -> EXPRESSION EQUAL EXPRESSION .) ]
  ! DOTMUL          [ reduce using rule 32 (LOGICAL_EXPRESSION -> EXPRESSION EQUAL EXPRESSION .) ]
  ! DOTDIV          [ reduce using rule 32 (LOGICAL_EXPRESSION -> EXPRESSION EQUAL EXPRESSION .) ]


state 110

    (33) LOGICAL_EXPRESSION -> EXPRESSION NOTEQUAL EXPRESSION .
    (24) BINARY_EXPRESSION -> EXPRESSION . + EXPRESSION
    (25) BINARY_EXPRESSION -> EXPRESSION . - EXPRESSION
    (26) BINARY_EXPRESSION -> EXPRESSION . * EXPRESSION
    (27) BINARY_EXPRESSION -> EXPRESSION . / EXPRESSION
    (28) LOGICAL_EXPRESSION -> EXPRESSION . > EXPRESSION
    (29) LOGICAL_EXPRESSION -> EXPRESSION . < EXPRESSION
    (30) LOGICAL_EXPRESSION -> EXPRESSION . EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> EXPRESSION . EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> EXPRESSION . EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> EXPRESSION . NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> EXPRESSION . DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> EXPRESSION . DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> EXPRESSION . DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> EXPRESSION . DOTDIV EXPRESSION

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for EQORGT resolved as shift
  ! shift/reduce conflict for EQORLESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for DOTADD resolved as shift
  ! shift/reduce conflict for DOTSUB resolved as shift
  ! shift/reduce conflict for DOTMUL resolved as shift
  ! shift/reduce conflict for DOTDIV resolved as shift
    ;               reduce using rule 33 (LOGICAL_EXPRESSION -> EXPRESSION NOTEQUAL EXPRESSION .)
    )               reduce using rule 33 (LOGICAL_EXPRESSION -> EXPRESSION NOTEQUAL EXPRESSION .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    >               shift and go to state 76
    <               shift and go to state 77
    EQORGT          shift and go to state 78
    EQORLESS        shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    DOTADD          shift and go to state 82
    DOTSUB          shift and go to state 83
    DOTMUL          shift and go to state 84
    DOTDIV          shift and go to state 85

  ! +               [ reduce using rule 33 (LOGICAL_EXPRESSION -> EXPRESSION NOTEQUAL EXPRESSION .) ]
  ! -               [ reduce using rule 33 (LOGICAL_EXPRESSION -> EXPRESSION NOTEQUAL EXPRESSION .) ]
  ! *               [ reduce using rule 33 (LOGICAL_EXPRESSION -> EXPRESSION NOTEQUAL EXPRESSION .) ]
  ! /               [ reduce using rule 33 (LOGICAL_EXPRESSION -> EXPRESSION NOTEQUAL EXPRESSION .) ]
  ! >               [ reduce using rule 33 (LOGICAL_EXPRESSION -> EXPRESSION NOTEQUAL EXPRESSION .) ]
  ! <               [ reduce using rule 33 (LOGICAL_EXPRESSION -> EXPRESSION NOTEQUAL EXPRESSION .) ]
  ! EQORGT          [ reduce using rule 33 (LOGICAL_EXPRESSION -> EXPRESSION NOTEQUAL EXPRESSION .) ]
  ! EQORLESS        [ reduce using rule 33 (LOGICAL_EXPRESSION -> EXPRESSION NOTEQUAL EXPRESSION .) ]
  ! EQUAL           [ reduce using rule 33 (LOGICAL_EXPRESSION -> EXPRESSION NOTEQUAL EXPRESSION .) ]
  ! NOTEQUAL        [ reduce using rule 33 (LOGICAL_EXPRESSION -> EXPRESSION NOTEQUAL EXPRESSION .) ]
  ! DOTADD          [ reduce using rule 33 (LOGICAL_EXPRESSION -> EXPRESSION NOTEQUAL EXPRESSION .) ]
  ! DOTSUB          [ reduce using rule 33 (LOGICAL_EXPRESSION -> EXPRESSION NOTEQUAL EXPRESSION .) ]
  ! DOTMUL          [ reduce using rule 33 (LOGICAL_EXPRESSION -> EXPRESSION NOTEQUAL EXPRESSION .) ]
  ! DOTDIV          [ reduce using rule 33 (LOGICAL_EXPRESSION -> EXPRESSION NOTEQUAL EXPRESSION .) ]


state 111

    (34) MATRIX_EXPRESSION -> EXPRESSION DOTADD EXPRESSION .
    (24) BINARY_EXPRESSION -> EXPRESSION . + EXPRESSION
    (25) BINARY_EXPRESSION -> EXPRESSION . - EXPRESSION
    (26) BINARY_EXPRESSION -> EXPRESSION . * EXPRESSION
    (27) BINARY_EXPRESSION -> EXPRESSION . / EXPRESSION
    (28) LOGICAL_EXPRESSION -> EXPRESSION . > EXPRESSION
    (29) LOGICAL_EXPRESSION -> EXPRESSION . < EXPRESSION
    (30) LOGICAL_EXPRESSION -> EXPRESSION . EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> EXPRESSION . EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> EXPRESSION . EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> EXPRESSION . NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> EXPRESSION . DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> EXPRESSION . DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> EXPRESSION . DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> EXPRESSION . DOTDIV EXPRESSION

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for EQORGT resolved as shift
  ! shift/reduce conflict for EQORLESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for DOTADD resolved as shift
  ! shift/reduce conflict for DOTSUB resolved as shift
  ! shift/reduce conflict for DOTMUL resolved as shift
  ! shift/reduce conflict for DOTDIV resolved as shift
    ;               reduce using rule 34 (MATRIX_EXPRESSION -> EXPRESSION DOTADD EXPRESSION .)
    )               reduce using rule 34 (MATRIX_EXPRESSION -> EXPRESSION DOTADD EXPRESSION .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    >               shift and go to state 76
    <               shift and go to state 77
    EQORGT          shift and go to state 78
    EQORLESS        shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    DOTADD          shift and go to state 82
    DOTSUB          shift and go to state 83
    DOTMUL          shift and go to state 84
    DOTDIV          shift and go to state 85

  ! +               [ reduce using rule 34 (MATRIX_EXPRESSION -> EXPRESSION DOTADD EXPRESSION .) ]
  ! -               [ reduce using rule 34 (MATRIX_EXPRESSION -> EXPRESSION DOTADD EXPRESSION .) ]
  ! *               [ reduce using rule 34 (MATRIX_EXPRESSION -> EXPRESSION DOTADD EXPRESSION .) ]
  ! /               [ reduce using rule 34 (MATRIX_EXPRESSION -> EXPRESSION DOTADD EXPRESSION .) ]
  ! >               [ reduce using rule 34 (MATRIX_EXPRESSION -> EXPRESSION DOTADD EXPRESSION .) ]
  ! <               [ reduce using rule 34 (MATRIX_EXPRESSION -> EXPRESSION DOTADD EXPRESSION .) ]
  ! EQORGT          [ reduce using rule 34 (MATRIX_EXPRESSION -> EXPRESSION DOTADD EXPRESSION .) ]
  ! EQORLESS        [ reduce using rule 34 (MATRIX_EXPRESSION -> EXPRESSION DOTADD EXPRESSION .) ]
  ! EQUAL           [ reduce using rule 34 (MATRIX_EXPRESSION -> EXPRESSION DOTADD EXPRESSION .) ]
  ! NOTEQUAL        [ reduce using rule 34 (MATRIX_EXPRESSION -> EXPRESSION DOTADD EXPRESSION .) ]
  ! DOTADD          [ reduce using rule 34 (MATRIX_EXPRESSION -> EXPRESSION DOTADD EXPRESSION .) ]
  ! DOTSUB          [ reduce using rule 34 (MATRIX_EXPRESSION -> EXPRESSION DOTADD EXPRESSION .) ]
  ! DOTMUL          [ reduce using rule 34 (MATRIX_EXPRESSION -> EXPRESSION DOTADD EXPRESSION .) ]
  ! DOTDIV          [ reduce using rule 34 (MATRIX_EXPRESSION -> EXPRESSION DOTADD EXPRESSION .) ]


state 112

    (35) MATRIX_EXPRESSION -> EXPRESSION DOTSUB EXPRESSION .
    (24) BINARY_EXPRESSION -> EXPRESSION . + EXPRESSION
    (25) BINARY_EXPRESSION -> EXPRESSION . - EXPRESSION
    (26) BINARY_EXPRESSION -> EXPRESSION . * EXPRESSION
    (27) BINARY_EXPRESSION -> EXPRESSION . / EXPRESSION
    (28) LOGICAL_EXPRESSION -> EXPRESSION . > EXPRESSION
    (29) LOGICAL_EXPRESSION -> EXPRESSION . < EXPRESSION
    (30) LOGICAL_EXPRESSION -> EXPRESSION . EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> EXPRESSION . EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> EXPRESSION . EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> EXPRESSION . NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> EXPRESSION . DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> EXPRESSION . DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> EXPRESSION . DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> EXPRESSION . DOTDIV EXPRESSION

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for EQORGT resolved as shift
  ! shift/reduce conflict for EQORLESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for DOTADD resolved as shift
  ! shift/reduce conflict for DOTSUB resolved as shift
  ! shift/reduce conflict for DOTMUL resolved as shift
  ! shift/reduce conflict for DOTDIV resolved as shift
    ;               reduce using rule 35 (MATRIX_EXPRESSION -> EXPRESSION DOTSUB EXPRESSION .)
    )               reduce using rule 35 (MATRIX_EXPRESSION -> EXPRESSION DOTSUB EXPRESSION .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    >               shift and go to state 76
    <               shift and go to state 77
    EQORGT          shift and go to state 78
    EQORLESS        shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    DOTADD          shift and go to state 82
    DOTSUB          shift and go to state 83
    DOTMUL          shift and go to state 84
    DOTDIV          shift and go to state 85

  ! +               [ reduce using rule 35 (MATRIX_EXPRESSION -> EXPRESSION DOTSUB EXPRESSION .) ]
  ! -               [ reduce using rule 35 (MATRIX_EXPRESSION -> EXPRESSION DOTSUB EXPRESSION .) ]
  ! *               [ reduce using rule 35 (MATRIX_EXPRESSION -> EXPRESSION DOTSUB EXPRESSION .) ]
  ! /               [ reduce using rule 35 (MATRIX_EXPRESSION -> EXPRESSION DOTSUB EXPRESSION .) ]
  ! >               [ reduce using rule 35 (MATRIX_EXPRESSION -> EXPRESSION DOTSUB EXPRESSION .) ]
  ! <               [ reduce using rule 35 (MATRIX_EXPRESSION -> EXPRESSION DOTSUB EXPRESSION .) ]
  ! EQORGT          [ reduce using rule 35 (MATRIX_EXPRESSION -> EXPRESSION DOTSUB EXPRESSION .) ]
  ! EQORLESS        [ reduce using rule 35 (MATRIX_EXPRESSION -> EXPRESSION DOTSUB EXPRESSION .) ]
  ! EQUAL           [ reduce using rule 35 (MATRIX_EXPRESSION -> EXPRESSION DOTSUB EXPRESSION .) ]
  ! NOTEQUAL        [ reduce using rule 35 (MATRIX_EXPRESSION -> EXPRESSION DOTSUB EXPRESSION .) ]
  ! DOTADD          [ reduce using rule 35 (MATRIX_EXPRESSION -> EXPRESSION DOTSUB EXPRESSION .) ]
  ! DOTSUB          [ reduce using rule 35 (MATRIX_EXPRESSION -> EXPRESSION DOTSUB EXPRESSION .) ]
  ! DOTMUL          [ reduce using rule 35 (MATRIX_EXPRESSION -> EXPRESSION DOTSUB EXPRESSION .) ]
  ! DOTDIV          [ reduce using rule 35 (MATRIX_EXPRESSION -> EXPRESSION DOTSUB EXPRESSION .) ]


state 113

    (36) MATRIX_EXPRESSION -> EXPRESSION DOTMUL EXPRESSION .
    (24) BINARY_EXPRESSION -> EXPRESSION . + EXPRESSION
    (25) BINARY_EXPRESSION -> EXPRESSION . - EXPRESSION
    (26) BINARY_EXPRESSION -> EXPRESSION . * EXPRESSION
    (27) BINARY_EXPRESSION -> EXPRESSION . / EXPRESSION
    (28) LOGICAL_EXPRESSION -> EXPRESSION . > EXPRESSION
    (29) LOGICAL_EXPRESSION -> EXPRESSION . < EXPRESSION
    (30) LOGICAL_EXPRESSION -> EXPRESSION . EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> EXPRESSION . EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> EXPRESSION . EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> EXPRESSION . NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> EXPRESSION . DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> EXPRESSION . DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> EXPRESSION . DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> EXPRESSION . DOTDIV EXPRESSION

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for EQORGT resolved as shift
  ! shift/reduce conflict for EQORLESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for DOTADD resolved as shift
  ! shift/reduce conflict for DOTSUB resolved as shift
  ! shift/reduce conflict for DOTMUL resolved as shift
  ! shift/reduce conflict for DOTDIV resolved as shift
    ;               reduce using rule 36 (MATRIX_EXPRESSION -> EXPRESSION DOTMUL EXPRESSION .)
    )               reduce using rule 36 (MATRIX_EXPRESSION -> EXPRESSION DOTMUL EXPRESSION .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    >               shift and go to state 76
    <               shift and go to state 77
    EQORGT          shift and go to state 78
    EQORLESS        shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    DOTADD          shift and go to state 82
    DOTSUB          shift and go to state 83
    DOTMUL          shift and go to state 84
    DOTDIV          shift and go to state 85

  ! +               [ reduce using rule 36 (MATRIX_EXPRESSION -> EXPRESSION DOTMUL EXPRESSION .) ]
  ! -               [ reduce using rule 36 (MATRIX_EXPRESSION -> EXPRESSION DOTMUL EXPRESSION .) ]
  ! *               [ reduce using rule 36 (MATRIX_EXPRESSION -> EXPRESSION DOTMUL EXPRESSION .) ]
  ! /               [ reduce using rule 36 (MATRIX_EXPRESSION -> EXPRESSION DOTMUL EXPRESSION .) ]
  ! >               [ reduce using rule 36 (MATRIX_EXPRESSION -> EXPRESSION DOTMUL EXPRESSION .) ]
  ! <               [ reduce using rule 36 (MATRIX_EXPRESSION -> EXPRESSION DOTMUL EXPRESSION .) ]
  ! EQORGT          [ reduce using rule 36 (MATRIX_EXPRESSION -> EXPRESSION DOTMUL EXPRESSION .) ]
  ! EQORLESS        [ reduce using rule 36 (MATRIX_EXPRESSION -> EXPRESSION DOTMUL EXPRESSION .) ]
  ! EQUAL           [ reduce using rule 36 (MATRIX_EXPRESSION -> EXPRESSION DOTMUL EXPRESSION .) ]
  ! NOTEQUAL        [ reduce using rule 36 (MATRIX_EXPRESSION -> EXPRESSION DOTMUL EXPRESSION .) ]
  ! DOTADD          [ reduce using rule 36 (MATRIX_EXPRESSION -> EXPRESSION DOTMUL EXPRESSION .) ]
  ! DOTSUB          [ reduce using rule 36 (MATRIX_EXPRESSION -> EXPRESSION DOTMUL EXPRESSION .) ]
  ! DOTMUL          [ reduce using rule 36 (MATRIX_EXPRESSION -> EXPRESSION DOTMUL EXPRESSION .) ]
  ! DOTDIV          [ reduce using rule 36 (MATRIX_EXPRESSION -> EXPRESSION DOTMUL EXPRESSION .) ]


state 114

    (37) MATRIX_EXPRESSION -> EXPRESSION DOTDIV EXPRESSION .
    (24) BINARY_EXPRESSION -> EXPRESSION . + EXPRESSION
    (25) BINARY_EXPRESSION -> EXPRESSION . - EXPRESSION
    (26) BINARY_EXPRESSION -> EXPRESSION . * EXPRESSION
    (27) BINARY_EXPRESSION -> EXPRESSION . / EXPRESSION
    (28) LOGICAL_EXPRESSION -> EXPRESSION . > EXPRESSION
    (29) LOGICAL_EXPRESSION -> EXPRESSION . < EXPRESSION
    (30) LOGICAL_EXPRESSION -> EXPRESSION . EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> EXPRESSION . EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> EXPRESSION . EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> EXPRESSION . NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> EXPRESSION . DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> EXPRESSION . DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> EXPRESSION . DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> EXPRESSION . DOTDIV EXPRESSION

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for EQORGT resolved as shift
  ! shift/reduce conflict for EQORLESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for DOTADD resolved as shift
  ! shift/reduce conflict for DOTSUB resolved as shift
  ! shift/reduce conflict for DOTMUL resolved as shift
  ! shift/reduce conflict for DOTDIV resolved as shift
    ;               reduce using rule 37 (MATRIX_EXPRESSION -> EXPRESSION DOTDIV EXPRESSION .)
    )               reduce using rule 37 (MATRIX_EXPRESSION -> EXPRESSION DOTDIV EXPRESSION .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    >               shift and go to state 76
    <               shift and go to state 77
    EQORGT          shift and go to state 78
    EQORLESS        shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    DOTADD          shift and go to state 82
    DOTSUB          shift and go to state 83
    DOTMUL          shift and go to state 84
    DOTDIV          shift and go to state 85

  ! +               [ reduce using rule 37 (MATRIX_EXPRESSION -> EXPRESSION DOTDIV EXPRESSION .) ]
  ! -               [ reduce using rule 37 (MATRIX_EXPRESSION -> EXPRESSION DOTDIV EXPRESSION .) ]
  ! *               [ reduce using rule 37 (MATRIX_EXPRESSION -> EXPRESSION DOTDIV EXPRESSION .) ]
  ! /               [ reduce using rule 37 (MATRIX_EXPRESSION -> EXPRESSION DOTDIV EXPRESSION .) ]
  ! >               [ reduce using rule 37 (MATRIX_EXPRESSION -> EXPRESSION DOTDIV EXPRESSION .) ]
  ! <               [ reduce using rule 37 (MATRIX_EXPRESSION -> EXPRESSION DOTDIV EXPRESSION .) ]
  ! EQORGT          [ reduce using rule 37 (MATRIX_EXPRESSION -> EXPRESSION DOTDIV EXPRESSION .) ]
  ! EQORLESS        [ reduce using rule 37 (MATRIX_EXPRESSION -> EXPRESSION DOTDIV EXPRESSION .) ]
  ! EQUAL           [ reduce using rule 37 (MATRIX_EXPRESSION -> EXPRESSION DOTDIV EXPRESSION .) ]
  ! NOTEQUAL        [ reduce using rule 37 (MATRIX_EXPRESSION -> EXPRESSION DOTDIV EXPRESSION .) ]
  ! DOTADD          [ reduce using rule 37 (MATRIX_EXPRESSION -> EXPRESSION DOTDIV EXPRESSION .) ]
  ! DOTSUB          [ reduce using rule 37 (MATRIX_EXPRESSION -> EXPRESSION DOTDIV EXPRESSION .) ]
  ! DOTMUL          [ reduce using rule 37 (MATRIX_EXPRESSION -> EXPRESSION DOTDIV EXPRESSION .) ]
  ! DOTDIV          [ reduce using rule 37 (MATRIX_EXPRESSION -> EXPRESSION DOTDIV EXPRESSION .) ]


state 115

    (22) EXPRESSION -> ( EXPRESSION ) .

    +               reduce using rule 22 (EXPRESSION -> ( EXPRESSION ) .)
    -               reduce using rule 22 (EXPRESSION -> ( EXPRESSION ) .)
    *               reduce using rule 22 (EXPRESSION -> ( EXPRESSION ) .)
    /               reduce using rule 22 (EXPRESSION -> ( EXPRESSION ) .)
    >               reduce using rule 22 (EXPRESSION -> ( EXPRESSION ) .)
    <               reduce using rule 22 (EXPRESSION -> ( EXPRESSION ) .)
    EQORGT          reduce using rule 22 (EXPRESSION -> ( EXPRESSION ) .)
    EQORLESS        reduce using rule 22 (EXPRESSION -> ( EXPRESSION ) .)
    EQUAL           reduce using rule 22 (EXPRESSION -> ( EXPRESSION ) .)
    NOTEQUAL        reduce using rule 22 (EXPRESSION -> ( EXPRESSION ) .)
    DOTADD          reduce using rule 22 (EXPRESSION -> ( EXPRESSION ) .)
    DOTSUB          reduce using rule 22 (EXPRESSION -> ( EXPRESSION ) .)
    DOTMUL          reduce using rule 22 (EXPRESSION -> ( EXPRESSION ) .)
    DOTDIV          reduce using rule 22 (EXPRESSION -> ( EXPRESSION ) .)
    ;               reduce using rule 22 (EXPRESSION -> ( EXPRESSION ) .)
    )               reduce using rule 22 (EXPRESSION -> ( EXPRESSION ) .)


state 116

    (12) ASSIGN -> ID [ INTNUM ] ASSIGN_TYPE . EXPRESSION
    (19) EXPRESSION -> . BINARY_EXPRESSION
    (20) EXPRESSION -> . LOGICAL_EXPRESSION
    (21) EXPRESSION -> . MATRIX_EXPRESSION
    (22) EXPRESSION -> . ( EXPRESSION )
    (23) EXPRESSION -> . TERM
    (46) EXPRESSION -> . RETURN TERM
    (24) BINARY_EXPRESSION -> . EXPRESSION + EXPRESSION
    (25) BINARY_EXPRESSION -> . EXPRESSION - EXPRESSION
    (26) BINARY_EXPRESSION -> . EXPRESSION * EXPRESSION
    (27) BINARY_EXPRESSION -> . EXPRESSION / EXPRESSION
    (28) LOGICAL_EXPRESSION -> . EXPRESSION > EXPRESSION
    (29) LOGICAL_EXPRESSION -> . EXPRESSION < EXPRESSION
    (30) LOGICAL_EXPRESSION -> . EXPRESSION EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> . EXPRESSION EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> . EXPRESSION EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> . EXPRESSION NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> . EXPRESSION DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> . EXPRESSION DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> . EXPRESSION DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> . EXPRESSION DOTDIV EXPRESSION
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    (               shift and go to state 55
    RETURN          shift and go to state 57
    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    EXPRESSION                     shift and go to state 127
    BINARY_EXPRESSION              shift and go to state 52
    LOGICAL_EXPRESSION             shift and go to state 53
    MATRIX_EXPRESSION              shift and go to state 54
    TERM                           shift and go to state 56
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 117

    (13) ASSIGN -> ID [ INTNUM , INTNUM . ] ASSIGN_TYPE EXPRESSION

    ]               shift and go to state 128


state 118

    (65) IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) INSTRUCTION . ELIF_STATEMENTS ELSE_STATEMENT
    (67) ELIF_STATEMENTS -> . ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS
    (68) ELIF_STATEMENTS -> . ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS
    (69) ELIF_STATEMENTS -> . ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION
    (70) ELIF_STATEMENTS -> . ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS }

    ELSEIF          shift and go to state 130

    ELIF_STATEMENTS                shift and go to state 129

state 119

    (66) IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) { . INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT
    (2) INSTRUCTIONS -> . { INSTRUCTIONS }
    (3) INSTRUCTIONS -> . INSTRUCTION INSTRUCTIONS
    (4) INSTRUCTIONS -> . INSTRUCTION
    (5) INSTRUCTION -> . ASSIGN ;
    (6) INSTRUCTION -> . IF_CONDITION
    (7) INSTRUCTION -> . FOR_LOOP
    (8) INSTRUCTION -> . WHILE_LOOP
    (9) INSTRUCTION -> . CONTROL_INSTRUCTION ;
    (10) INSTRUCTION -> . PRINT_CALL ;
    (11) ASSIGN -> . ID ASSIGN_TYPE EXPRESSION
    (12) ASSIGN -> . ID [ INTNUM ] ASSIGN_TYPE EXPRESSION
    (13) ASSIGN -> . ID [ INTNUM , INTNUM ] ASSIGN_TYPE EXPRESSION
    (65) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT
    (66) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT
    (74) FOR_LOOP -> . FOR FOR_CONDITION { INSTRUCTIONS }
    (75) FOR_LOOP -> . FOR FOR_CONDITION INSTRUCTION
    (77) WHILE_LOOP -> . WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS }
    (78) WHILE_LOOP -> . WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION
    (58) CONTROL_INSTRUCTION -> . BREAK
    (59) CONTROL_INSTRUCTION -> . CONTINUE
    (60) CONTROL_INSTRUCTION -> . RETURN
    (61) CONTROL_INSTRUCTION -> . RETURN TERM
    (62) PRINT_CALL -> . PRINT PRINT_TERMS

    {               shift and go to state 3
    ID              shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18

    INSTRUCTIONS                   shift and go to state 131
    INSTRUCTION                    shift and go to state 4
    ASSIGN                         shift and go to state 5
    IF_CONDITION                   shift and go to state 6
    FOR_LOOP                       shift and go to state 7
    WHILE_LOOP                     shift and go to state 8
    CONTROL_INSTRUCTION            shift and go to state 9
    PRINT_CALL                     shift and go to state 10

state 120

    (74) FOR_LOOP -> FOR FOR_CONDITION { INSTRUCTIONS } .

    {               reduce using rule 74 (FOR_LOOP -> FOR FOR_CONDITION { INSTRUCTIONS } .)
    ID              reduce using rule 74 (FOR_LOOP -> FOR FOR_CONDITION { INSTRUCTIONS } .)
    IF              reduce using rule 74 (FOR_LOOP -> FOR FOR_CONDITION { INSTRUCTIONS } .)
    FOR             reduce using rule 74 (FOR_LOOP -> FOR FOR_CONDITION { INSTRUCTIONS } .)
    WHILE           reduce using rule 74 (FOR_LOOP -> FOR FOR_CONDITION { INSTRUCTIONS } .)
    BREAK           reduce using rule 74 (FOR_LOOP -> FOR FOR_CONDITION { INSTRUCTIONS } .)
    CONTINUE        reduce using rule 74 (FOR_LOOP -> FOR FOR_CONDITION { INSTRUCTIONS } .)
    RETURN          reduce using rule 74 (FOR_LOOP -> FOR FOR_CONDITION { INSTRUCTIONS } .)
    PRINT           reduce using rule 74 (FOR_LOOP -> FOR FOR_CONDITION { INSTRUCTIONS } .)
    $end            reduce using rule 74 (FOR_LOOP -> FOR FOR_CONDITION { INSTRUCTIONS } .)
    }               reduce using rule 74 (FOR_LOOP -> FOR FOR_CONDITION { INSTRUCTIONS } .)
    ELSEIF          reduce using rule 74 (FOR_LOOP -> FOR FOR_CONDITION { INSTRUCTIONS } .)
    ELSE            reduce using rule 74 (FOR_LOOP -> FOR FOR_CONDITION { INSTRUCTIONS } .)


state 121

    (76) FOR_CONDITION -> TERM = INTNUM_OR_ID : . INTNUM_OR_ID
    (47) INTNUM_OR_ID -> . INTNUM
    (48) INTNUM_OR_ID -> . ID

    INTNUM          shift and go to state 93
    ID              shift and go to state 94

    INTNUM_OR_ID                   shift and go to state 132

state 122

    (50) VECTORS -> VECTORS ; VECTOR .
    (52) VECTOR -> VECTOR . , TERM

    ]               reduce using rule 50 (VECTORS -> VECTORS ; VECTOR .)
    ;               reduce using rule 50 (VECTORS -> VECTORS ; VECTOR .)
    ,               shift and go to state 97


state 123

    (52) VECTOR -> VECTOR , TERM .

    ,               reduce using rule 52 (VECTOR -> VECTOR , TERM .)
    ]               reduce using rule 52 (VECTOR -> VECTOR , TERM .)
    ;               reduce using rule 52 (VECTOR -> VECTOR , TERM .)


state 124

    (54) FUNCTION_CALL -> FUNCTION_NAME ( TERM ) .

    =               reduce using rule 54 (FUNCTION_CALL -> FUNCTION_NAME ( TERM ) .)
    ;               reduce using rule 54 (FUNCTION_CALL -> FUNCTION_NAME ( TERM ) .)
    ,               reduce using rule 54 (FUNCTION_CALL -> FUNCTION_NAME ( TERM ) .)
    +               reduce using rule 54 (FUNCTION_CALL -> FUNCTION_NAME ( TERM ) .)
    -               reduce using rule 54 (FUNCTION_CALL -> FUNCTION_NAME ( TERM ) .)
    *               reduce using rule 54 (FUNCTION_CALL -> FUNCTION_NAME ( TERM ) .)
    /               reduce using rule 54 (FUNCTION_CALL -> FUNCTION_NAME ( TERM ) .)
    >               reduce using rule 54 (FUNCTION_CALL -> FUNCTION_NAME ( TERM ) .)
    <               reduce using rule 54 (FUNCTION_CALL -> FUNCTION_NAME ( TERM ) .)
    EQORGT          reduce using rule 54 (FUNCTION_CALL -> FUNCTION_NAME ( TERM ) .)
    EQORLESS        reduce using rule 54 (FUNCTION_CALL -> FUNCTION_NAME ( TERM ) .)
    EQUAL           reduce using rule 54 (FUNCTION_CALL -> FUNCTION_NAME ( TERM ) .)
    NOTEQUAL        reduce using rule 54 (FUNCTION_CALL -> FUNCTION_NAME ( TERM ) .)
    DOTADD          reduce using rule 54 (FUNCTION_CALL -> FUNCTION_NAME ( TERM ) .)
    DOTSUB          reduce using rule 54 (FUNCTION_CALL -> FUNCTION_NAME ( TERM ) .)
    DOTMUL          reduce using rule 54 (FUNCTION_CALL -> FUNCTION_NAME ( TERM ) .)
    DOTDIV          reduce using rule 54 (FUNCTION_CALL -> FUNCTION_NAME ( TERM ) .)
    ]               reduce using rule 54 (FUNCTION_CALL -> FUNCTION_NAME ( TERM ) .)
    )               reduce using rule 54 (FUNCTION_CALL -> FUNCTION_NAME ( TERM ) .)


state 125

    (77) WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) { . INSTRUCTIONS }
    (2) INSTRUCTIONS -> . { INSTRUCTIONS }
    (3) INSTRUCTIONS -> . INSTRUCTION INSTRUCTIONS
    (4) INSTRUCTIONS -> . INSTRUCTION
    (5) INSTRUCTION -> . ASSIGN ;
    (6) INSTRUCTION -> . IF_CONDITION
    (7) INSTRUCTION -> . FOR_LOOP
    (8) INSTRUCTION -> . WHILE_LOOP
    (9) INSTRUCTION -> . CONTROL_INSTRUCTION ;
    (10) INSTRUCTION -> . PRINT_CALL ;
    (11) ASSIGN -> . ID ASSIGN_TYPE EXPRESSION
    (12) ASSIGN -> . ID [ INTNUM ] ASSIGN_TYPE EXPRESSION
    (13) ASSIGN -> . ID [ INTNUM , INTNUM ] ASSIGN_TYPE EXPRESSION
    (65) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT
    (66) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT
    (74) FOR_LOOP -> . FOR FOR_CONDITION { INSTRUCTIONS }
    (75) FOR_LOOP -> . FOR FOR_CONDITION INSTRUCTION
    (77) WHILE_LOOP -> . WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS }
    (78) WHILE_LOOP -> . WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION
    (58) CONTROL_INSTRUCTION -> . BREAK
    (59) CONTROL_INSTRUCTION -> . CONTINUE
    (60) CONTROL_INSTRUCTION -> . RETURN
    (61) CONTROL_INSTRUCTION -> . RETURN TERM
    (62) PRINT_CALL -> . PRINT PRINT_TERMS

    {               shift and go to state 3
    ID              shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18

    INSTRUCTIONS                   shift and go to state 133
    INSTRUCTION                    shift and go to state 4
    ASSIGN                         shift and go to state 5
    IF_CONDITION                   shift and go to state 6
    FOR_LOOP                       shift and go to state 7
    WHILE_LOOP                     shift and go to state 8
    CONTROL_INSTRUCTION            shift and go to state 9
    PRINT_CALL                     shift and go to state 10

state 126

    (78) WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION .

    {               reduce using rule 78 (WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION .)
    ID              reduce using rule 78 (WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION .)
    IF              reduce using rule 78 (WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION .)
    FOR             reduce using rule 78 (WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION .)
    WHILE           reduce using rule 78 (WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION .)
    BREAK           reduce using rule 78 (WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION .)
    CONTINUE        reduce using rule 78 (WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION .)
    RETURN          reduce using rule 78 (WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION .)
    PRINT           reduce using rule 78 (WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION .)
    $end            reduce using rule 78 (WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION .)
    }               reduce using rule 78 (WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION .)
    ELSEIF          reduce using rule 78 (WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION .)
    ELSE            reduce using rule 78 (WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION .)


state 127

    (12) ASSIGN -> ID [ INTNUM ] ASSIGN_TYPE EXPRESSION .
    (24) BINARY_EXPRESSION -> EXPRESSION . + EXPRESSION
    (25) BINARY_EXPRESSION -> EXPRESSION . - EXPRESSION
    (26) BINARY_EXPRESSION -> EXPRESSION . * EXPRESSION
    (27) BINARY_EXPRESSION -> EXPRESSION . / EXPRESSION
    (28) LOGICAL_EXPRESSION -> EXPRESSION . > EXPRESSION
    (29) LOGICAL_EXPRESSION -> EXPRESSION . < EXPRESSION
    (30) LOGICAL_EXPRESSION -> EXPRESSION . EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> EXPRESSION . EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> EXPRESSION . EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> EXPRESSION . NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> EXPRESSION . DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> EXPRESSION . DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> EXPRESSION . DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> EXPRESSION . DOTDIV EXPRESSION

    ;               reduce using rule 12 (ASSIGN -> ID [ INTNUM ] ASSIGN_TYPE EXPRESSION .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    >               shift and go to state 76
    <               shift and go to state 77
    EQORGT          shift and go to state 78
    EQORLESS        shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    DOTADD          shift and go to state 82
    DOTSUB          shift and go to state 83
    DOTMUL          shift and go to state 84
    DOTDIV          shift and go to state 85


state 128

    (13) ASSIGN -> ID [ INTNUM , INTNUM ] . ASSIGN_TYPE EXPRESSION
    (14) ASSIGN_TYPE -> . =
    (15) ASSIGN_TYPE -> . ADDASSIGN
    (16) ASSIGN_TYPE -> . SUBASSIGN
    (17) ASSIGN_TYPE -> . DIVASSIGN
    (18) ASSIGN_TYPE -> . MULASSIGN

    =               shift and go to state 26
    ADDASSIGN       shift and go to state 27
    SUBASSIGN       shift and go to state 28
    DIVASSIGN       shift and go to state 29
    MULASSIGN       shift and go to state 30

    ASSIGN_TYPE                    shift and go to state 134

state 129

    (65) IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS . ELSE_STATEMENT
    (71) ELSE_STATEMENT -> . ELSE INSTRUCTION
    (72) ELSE_STATEMENT -> . ELSE { INSTRUCTIONS }
    (73) ELSE_STATEMENT -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 136
    {               reduce using rule 73 (ELSE_STATEMENT -> .)
    ID              reduce using rule 73 (ELSE_STATEMENT -> .)
    IF              reduce using rule 73 (ELSE_STATEMENT -> .)
    FOR             reduce using rule 73 (ELSE_STATEMENT -> .)
    WHILE           reduce using rule 73 (ELSE_STATEMENT -> .)
    BREAK           reduce using rule 73 (ELSE_STATEMENT -> .)
    CONTINUE        reduce using rule 73 (ELSE_STATEMENT -> .)
    RETURN          reduce using rule 73 (ELSE_STATEMENT -> .)
    PRINT           reduce using rule 73 (ELSE_STATEMENT -> .)
    $end            reduce using rule 73 (ELSE_STATEMENT -> .)
    }               reduce using rule 73 (ELSE_STATEMENT -> .)
    ELSEIF          reduce using rule 73 (ELSE_STATEMENT -> .)

  ! ELSE            [ reduce using rule 73 (ELSE_STATEMENT -> .) ]

    ELSE_STATEMENT                 shift and go to state 135

state 130

    (67) ELIF_STATEMENTS -> ELSEIF . ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS
    (68) ELIF_STATEMENTS -> ELSEIF . ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS
    (69) ELIF_STATEMENTS -> ELSEIF . ( LOGICAL_EXPRESSION ) INSTRUCTION
    (70) ELIF_STATEMENTS -> ELSEIF . ( LOGICAL_EXPRESSION ) { INSTRUCTIONS }

    (               shift and go to state 137


state 131

    (66) IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS . } ELIF_STATEMENTS ELSE_STATEMENT

    }               shift and go to state 138


state 132

    (76) FOR_CONDITION -> TERM = INTNUM_OR_ID : INTNUM_OR_ID .

    {               reduce using rule 76 (FOR_CONDITION -> TERM = INTNUM_OR_ID : INTNUM_OR_ID .)
    ID              reduce using rule 76 (FOR_CONDITION -> TERM = INTNUM_OR_ID : INTNUM_OR_ID .)
    IF              reduce using rule 76 (FOR_CONDITION -> TERM = INTNUM_OR_ID : INTNUM_OR_ID .)
    FOR             reduce using rule 76 (FOR_CONDITION -> TERM = INTNUM_OR_ID : INTNUM_OR_ID .)
    WHILE           reduce using rule 76 (FOR_CONDITION -> TERM = INTNUM_OR_ID : INTNUM_OR_ID .)
    BREAK           reduce using rule 76 (FOR_CONDITION -> TERM = INTNUM_OR_ID : INTNUM_OR_ID .)
    CONTINUE        reduce using rule 76 (FOR_CONDITION -> TERM = INTNUM_OR_ID : INTNUM_OR_ID .)
    RETURN          reduce using rule 76 (FOR_CONDITION -> TERM = INTNUM_OR_ID : INTNUM_OR_ID .)
    PRINT           reduce using rule 76 (FOR_CONDITION -> TERM = INTNUM_OR_ID : INTNUM_OR_ID .)


state 133

    (77) WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS . }

    }               shift and go to state 139


state 134

    (13) ASSIGN -> ID [ INTNUM , INTNUM ] ASSIGN_TYPE . EXPRESSION
    (19) EXPRESSION -> . BINARY_EXPRESSION
    (20) EXPRESSION -> . LOGICAL_EXPRESSION
    (21) EXPRESSION -> . MATRIX_EXPRESSION
    (22) EXPRESSION -> . ( EXPRESSION )
    (23) EXPRESSION -> . TERM
    (46) EXPRESSION -> . RETURN TERM
    (24) BINARY_EXPRESSION -> . EXPRESSION + EXPRESSION
    (25) BINARY_EXPRESSION -> . EXPRESSION - EXPRESSION
    (26) BINARY_EXPRESSION -> . EXPRESSION * EXPRESSION
    (27) BINARY_EXPRESSION -> . EXPRESSION / EXPRESSION
    (28) LOGICAL_EXPRESSION -> . EXPRESSION > EXPRESSION
    (29) LOGICAL_EXPRESSION -> . EXPRESSION < EXPRESSION
    (30) LOGICAL_EXPRESSION -> . EXPRESSION EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> . EXPRESSION EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> . EXPRESSION EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> . EXPRESSION NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> . EXPRESSION DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> . EXPRESSION DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> . EXPRESSION DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> . EXPRESSION DOTDIV EXPRESSION
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    (               shift and go to state 55
    RETURN          shift and go to state 57
    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    EXPRESSION                     shift and go to state 140
    BINARY_EXPRESSION              shift and go to state 52
    LOGICAL_EXPRESSION             shift and go to state 53
    MATRIX_EXPRESSION              shift and go to state 54
    TERM                           shift and go to state 56
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 135

    (65) IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT .

    {               reduce using rule 65 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT .)
    ID              reduce using rule 65 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT .)
    IF              reduce using rule 65 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT .)
    FOR             reduce using rule 65 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT .)
    WHILE           reduce using rule 65 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT .)
    BREAK           reduce using rule 65 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT .)
    CONTINUE        reduce using rule 65 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT .)
    RETURN          reduce using rule 65 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT .)
    PRINT           reduce using rule 65 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT .)
    $end            reduce using rule 65 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT .)
    }               reduce using rule 65 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT .)
    ELSEIF          reduce using rule 65 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT .)
    ELSE            reduce using rule 65 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT .)


state 136

    (71) ELSE_STATEMENT -> ELSE . INSTRUCTION
    (72) ELSE_STATEMENT -> ELSE . { INSTRUCTIONS }
    (5) INSTRUCTION -> . ASSIGN ;
    (6) INSTRUCTION -> . IF_CONDITION
    (7) INSTRUCTION -> . FOR_LOOP
    (8) INSTRUCTION -> . WHILE_LOOP
    (9) INSTRUCTION -> . CONTROL_INSTRUCTION ;
    (10) INSTRUCTION -> . PRINT_CALL ;
    (11) ASSIGN -> . ID ASSIGN_TYPE EXPRESSION
    (12) ASSIGN -> . ID [ INTNUM ] ASSIGN_TYPE EXPRESSION
    (13) ASSIGN -> . ID [ INTNUM , INTNUM ] ASSIGN_TYPE EXPRESSION
    (65) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT
    (66) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT
    (74) FOR_LOOP -> . FOR FOR_CONDITION { INSTRUCTIONS }
    (75) FOR_LOOP -> . FOR FOR_CONDITION INSTRUCTION
    (77) WHILE_LOOP -> . WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS }
    (78) WHILE_LOOP -> . WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION
    (58) CONTROL_INSTRUCTION -> . BREAK
    (59) CONTROL_INSTRUCTION -> . CONTINUE
    (60) CONTROL_INSTRUCTION -> . RETURN
    (61) CONTROL_INSTRUCTION -> . RETURN TERM
    (62) PRINT_CALL -> . PRINT PRINT_TERMS

    {               shift and go to state 142
    ID              shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18

    INSTRUCTION                    shift and go to state 141
    ASSIGN                         shift and go to state 5
    IF_CONDITION                   shift and go to state 6
    FOR_LOOP                       shift and go to state 7
    WHILE_LOOP                     shift and go to state 8
    CONTROL_INSTRUCTION            shift and go to state 9
    PRINT_CALL                     shift and go to state 10

state 137

    (67) ELIF_STATEMENTS -> ELSEIF ( . LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS
    (68) ELIF_STATEMENTS -> ELSEIF ( . LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS
    (69) ELIF_STATEMENTS -> ELSEIF ( . LOGICAL_EXPRESSION ) INSTRUCTION
    (70) ELIF_STATEMENTS -> ELSEIF ( . LOGICAL_EXPRESSION ) { INSTRUCTIONS }
    (28) LOGICAL_EXPRESSION -> . EXPRESSION > EXPRESSION
    (29) LOGICAL_EXPRESSION -> . EXPRESSION < EXPRESSION
    (30) LOGICAL_EXPRESSION -> . EXPRESSION EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> . EXPRESSION EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> . EXPRESSION EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> . EXPRESSION NOTEQUAL EXPRESSION
    (19) EXPRESSION -> . BINARY_EXPRESSION
    (20) EXPRESSION -> . LOGICAL_EXPRESSION
    (21) EXPRESSION -> . MATRIX_EXPRESSION
    (22) EXPRESSION -> . ( EXPRESSION )
    (23) EXPRESSION -> . TERM
    (46) EXPRESSION -> . RETURN TERM
    (24) BINARY_EXPRESSION -> . EXPRESSION + EXPRESSION
    (25) BINARY_EXPRESSION -> . EXPRESSION - EXPRESSION
    (26) BINARY_EXPRESSION -> . EXPRESSION * EXPRESSION
    (27) BINARY_EXPRESSION -> . EXPRESSION / EXPRESSION
    (34) MATRIX_EXPRESSION -> . EXPRESSION DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> . EXPRESSION DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> . EXPRESSION DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> . EXPRESSION DOTDIV EXPRESSION
    (38) TERM -> . ID
    (39) TERM -> . INTNUM
    (40) TERM -> . FLOATNUM
    (41) TERM -> . STRING
    (42) TERM -> . MATRIX
    (43) TERM -> . FUNCTION_CALL
    (44) TERM -> . ID '
    (45) TERM -> . - ID
    (49) MATRIX -> . [ VECTORS ]
    (54) FUNCTION_CALL -> . FUNCTION_NAME ( TERM )
    (55) FUNCTION_NAME -> . ZEROS
    (56) FUNCTION_NAME -> . ONES
    (57) FUNCTION_NAME -> . EYE

    (               shift and go to state 55
    RETURN          shift and go to state 57
    ID              shift and go to state 34
    INTNUM          shift and go to state 35
    FLOATNUM        shift and go to state 36
    STRING          shift and go to state 37
    -               shift and go to state 40
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45

    LOGICAL_EXPRESSION             shift and go to state 143
    EXPRESSION                     shift and go to state 60
    BINARY_EXPRESSION              shift and go to state 52
    MATRIX_EXPRESSION              shift and go to state 54
    TERM                           shift and go to state 56
    MATRIX                         shift and go to state 38
    FUNCTION_CALL                  shift and go to state 39
    FUNCTION_NAME                  shift and go to state 42

state 138

    (66) IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } . ELIF_STATEMENTS ELSE_STATEMENT
    (67) ELIF_STATEMENTS -> . ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS
    (68) ELIF_STATEMENTS -> . ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS
    (69) ELIF_STATEMENTS -> . ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION
    (70) ELIF_STATEMENTS -> . ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS }

    ELSEIF          shift and go to state 130

    ELIF_STATEMENTS                shift and go to state 144

state 139

    (77) WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .

    {               reduce using rule 77 (WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .)
    ID              reduce using rule 77 (WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .)
    IF              reduce using rule 77 (WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .)
    FOR             reduce using rule 77 (WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .)
    WHILE           reduce using rule 77 (WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .)
    BREAK           reduce using rule 77 (WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .)
    CONTINUE        reduce using rule 77 (WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .)
    RETURN          reduce using rule 77 (WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .)
    PRINT           reduce using rule 77 (WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .)
    $end            reduce using rule 77 (WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .)
    }               reduce using rule 77 (WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .)
    ELSEIF          reduce using rule 77 (WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .)
    ELSE            reduce using rule 77 (WHILE_LOOP -> WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .)


state 140

    (13) ASSIGN -> ID [ INTNUM , INTNUM ] ASSIGN_TYPE EXPRESSION .
    (24) BINARY_EXPRESSION -> EXPRESSION . + EXPRESSION
    (25) BINARY_EXPRESSION -> EXPRESSION . - EXPRESSION
    (26) BINARY_EXPRESSION -> EXPRESSION . * EXPRESSION
    (27) BINARY_EXPRESSION -> EXPRESSION . / EXPRESSION
    (28) LOGICAL_EXPRESSION -> EXPRESSION . > EXPRESSION
    (29) LOGICAL_EXPRESSION -> EXPRESSION . < EXPRESSION
    (30) LOGICAL_EXPRESSION -> EXPRESSION . EQORGT EXPRESSION
    (31) LOGICAL_EXPRESSION -> EXPRESSION . EQORLESS EXPRESSION
    (32) LOGICAL_EXPRESSION -> EXPRESSION . EQUAL EXPRESSION
    (33) LOGICAL_EXPRESSION -> EXPRESSION . NOTEQUAL EXPRESSION
    (34) MATRIX_EXPRESSION -> EXPRESSION . DOTADD EXPRESSION
    (35) MATRIX_EXPRESSION -> EXPRESSION . DOTSUB EXPRESSION
    (36) MATRIX_EXPRESSION -> EXPRESSION . DOTMUL EXPRESSION
    (37) MATRIX_EXPRESSION -> EXPRESSION . DOTDIV EXPRESSION

    ;               reduce using rule 13 (ASSIGN -> ID [ INTNUM , INTNUM ] ASSIGN_TYPE EXPRESSION .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    >               shift and go to state 76
    <               shift and go to state 77
    EQORGT          shift and go to state 78
    EQORLESS        shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    DOTADD          shift and go to state 82
    DOTSUB          shift and go to state 83
    DOTMUL          shift and go to state 84
    DOTDIV          shift and go to state 85


state 141

    (71) ELSE_STATEMENT -> ELSE INSTRUCTION .

    {               reduce using rule 71 (ELSE_STATEMENT -> ELSE INSTRUCTION .)
    ID              reduce using rule 71 (ELSE_STATEMENT -> ELSE INSTRUCTION .)
    IF              reduce using rule 71 (ELSE_STATEMENT -> ELSE INSTRUCTION .)
    FOR             reduce using rule 71 (ELSE_STATEMENT -> ELSE INSTRUCTION .)
    WHILE           reduce using rule 71 (ELSE_STATEMENT -> ELSE INSTRUCTION .)
    BREAK           reduce using rule 71 (ELSE_STATEMENT -> ELSE INSTRUCTION .)
    CONTINUE        reduce using rule 71 (ELSE_STATEMENT -> ELSE INSTRUCTION .)
    RETURN          reduce using rule 71 (ELSE_STATEMENT -> ELSE INSTRUCTION .)
    PRINT           reduce using rule 71 (ELSE_STATEMENT -> ELSE INSTRUCTION .)
    $end            reduce using rule 71 (ELSE_STATEMENT -> ELSE INSTRUCTION .)
    }               reduce using rule 71 (ELSE_STATEMENT -> ELSE INSTRUCTION .)
    ELSEIF          reduce using rule 71 (ELSE_STATEMENT -> ELSE INSTRUCTION .)
    ELSE            reduce using rule 71 (ELSE_STATEMENT -> ELSE INSTRUCTION .)


state 142

    (72) ELSE_STATEMENT -> ELSE { . INSTRUCTIONS }
    (2) INSTRUCTIONS -> . { INSTRUCTIONS }
    (3) INSTRUCTIONS -> . INSTRUCTION INSTRUCTIONS
    (4) INSTRUCTIONS -> . INSTRUCTION
    (5) INSTRUCTION -> . ASSIGN ;
    (6) INSTRUCTION -> . IF_CONDITION
    (7) INSTRUCTION -> . FOR_LOOP
    (8) INSTRUCTION -> . WHILE_LOOP
    (9) INSTRUCTION -> . CONTROL_INSTRUCTION ;
    (10) INSTRUCTION -> . PRINT_CALL ;
    (11) ASSIGN -> . ID ASSIGN_TYPE EXPRESSION
    (12) ASSIGN -> . ID [ INTNUM ] ASSIGN_TYPE EXPRESSION
    (13) ASSIGN -> . ID [ INTNUM , INTNUM ] ASSIGN_TYPE EXPRESSION
    (65) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT
    (66) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT
    (74) FOR_LOOP -> . FOR FOR_CONDITION { INSTRUCTIONS }
    (75) FOR_LOOP -> . FOR FOR_CONDITION INSTRUCTION
    (77) WHILE_LOOP -> . WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS }
    (78) WHILE_LOOP -> . WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION
    (58) CONTROL_INSTRUCTION -> . BREAK
    (59) CONTROL_INSTRUCTION -> . CONTINUE
    (60) CONTROL_INSTRUCTION -> . RETURN
    (61) CONTROL_INSTRUCTION -> . RETURN TERM
    (62) PRINT_CALL -> . PRINT PRINT_TERMS

    {               shift and go to state 3
    ID              shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18

    INSTRUCTIONS                   shift and go to state 145
    INSTRUCTION                    shift and go to state 4
    ASSIGN                         shift and go to state 5
    IF_CONDITION                   shift and go to state 6
    FOR_LOOP                       shift and go to state 7
    WHILE_LOOP                     shift and go to state 8
    CONTROL_INSTRUCTION            shift and go to state 9
    PRINT_CALL                     shift and go to state 10

state 143

    (67) ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION . ) INSTRUCTION ELIF_STATEMENTS
    (68) ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION . ) { INSTRUCTIONS } ELIF_STATEMENTS
    (69) ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION . ) INSTRUCTION
    (70) ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION . ) { INSTRUCTIONS }
    (20) EXPRESSION -> LOGICAL_EXPRESSION .

    )               shift and go to state 146
    >               reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    <               reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    EQORGT          reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    EQORLESS        reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    EQUAL           reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    NOTEQUAL        reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    +               reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    -               reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    *               reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    /               reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    DOTADD          reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    DOTSUB          reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    DOTMUL          reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)
    DOTDIV          reduce using rule 20 (EXPRESSION -> LOGICAL_EXPRESSION .)


state 144

    (66) IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS . ELSE_STATEMENT
    (71) ELSE_STATEMENT -> . ELSE INSTRUCTION
    (72) ELSE_STATEMENT -> . ELSE { INSTRUCTIONS }
    (73) ELSE_STATEMENT -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 136
    {               reduce using rule 73 (ELSE_STATEMENT -> .)
    ID              reduce using rule 73 (ELSE_STATEMENT -> .)
    IF              reduce using rule 73 (ELSE_STATEMENT -> .)
    FOR             reduce using rule 73 (ELSE_STATEMENT -> .)
    WHILE           reduce using rule 73 (ELSE_STATEMENT -> .)
    BREAK           reduce using rule 73 (ELSE_STATEMENT -> .)
    CONTINUE        reduce using rule 73 (ELSE_STATEMENT -> .)
    RETURN          reduce using rule 73 (ELSE_STATEMENT -> .)
    PRINT           reduce using rule 73 (ELSE_STATEMENT -> .)
    $end            reduce using rule 73 (ELSE_STATEMENT -> .)
    }               reduce using rule 73 (ELSE_STATEMENT -> .)
    ELSEIF          reduce using rule 73 (ELSE_STATEMENT -> .)

  ! ELSE            [ reduce using rule 73 (ELSE_STATEMENT -> .) ]

    ELSE_STATEMENT                 shift and go to state 147

state 145

    (72) ELSE_STATEMENT -> ELSE { INSTRUCTIONS . }

    }               shift and go to state 148


state 146

    (67) ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) . INSTRUCTION ELIF_STATEMENTS
    (68) ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) . { INSTRUCTIONS } ELIF_STATEMENTS
    (69) ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) . INSTRUCTION
    (70) ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) . { INSTRUCTIONS }
    (5) INSTRUCTION -> . ASSIGN ;
    (6) INSTRUCTION -> . IF_CONDITION
    (7) INSTRUCTION -> . FOR_LOOP
    (8) INSTRUCTION -> . WHILE_LOOP
    (9) INSTRUCTION -> . CONTROL_INSTRUCTION ;
    (10) INSTRUCTION -> . PRINT_CALL ;
    (11) ASSIGN -> . ID ASSIGN_TYPE EXPRESSION
    (12) ASSIGN -> . ID [ INTNUM ] ASSIGN_TYPE EXPRESSION
    (13) ASSIGN -> . ID [ INTNUM , INTNUM ] ASSIGN_TYPE EXPRESSION
    (65) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT
    (66) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT
    (74) FOR_LOOP -> . FOR FOR_CONDITION { INSTRUCTIONS }
    (75) FOR_LOOP -> . FOR FOR_CONDITION INSTRUCTION
    (77) WHILE_LOOP -> . WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS }
    (78) WHILE_LOOP -> . WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION
    (58) CONTROL_INSTRUCTION -> . BREAK
    (59) CONTROL_INSTRUCTION -> . CONTINUE
    (60) CONTROL_INSTRUCTION -> . RETURN
    (61) CONTROL_INSTRUCTION -> . RETURN TERM
    (62) PRINT_CALL -> . PRINT PRINT_TERMS

    {               shift and go to state 150
    ID              shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18

    INSTRUCTION                    shift and go to state 149
    ASSIGN                         shift and go to state 5
    IF_CONDITION                   shift and go to state 6
    FOR_LOOP                       shift and go to state 7
    WHILE_LOOP                     shift and go to state 8
    CONTROL_INSTRUCTION            shift and go to state 9
    PRINT_CALL                     shift and go to state 10

state 147

    (66) IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT .

    {               reduce using rule 66 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT .)
    ID              reduce using rule 66 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT .)
    IF              reduce using rule 66 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT .)
    FOR             reduce using rule 66 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT .)
    WHILE           reduce using rule 66 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT .)
    BREAK           reduce using rule 66 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT .)
    CONTINUE        reduce using rule 66 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT .)
    RETURN          reduce using rule 66 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT .)
    PRINT           reduce using rule 66 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT .)
    $end            reduce using rule 66 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT .)
    }               reduce using rule 66 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT .)
    ELSEIF          reduce using rule 66 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT .)
    ELSE            reduce using rule 66 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT .)


state 148

    (72) ELSE_STATEMENT -> ELSE { INSTRUCTIONS } .

    {               reduce using rule 72 (ELSE_STATEMENT -> ELSE { INSTRUCTIONS } .)
    ID              reduce using rule 72 (ELSE_STATEMENT -> ELSE { INSTRUCTIONS } .)
    IF              reduce using rule 72 (ELSE_STATEMENT -> ELSE { INSTRUCTIONS } .)
    FOR             reduce using rule 72 (ELSE_STATEMENT -> ELSE { INSTRUCTIONS } .)
    WHILE           reduce using rule 72 (ELSE_STATEMENT -> ELSE { INSTRUCTIONS } .)
    BREAK           reduce using rule 72 (ELSE_STATEMENT -> ELSE { INSTRUCTIONS } .)
    CONTINUE        reduce using rule 72 (ELSE_STATEMENT -> ELSE { INSTRUCTIONS } .)
    RETURN          reduce using rule 72 (ELSE_STATEMENT -> ELSE { INSTRUCTIONS } .)
    PRINT           reduce using rule 72 (ELSE_STATEMENT -> ELSE { INSTRUCTIONS } .)
    $end            reduce using rule 72 (ELSE_STATEMENT -> ELSE { INSTRUCTIONS } .)
    }               reduce using rule 72 (ELSE_STATEMENT -> ELSE { INSTRUCTIONS } .)
    ELSEIF          reduce using rule 72 (ELSE_STATEMENT -> ELSE { INSTRUCTIONS } .)
    ELSE            reduce using rule 72 (ELSE_STATEMENT -> ELSE { INSTRUCTIONS } .)


state 149

    (67) ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION . ELIF_STATEMENTS
    (69) ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION .
    (67) ELIF_STATEMENTS -> . ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS
    (68) ELIF_STATEMENTS -> . ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS
    (69) ELIF_STATEMENTS -> . ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION
    (70) ELIF_STATEMENTS -> . ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS }

  ! shift/reduce conflict for ELSEIF resolved as shift
    {               reduce using rule 69 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION .)
    ID              reduce using rule 69 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION .)
    IF              reduce using rule 69 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION .)
    FOR             reduce using rule 69 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION .)
    WHILE           reduce using rule 69 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION .)
    BREAK           reduce using rule 69 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION .)
    CONTINUE        reduce using rule 69 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION .)
    RETURN          reduce using rule 69 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION .)
    PRINT           reduce using rule 69 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION .)
    $end            reduce using rule 69 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION .)
    }               reduce using rule 69 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION .)
    ELSE            reduce using rule 69 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION .)
    ELSEIF          shift and go to state 130

  ! ELSEIF          [ reduce using rule 69 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION .) ]

    ELIF_STATEMENTS                shift and go to state 151

state 150

    (68) ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { . INSTRUCTIONS } ELIF_STATEMENTS
    (70) ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { . INSTRUCTIONS }
    (2) INSTRUCTIONS -> . { INSTRUCTIONS }
    (3) INSTRUCTIONS -> . INSTRUCTION INSTRUCTIONS
    (4) INSTRUCTIONS -> . INSTRUCTION
    (5) INSTRUCTION -> . ASSIGN ;
    (6) INSTRUCTION -> . IF_CONDITION
    (7) INSTRUCTION -> . FOR_LOOP
    (8) INSTRUCTION -> . WHILE_LOOP
    (9) INSTRUCTION -> . CONTROL_INSTRUCTION ;
    (10) INSTRUCTION -> . PRINT_CALL ;
    (11) ASSIGN -> . ID ASSIGN_TYPE EXPRESSION
    (12) ASSIGN -> . ID [ INTNUM ] ASSIGN_TYPE EXPRESSION
    (13) ASSIGN -> . ID [ INTNUM , INTNUM ] ASSIGN_TYPE EXPRESSION
    (65) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS ELSE_STATEMENT
    (66) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS ELSE_STATEMENT
    (74) FOR_LOOP -> . FOR FOR_CONDITION { INSTRUCTIONS }
    (75) FOR_LOOP -> . FOR FOR_CONDITION INSTRUCTION
    (77) WHILE_LOOP -> . WHILE ( LOGICAL_EXPRESSION ) { INSTRUCTIONS }
    (78) WHILE_LOOP -> . WHILE ( LOGICAL_EXPRESSION ) INSTRUCTION
    (58) CONTROL_INSTRUCTION -> . BREAK
    (59) CONTROL_INSTRUCTION -> . CONTINUE
    (60) CONTROL_INSTRUCTION -> . RETURN
    (61) CONTROL_INSTRUCTION -> . RETURN TERM
    (62) PRINT_CALL -> . PRINT PRINT_TERMS

    {               shift and go to state 3
    ID              shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18

    INSTRUCTIONS                   shift and go to state 152
    INSTRUCTION                    shift and go to state 4
    ASSIGN                         shift and go to state 5
    IF_CONDITION                   shift and go to state 6
    FOR_LOOP                       shift and go to state 7
    WHILE_LOOP                     shift and go to state 8
    CONTROL_INSTRUCTION            shift and go to state 9
    PRINT_CALL                     shift and go to state 10

state 151

    (67) ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS .

    {               reduce using rule 67 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS .)
    ID              reduce using rule 67 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS .)
    IF              reduce using rule 67 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS .)
    FOR             reduce using rule 67 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS .)
    WHILE           reduce using rule 67 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS .)
    BREAK           reduce using rule 67 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS .)
    CONTINUE        reduce using rule 67 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS .)
    RETURN          reduce using rule 67 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS .)
    PRINT           reduce using rule 67 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS .)
    $end            reduce using rule 67 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS .)
    }               reduce using rule 67 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS .)
    ELSEIF          reduce using rule 67 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS .)
    ELSE            reduce using rule 67 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS .)


state 152

    (68) ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS . } ELIF_STATEMENTS
    (70) ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS . }

    }               shift and go to state 153


state 153

    (68) ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } . ELIF_STATEMENTS
    (70) ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .
    (67) ELIF_STATEMENTS -> . ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION ELIF_STATEMENTS
    (68) ELIF_STATEMENTS -> . ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS
    (69) ELIF_STATEMENTS -> . ELSEIF ( LOGICAL_EXPRESSION ) INSTRUCTION
    (70) ELIF_STATEMENTS -> . ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS }

  ! shift/reduce conflict for ELSEIF resolved as shift
    {               reduce using rule 70 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .)
    ID              reduce using rule 70 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .)
    IF              reduce using rule 70 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .)
    FOR             reduce using rule 70 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .)
    WHILE           reduce using rule 70 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .)
    BREAK           reduce using rule 70 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .)
    CONTINUE        reduce using rule 70 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .)
    RETURN          reduce using rule 70 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .)
    PRINT           reduce using rule 70 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .)
    $end            reduce using rule 70 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .)
    }               reduce using rule 70 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .)
    ELSE            reduce using rule 70 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .)
    ELSEIF          shift and go to state 130

  ! ELSEIF          [ reduce using rule 70 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } .) ]

    ELIF_STATEMENTS                shift and go to state 154

state 154

    (68) ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS .

    {               reduce using rule 68 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS .)
    ID              reduce using rule 68 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS .)
    IF              reduce using rule 68 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS .)
    FOR             reduce using rule 68 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS .)
    WHILE           reduce using rule 68 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS .)
    BREAK           reduce using rule 68 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS .)
    CONTINUE        reduce using rule 68 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS .)
    RETURN          reduce using rule 68 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS .)
    PRINT           reduce using rule 68 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS .)
    $end            reduce using rule 68 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS .)
    }               reduce using rule 68 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS .)
    ELSEIF          reduce using rule 68 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS .)
    ELSE            reduce using rule 68 (ELIF_STATEMENTS -> ELSEIF ( LOGICAL_EXPRESSION ) { INSTRUCTIONS } ELIF_STATEMENTS .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 101 resolved as shift
WARNING: shift/reduce conflict for - in state 101 resolved as shift
WARNING: shift/reduce conflict for * in state 101 resolved as shift
WARNING: shift/reduce conflict for / in state 101 resolved as shift
WARNING: shift/reduce conflict for > in state 101 resolved as shift
WARNING: shift/reduce conflict for < in state 101 resolved as shift
WARNING: shift/reduce conflict for EQORGT in state 101 resolved as shift
WARNING: shift/reduce conflict for EQORLESS in state 101 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for DOTADD in state 101 resolved as shift
WARNING: shift/reduce conflict for DOTSUB in state 101 resolved as shift
WARNING: shift/reduce conflict for DOTMUL in state 101 resolved as shift
WARNING: shift/reduce conflict for DOTDIV in state 101 resolved as shift
WARNING: shift/reduce conflict for + in state 102 resolved as shift
WARNING: shift/reduce conflict for - in state 102 resolved as shift
WARNING: shift/reduce conflict for * in state 102 resolved as shift
WARNING: shift/reduce conflict for / in state 102 resolved as shift
WARNING: shift/reduce conflict for > in state 102 resolved as shift
WARNING: shift/reduce conflict for < in state 102 resolved as shift
WARNING: shift/reduce conflict for EQORGT in state 102 resolved as shift
WARNING: shift/reduce conflict for EQORLESS in state 102 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for DOTADD in state 102 resolved as shift
WARNING: shift/reduce conflict for DOTSUB in state 102 resolved as shift
WARNING: shift/reduce conflict for DOTMUL in state 102 resolved as shift
WARNING: shift/reduce conflict for DOTDIV in state 102 resolved as shift
WARNING: shift/reduce conflict for + in state 103 resolved as shift
WARNING: shift/reduce conflict for - in state 103 resolved as shift
WARNING: shift/reduce conflict for * in state 103 resolved as shift
WARNING: shift/reduce conflict for / in state 103 resolved as shift
WARNING: shift/reduce conflict for > in state 103 resolved as shift
WARNING: shift/reduce conflict for < in state 103 resolved as shift
WARNING: shift/reduce conflict for EQORGT in state 103 resolved as shift
WARNING: shift/reduce conflict for EQORLESS in state 103 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for DOTADD in state 103 resolved as shift
WARNING: shift/reduce conflict for DOTSUB in state 103 resolved as shift
WARNING: shift/reduce conflict for DOTMUL in state 103 resolved as shift
WARNING: shift/reduce conflict for DOTDIV in state 103 resolved as shift
WARNING: shift/reduce conflict for + in state 104 resolved as shift
WARNING: shift/reduce conflict for - in state 104 resolved as shift
WARNING: shift/reduce conflict for * in state 104 resolved as shift
WARNING: shift/reduce conflict for / in state 104 resolved as shift
WARNING: shift/reduce conflict for > in state 104 resolved as shift
WARNING: shift/reduce conflict for < in state 104 resolved as shift
WARNING: shift/reduce conflict for EQORGT in state 104 resolved as shift
WARNING: shift/reduce conflict for EQORLESS in state 104 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for DOTADD in state 104 resolved as shift
WARNING: shift/reduce conflict for DOTSUB in state 104 resolved as shift
WARNING: shift/reduce conflict for DOTMUL in state 104 resolved as shift
WARNING: shift/reduce conflict for DOTDIV in state 104 resolved as shift
WARNING: shift/reduce conflict for + in state 105 resolved as shift
WARNING: shift/reduce conflict for - in state 105 resolved as shift
WARNING: shift/reduce conflict for * in state 105 resolved as shift
WARNING: shift/reduce conflict for / in state 105 resolved as shift
WARNING: shift/reduce conflict for > in state 105 resolved as shift
WARNING: shift/reduce conflict for < in state 105 resolved as shift
WARNING: shift/reduce conflict for EQORGT in state 105 resolved as shift
WARNING: shift/reduce conflict for EQORLESS in state 105 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 105 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 105 resolved as shift
WARNING: shift/reduce conflict for DOTADD in state 105 resolved as shift
WARNING: shift/reduce conflict for DOTSUB in state 105 resolved as shift
WARNING: shift/reduce conflict for DOTMUL in state 105 resolved as shift
WARNING: shift/reduce conflict for DOTDIV in state 105 resolved as shift
WARNING: shift/reduce conflict for + in state 106 resolved as shift
WARNING: shift/reduce conflict for - in state 106 resolved as shift
WARNING: shift/reduce conflict for * in state 106 resolved as shift
WARNING: shift/reduce conflict for / in state 106 resolved as shift
WARNING: shift/reduce conflict for > in state 106 resolved as shift
WARNING: shift/reduce conflict for < in state 106 resolved as shift
WARNING: shift/reduce conflict for EQORGT in state 106 resolved as shift
WARNING: shift/reduce conflict for EQORLESS in state 106 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for DOTADD in state 106 resolved as shift
WARNING: shift/reduce conflict for DOTSUB in state 106 resolved as shift
WARNING: shift/reduce conflict for DOTMUL in state 106 resolved as shift
WARNING: shift/reduce conflict for DOTDIV in state 106 resolved as shift
WARNING: shift/reduce conflict for + in state 107 resolved as shift
WARNING: shift/reduce conflict for - in state 107 resolved as shift
WARNING: shift/reduce conflict for * in state 107 resolved as shift
WARNING: shift/reduce conflict for / in state 107 resolved as shift
WARNING: shift/reduce conflict for > in state 107 resolved as shift
WARNING: shift/reduce conflict for < in state 107 resolved as shift
WARNING: shift/reduce conflict for EQORGT in state 107 resolved as shift
WARNING: shift/reduce conflict for EQORLESS in state 107 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for DOTADD in state 107 resolved as shift
WARNING: shift/reduce conflict for DOTSUB in state 107 resolved as shift
WARNING: shift/reduce conflict for DOTMUL in state 107 resolved as shift
WARNING: shift/reduce conflict for DOTDIV in state 107 resolved as shift
WARNING: shift/reduce conflict for + in state 108 resolved as shift
WARNING: shift/reduce conflict for - in state 108 resolved as shift
WARNING: shift/reduce conflict for * in state 108 resolved as shift
WARNING: shift/reduce conflict for / in state 108 resolved as shift
WARNING: shift/reduce conflict for > in state 108 resolved as shift
WARNING: shift/reduce conflict for < in state 108 resolved as shift
WARNING: shift/reduce conflict for EQORGT in state 108 resolved as shift
WARNING: shift/reduce conflict for EQORLESS in state 108 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for DOTADD in state 108 resolved as shift
WARNING: shift/reduce conflict for DOTSUB in state 108 resolved as shift
WARNING: shift/reduce conflict for DOTMUL in state 108 resolved as shift
WARNING: shift/reduce conflict for DOTDIV in state 108 resolved as shift
WARNING: shift/reduce conflict for + in state 109 resolved as shift
WARNING: shift/reduce conflict for - in state 109 resolved as shift
WARNING: shift/reduce conflict for * in state 109 resolved as shift
WARNING: shift/reduce conflict for / in state 109 resolved as shift
WARNING: shift/reduce conflict for > in state 109 resolved as shift
WARNING: shift/reduce conflict for < in state 109 resolved as shift
WARNING: shift/reduce conflict for EQORGT in state 109 resolved as shift
WARNING: shift/reduce conflict for EQORLESS in state 109 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for DOTADD in state 109 resolved as shift
WARNING: shift/reduce conflict for DOTSUB in state 109 resolved as shift
WARNING: shift/reduce conflict for DOTMUL in state 109 resolved as shift
WARNING: shift/reduce conflict for DOTDIV in state 109 resolved as shift
WARNING: shift/reduce conflict for + in state 110 resolved as shift
WARNING: shift/reduce conflict for - in state 110 resolved as shift
WARNING: shift/reduce conflict for * in state 110 resolved as shift
WARNING: shift/reduce conflict for / in state 110 resolved as shift
WARNING: shift/reduce conflict for > in state 110 resolved as shift
WARNING: shift/reduce conflict for < in state 110 resolved as shift
WARNING: shift/reduce conflict for EQORGT in state 110 resolved as shift
WARNING: shift/reduce conflict for EQORLESS in state 110 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for DOTADD in state 110 resolved as shift
WARNING: shift/reduce conflict for DOTSUB in state 110 resolved as shift
WARNING: shift/reduce conflict for DOTMUL in state 110 resolved as shift
WARNING: shift/reduce conflict for DOTDIV in state 110 resolved as shift
WARNING: shift/reduce conflict for + in state 111 resolved as shift
WARNING: shift/reduce conflict for - in state 111 resolved as shift
WARNING: shift/reduce conflict for * in state 111 resolved as shift
WARNING: shift/reduce conflict for / in state 111 resolved as shift
WARNING: shift/reduce conflict for > in state 111 resolved as shift
WARNING: shift/reduce conflict for < in state 111 resolved as shift
WARNING: shift/reduce conflict for EQORGT in state 111 resolved as shift
WARNING: shift/reduce conflict for EQORLESS in state 111 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for DOTADD in state 111 resolved as shift
WARNING: shift/reduce conflict for DOTSUB in state 111 resolved as shift
WARNING: shift/reduce conflict for DOTMUL in state 111 resolved as shift
WARNING: shift/reduce conflict for DOTDIV in state 111 resolved as shift
WARNING: shift/reduce conflict for + in state 112 resolved as shift
WARNING: shift/reduce conflict for - in state 112 resolved as shift
WARNING: shift/reduce conflict for * in state 112 resolved as shift
WARNING: shift/reduce conflict for / in state 112 resolved as shift
WARNING: shift/reduce conflict for > in state 112 resolved as shift
WARNING: shift/reduce conflict for < in state 112 resolved as shift
WARNING: shift/reduce conflict for EQORGT in state 112 resolved as shift
WARNING: shift/reduce conflict for EQORLESS in state 112 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 112 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 112 resolved as shift
WARNING: shift/reduce conflict for DOTADD in state 112 resolved as shift
WARNING: shift/reduce conflict for DOTSUB in state 112 resolved as shift
WARNING: shift/reduce conflict for DOTMUL in state 112 resolved as shift
WARNING: shift/reduce conflict for DOTDIV in state 112 resolved as shift
WARNING: shift/reduce conflict for + in state 113 resolved as shift
WARNING: shift/reduce conflict for - in state 113 resolved as shift
WARNING: shift/reduce conflict for * in state 113 resolved as shift
WARNING: shift/reduce conflict for / in state 113 resolved as shift
WARNING: shift/reduce conflict for > in state 113 resolved as shift
WARNING: shift/reduce conflict for < in state 113 resolved as shift
WARNING: shift/reduce conflict for EQORGT in state 113 resolved as shift
WARNING: shift/reduce conflict for EQORLESS in state 113 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 113 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 113 resolved as shift
WARNING: shift/reduce conflict for DOTADD in state 113 resolved as shift
WARNING: shift/reduce conflict for DOTSUB in state 113 resolved as shift
WARNING: shift/reduce conflict for DOTMUL in state 113 resolved as shift
WARNING: shift/reduce conflict for DOTDIV in state 113 resolved as shift
WARNING: shift/reduce conflict for + in state 114 resolved as shift
WARNING: shift/reduce conflict for - in state 114 resolved as shift
WARNING: shift/reduce conflict for * in state 114 resolved as shift
WARNING: shift/reduce conflict for / in state 114 resolved as shift
WARNING: shift/reduce conflict for > in state 114 resolved as shift
WARNING: shift/reduce conflict for < in state 114 resolved as shift
WARNING: shift/reduce conflict for EQORGT in state 114 resolved as shift
WARNING: shift/reduce conflict for EQORLESS in state 114 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 114 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 114 resolved as shift
WARNING: shift/reduce conflict for DOTADD in state 114 resolved as shift
WARNING: shift/reduce conflict for DOTSUB in state 114 resolved as shift
WARNING: shift/reduce conflict for DOTMUL in state 114 resolved as shift
WARNING: shift/reduce conflict for DOTDIV in state 114 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 129 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 144 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 149 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 153 resolved as shift
