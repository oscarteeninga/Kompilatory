Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CONTINUE
    ELSEIF
    EQORGT
    EQORLESS
    FOR
    NOTEQUAL
    RETURN
    WHILE

Grammar

Rule 0     S' -> EXPRESSION
Rule 1     EXPRESSION -> TERM
Rule 2     EXPRESSION -> EXPRESSION TERM
Rule 3     EXPRESSION -> EXPRESSION IF_CONDITION
Rule 4     TERM -> STATEMENT
Rule 5     TERM -> PRINT
Rule 6     VAR -> NUM
Rule 7     VAR -> MATRIX
Rule 8     NUM -> INTNUM
Rule 9     NUM -> FLOATNUM
Rule 10    VECTOR -> VECTOR , NUM
Rule 11    VECTOR -> NUM
Rule 12    VECTORS -> VECTORS ; VECTOR
Rule 13    VECTORS -> VECTOR
Rule 14    MATRIX -> [ VECTORS ]
Rule 15    MATRIX -> ZEROS ( INTNUM )
Rule 16    MATRIX -> ONES ( INTNUM )
Rule 17    MATRIX -> EYE ( INTNUM )
Rule 18    MATRIX -> - ID
Rule 19    MATRIX -> ID '
Rule 20    VAR -> ID + ID
Rule 21    VAR -> ID - ID
Rule 22    VAR -> ID * ID
Rule 23    VAR -> ID / ID
Rule 24    MATRIX -> ID DOTADD ID
Rule 25    MATRIX -> ID DOTSUB ID
Rule 26    MATRIX -> ID DOTMUL ID
Rule 27    MATRIX -> ID DOTDIV ID
Rule 28    STATEMENT -> ID = VAR ;
Rule 29    STATEMENT -> ID [ INTNUM , INTNUM ] = NUM ;
Rule 30    STATEMENT -> ID ADDASSIGN ID ;
Rule 31    STATEMENT -> ID SUBASSIGN ID ;
Rule 32    STATEMENT -> ID MULASSIGN ID ;
Rule 33    STATEMENT -> ID DIVASSIGN ID ;
Rule 34    TERM -> PRINT ( ID ) ;
Rule 35    TERM -> PRINT ( VAR ) ;
Rule 36    TERM -> PRINT ( STRING ) ;
Rule 37    IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) EXPRESSION ELSE_STATEMENT
Rule 38    ELSE_STATEMENT -> ELSE EXPRESSION
Rule 39    ELSE_STATEMENT -> <empty>
Rule 40    LOGICAL_EXPRESSION -> ID EQUAL INTNUM

Terminals, with rules where they appear

'                    : 19
(                    : 15 16 17 34 35 36 37
)                    : 15 16 17 34 35 36 37
*                    : 22
+                    : 20
,                    : 10 29
-                    : 18 21
/                    : 23
;                    : 12 28 29 30 31 32 33 34 35 36
=                    : 28 29
ADDASSIGN            : 30
BREAK                : 
CONTINUE             : 
DIVASSIGN            : 33
DOTADD               : 24
DOTDIV               : 27
DOTMUL               : 26
DOTSUB               : 25
ELSE                 : 38
ELSEIF               : 
EQORGT               : 
EQORLESS             : 
EQUAL                : 40
EYE                  : 17
FLOATNUM             : 9
FOR                  : 
ID                   : 18 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 29 30 30 31 31 32 32 33 33 34 40
IF                   : 37
INTNUM               : 8 15 16 17 29 29 40
MULASSIGN            : 32
NOTEQUAL             : 
ONES                 : 16
PRINT                : 5 34 35 36
RETURN               : 
STRING               : 36
SUBASSIGN            : 31
WHILE                : 
ZEROS                : 15
[                    : 14 29
]                    : 14 29
error                : 

Nonterminals, with rules where they appear

ELSE_STATEMENT       : 37
EXPRESSION           : 2 3 37 38 0
IF_CONDITION         : 3
LOGICAL_EXPRESSION   : 37
MATRIX               : 7
NUM                  : 6 10 11 29
STATEMENT            : 4
TERM                 : 1 2
VAR                  : 28 35
VECTOR               : 10 12 13
VECTORS              : 12 14

Parsing method: LALR

state 0

    (0) S' -> . EXPRESSION
    (1) EXPRESSION -> . TERM
    (2) EXPRESSION -> . EXPRESSION TERM
    (3) EXPRESSION -> . EXPRESSION IF_CONDITION
    (4) TERM -> . STATEMENT
    (5) TERM -> . PRINT
    (34) TERM -> . PRINT ( ID ) ;
    (35) TERM -> . PRINT ( VAR ) ;
    (36) TERM -> . PRINT ( STRING ) ;
    (28) STATEMENT -> . ID = VAR ;
    (29) STATEMENT -> . ID [ INTNUM , INTNUM ] = NUM ;
    (30) STATEMENT -> . ID ADDASSIGN ID ;
    (31) STATEMENT -> . ID SUBASSIGN ID ;
    (32) STATEMENT -> . ID MULASSIGN ID ;
    (33) STATEMENT -> . ID DIVASSIGN ID ;

    PRINT           shift and go to state 4
    ID              shift and go to state 5

    EXPRESSION                     shift and go to state 1
    TERM                           shift and go to state 2
    STATEMENT                      shift and go to state 3

state 1

    (0) S' -> EXPRESSION .
    (2) EXPRESSION -> EXPRESSION . TERM
    (3) EXPRESSION -> EXPRESSION . IF_CONDITION
    (4) TERM -> . STATEMENT
    (5) TERM -> . PRINT
    (34) TERM -> . PRINT ( ID ) ;
    (35) TERM -> . PRINT ( VAR ) ;
    (36) TERM -> . PRINT ( STRING ) ;
    (37) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) EXPRESSION ELSE_STATEMENT
    (28) STATEMENT -> . ID = VAR ;
    (29) STATEMENT -> . ID [ INTNUM , INTNUM ] = NUM ;
    (30) STATEMENT -> . ID ADDASSIGN ID ;
    (31) STATEMENT -> . ID SUBASSIGN ID ;
    (32) STATEMENT -> . ID MULASSIGN ID ;
    (33) STATEMENT -> . ID DIVASSIGN ID ;

    PRINT           shift and go to state 4
    IF              shift and go to state 8
    ID              shift and go to state 5

    TERM                           shift and go to state 6
    IF_CONDITION                   shift and go to state 7
    STATEMENT                      shift and go to state 3

state 2

    (1) EXPRESSION -> TERM .

    PRINT           reduce using rule 1 (EXPRESSION -> TERM .)
    IF              reduce using rule 1 (EXPRESSION -> TERM .)
    ID              reduce using rule 1 (EXPRESSION -> TERM .)
    $end            reduce using rule 1 (EXPRESSION -> TERM .)
    ELSE            reduce using rule 1 (EXPRESSION -> TERM .)


state 3

    (4) TERM -> STATEMENT .

    PRINT           reduce using rule 4 (TERM -> STATEMENT .)
    IF              reduce using rule 4 (TERM -> STATEMENT .)
    ID              reduce using rule 4 (TERM -> STATEMENT .)
    $end            reduce using rule 4 (TERM -> STATEMENT .)
    ELSE            reduce using rule 4 (TERM -> STATEMENT .)


state 4

    (5) TERM -> PRINT .
    (34) TERM -> PRINT . ( ID ) ;
    (35) TERM -> PRINT . ( VAR ) ;
    (36) TERM -> PRINT . ( STRING ) ;

    PRINT           reduce using rule 5 (TERM -> PRINT .)
    IF              reduce using rule 5 (TERM -> PRINT .)
    ID              reduce using rule 5 (TERM -> PRINT .)
    $end            reduce using rule 5 (TERM -> PRINT .)
    ELSE            reduce using rule 5 (TERM -> PRINT .)
    (               shift and go to state 9


state 5

    (28) STATEMENT -> ID . = VAR ;
    (29) STATEMENT -> ID . [ INTNUM , INTNUM ] = NUM ;
    (30) STATEMENT -> ID . ADDASSIGN ID ;
    (31) STATEMENT -> ID . SUBASSIGN ID ;
    (32) STATEMENT -> ID . MULASSIGN ID ;
    (33) STATEMENT -> ID . DIVASSIGN ID ;

    =               shift and go to state 10
    [               shift and go to state 11
    ADDASSIGN       shift and go to state 12
    SUBASSIGN       shift and go to state 13
    MULASSIGN       shift and go to state 14
    DIVASSIGN       shift and go to state 15


state 6

    (2) EXPRESSION -> EXPRESSION TERM .

    PRINT           reduce using rule 2 (EXPRESSION -> EXPRESSION TERM .)
    IF              reduce using rule 2 (EXPRESSION -> EXPRESSION TERM .)
    ID              reduce using rule 2 (EXPRESSION -> EXPRESSION TERM .)
    $end            reduce using rule 2 (EXPRESSION -> EXPRESSION TERM .)
    ELSE            reduce using rule 2 (EXPRESSION -> EXPRESSION TERM .)


state 7

    (3) EXPRESSION -> EXPRESSION IF_CONDITION .

    PRINT           reduce using rule 3 (EXPRESSION -> EXPRESSION IF_CONDITION .)
    IF              reduce using rule 3 (EXPRESSION -> EXPRESSION IF_CONDITION .)
    ID              reduce using rule 3 (EXPRESSION -> EXPRESSION IF_CONDITION .)
    $end            reduce using rule 3 (EXPRESSION -> EXPRESSION IF_CONDITION .)
    ELSE            reduce using rule 3 (EXPRESSION -> EXPRESSION IF_CONDITION .)


state 8

    (37) IF_CONDITION -> IF . ( LOGICAL_EXPRESSION ) EXPRESSION ELSE_STATEMENT

    (               shift and go to state 16


state 9

    (34) TERM -> PRINT ( . ID ) ;
    (35) TERM -> PRINT ( . VAR ) ;
    (36) TERM -> PRINT ( . STRING ) ;
    (6) VAR -> . NUM
    (7) VAR -> . MATRIX
    (20) VAR -> . ID + ID
    (21) VAR -> . ID - ID
    (22) VAR -> . ID * ID
    (23) VAR -> . ID / ID
    (8) NUM -> . INTNUM
    (9) NUM -> . FLOATNUM
    (14) MATRIX -> . [ VECTORS ]
    (15) MATRIX -> . ZEROS ( INTNUM )
    (16) MATRIX -> . ONES ( INTNUM )
    (17) MATRIX -> . EYE ( INTNUM )
    (18) MATRIX -> . - ID
    (19) MATRIX -> . ID '
    (24) MATRIX -> . ID DOTADD ID
    (25) MATRIX -> . ID DOTSUB ID
    (26) MATRIX -> . ID DOTMUL ID
    (27) MATRIX -> . ID DOTDIV ID

    ID              shift and go to state 17
    STRING          shift and go to state 19
    INTNUM          shift and go to state 23
    FLOATNUM        shift and go to state 24
    [               shift and go to state 25
    ZEROS           shift and go to state 26
    ONES            shift and go to state 27
    EYE             shift and go to state 28
    -               shift and go to state 22

    VAR                            shift and go to state 18
    NUM                            shift and go to state 20
    MATRIX                         shift and go to state 21

state 10

    (28) STATEMENT -> ID = . VAR ;
    (6) VAR -> . NUM
    (7) VAR -> . MATRIX
    (20) VAR -> . ID + ID
    (21) VAR -> . ID - ID
    (22) VAR -> . ID * ID
    (23) VAR -> . ID / ID
    (8) NUM -> . INTNUM
    (9) NUM -> . FLOATNUM
    (14) MATRIX -> . [ VECTORS ]
    (15) MATRIX -> . ZEROS ( INTNUM )
    (16) MATRIX -> . ONES ( INTNUM )
    (17) MATRIX -> . EYE ( INTNUM )
    (18) MATRIX -> . - ID
    (19) MATRIX -> . ID '
    (24) MATRIX -> . ID DOTADD ID
    (25) MATRIX -> . ID DOTSUB ID
    (26) MATRIX -> . ID DOTMUL ID
    (27) MATRIX -> . ID DOTDIV ID

    ID              shift and go to state 29
    INTNUM          shift and go to state 23
    FLOATNUM        shift and go to state 24
    [               shift and go to state 25
    ZEROS           shift and go to state 26
    ONES            shift and go to state 27
    EYE             shift and go to state 28
    -               shift and go to state 22

    VAR                            shift and go to state 30
    NUM                            shift and go to state 20
    MATRIX                         shift and go to state 21

state 11

    (29) STATEMENT -> ID [ . INTNUM , INTNUM ] = NUM ;

    INTNUM          shift and go to state 31


state 12

    (30) STATEMENT -> ID ADDASSIGN . ID ;

    ID              shift and go to state 32


state 13

    (31) STATEMENT -> ID SUBASSIGN . ID ;

    ID              shift and go to state 33


state 14

    (32) STATEMENT -> ID MULASSIGN . ID ;

    ID              shift and go to state 34


state 15

    (33) STATEMENT -> ID DIVASSIGN . ID ;

    ID              shift and go to state 35


state 16

    (37) IF_CONDITION -> IF ( . LOGICAL_EXPRESSION ) EXPRESSION ELSE_STATEMENT
    (40) LOGICAL_EXPRESSION -> . ID EQUAL INTNUM

    ID              shift and go to state 37

    LOGICAL_EXPRESSION             shift and go to state 36

state 17

    (34) TERM -> PRINT ( ID . ) ;
    (20) VAR -> ID . + ID
    (21) VAR -> ID . - ID
    (22) VAR -> ID . * ID
    (23) VAR -> ID . / ID
    (19) MATRIX -> ID . '
    (24) MATRIX -> ID . DOTADD ID
    (25) MATRIX -> ID . DOTSUB ID
    (26) MATRIX -> ID . DOTMUL ID
    (27) MATRIX -> ID . DOTDIV ID

    )               shift and go to state 38
    +               shift and go to state 39
    -               shift and go to state 40
    *               shift and go to state 41
    /               shift and go to state 42
    '               shift and go to state 43
    DOTADD          shift and go to state 44
    DOTSUB          shift and go to state 45
    DOTMUL          shift and go to state 46
    DOTDIV          shift and go to state 47


state 18

    (35) TERM -> PRINT ( VAR . ) ;

    )               shift and go to state 48


state 19

    (36) TERM -> PRINT ( STRING . ) ;

    )               shift and go to state 49


state 20

    (6) VAR -> NUM .

    )               reduce using rule 6 (VAR -> NUM .)
    ;               reduce using rule 6 (VAR -> NUM .)


state 21

    (7) VAR -> MATRIX .

    )               reduce using rule 7 (VAR -> MATRIX .)
    ;               reduce using rule 7 (VAR -> MATRIX .)


state 22

    (18) MATRIX -> - . ID

    ID              shift and go to state 50


state 23

    (8) NUM -> INTNUM .

    )               reduce using rule 8 (NUM -> INTNUM .)
    ;               reduce using rule 8 (NUM -> INTNUM .)
    ,               reduce using rule 8 (NUM -> INTNUM .)
    ]               reduce using rule 8 (NUM -> INTNUM .)


state 24

    (9) NUM -> FLOATNUM .

    )               reduce using rule 9 (NUM -> FLOATNUM .)
    ;               reduce using rule 9 (NUM -> FLOATNUM .)
    ,               reduce using rule 9 (NUM -> FLOATNUM .)
    ]               reduce using rule 9 (NUM -> FLOATNUM .)


state 25

    (14) MATRIX -> [ . VECTORS ]
    (12) VECTORS -> . VECTORS ; VECTOR
    (13) VECTORS -> . VECTOR
    (10) VECTOR -> . VECTOR , NUM
    (11) VECTOR -> . NUM
    (8) NUM -> . INTNUM
    (9) NUM -> . FLOATNUM

    INTNUM          shift and go to state 23
    FLOATNUM        shift and go to state 24

    VECTORS                        shift and go to state 51
    VECTOR                         shift and go to state 52
    NUM                            shift and go to state 53

state 26

    (15) MATRIX -> ZEROS . ( INTNUM )

    (               shift and go to state 54


state 27

    (16) MATRIX -> ONES . ( INTNUM )

    (               shift and go to state 55


state 28

    (17) MATRIX -> EYE . ( INTNUM )

    (               shift and go to state 56


state 29

    (20) VAR -> ID . + ID
    (21) VAR -> ID . - ID
    (22) VAR -> ID . * ID
    (23) VAR -> ID . / ID
    (19) MATRIX -> ID . '
    (24) MATRIX -> ID . DOTADD ID
    (25) MATRIX -> ID . DOTSUB ID
    (26) MATRIX -> ID . DOTMUL ID
    (27) MATRIX -> ID . DOTDIV ID

    +               shift and go to state 39
    -               shift and go to state 40
    *               shift and go to state 41
    /               shift and go to state 42
    '               shift and go to state 43
    DOTADD          shift and go to state 44
    DOTSUB          shift and go to state 45
    DOTMUL          shift and go to state 46
    DOTDIV          shift and go to state 47


state 30

    (28) STATEMENT -> ID = VAR . ;

    ;               shift and go to state 57


state 31

    (29) STATEMENT -> ID [ INTNUM . , INTNUM ] = NUM ;

    ,               shift and go to state 58


state 32

    (30) STATEMENT -> ID ADDASSIGN ID . ;

    ;               shift and go to state 59


state 33

    (31) STATEMENT -> ID SUBASSIGN ID . ;

    ;               shift and go to state 60


state 34

    (32) STATEMENT -> ID MULASSIGN ID . ;

    ;               shift and go to state 61


state 35

    (33) STATEMENT -> ID DIVASSIGN ID . ;

    ;               shift and go to state 62


state 36

    (37) IF_CONDITION -> IF ( LOGICAL_EXPRESSION . ) EXPRESSION ELSE_STATEMENT

    )               shift and go to state 63


state 37

    (40) LOGICAL_EXPRESSION -> ID . EQUAL INTNUM

    EQUAL           shift and go to state 64


state 38

    (34) TERM -> PRINT ( ID ) . ;

    ;               shift and go to state 65


state 39

    (20) VAR -> ID + . ID

    ID              shift and go to state 66


state 40

    (21) VAR -> ID - . ID

    ID              shift and go to state 67


state 41

    (22) VAR -> ID * . ID

    ID              shift and go to state 68


state 42

    (23) VAR -> ID / . ID

    ID              shift and go to state 69


state 43

    (19) MATRIX -> ID ' .

    )               reduce using rule 19 (MATRIX -> ID ' .)
    ;               reduce using rule 19 (MATRIX -> ID ' .)


state 44

    (24) MATRIX -> ID DOTADD . ID

    ID              shift and go to state 70


state 45

    (25) MATRIX -> ID DOTSUB . ID

    ID              shift and go to state 71


state 46

    (26) MATRIX -> ID DOTMUL . ID

    ID              shift and go to state 72


state 47

    (27) MATRIX -> ID DOTDIV . ID

    ID              shift and go to state 73


state 48

    (35) TERM -> PRINT ( VAR ) . ;

    ;               shift and go to state 74


state 49

    (36) TERM -> PRINT ( STRING ) . ;

    ;               shift and go to state 75


state 50

    (18) MATRIX -> - ID .

    )               reduce using rule 18 (MATRIX -> - ID .)
    ;               reduce using rule 18 (MATRIX -> - ID .)


state 51

    (14) MATRIX -> [ VECTORS . ]
    (12) VECTORS -> VECTORS . ; VECTOR

    ]               shift and go to state 76
    ;               shift and go to state 77


state 52

    (13) VECTORS -> VECTOR .
    (10) VECTOR -> VECTOR . , NUM

    ]               reduce using rule 13 (VECTORS -> VECTOR .)
    ;               reduce using rule 13 (VECTORS -> VECTOR .)
    ,               shift and go to state 78


state 53

    (11) VECTOR -> NUM .

    ,               reduce using rule 11 (VECTOR -> NUM .)
    ]               reduce using rule 11 (VECTOR -> NUM .)
    ;               reduce using rule 11 (VECTOR -> NUM .)


state 54

    (15) MATRIX -> ZEROS ( . INTNUM )

    INTNUM          shift and go to state 79


state 55

    (16) MATRIX -> ONES ( . INTNUM )

    INTNUM          shift and go to state 80


state 56

    (17) MATRIX -> EYE ( . INTNUM )

    INTNUM          shift and go to state 81


state 57

    (28) STATEMENT -> ID = VAR ; .

    PRINT           reduce using rule 28 (STATEMENT -> ID = VAR ; .)
    IF              reduce using rule 28 (STATEMENT -> ID = VAR ; .)
    ID              reduce using rule 28 (STATEMENT -> ID = VAR ; .)
    $end            reduce using rule 28 (STATEMENT -> ID = VAR ; .)
    ELSE            reduce using rule 28 (STATEMENT -> ID = VAR ; .)


state 58

    (29) STATEMENT -> ID [ INTNUM , . INTNUM ] = NUM ;

    INTNUM          shift and go to state 82


state 59

    (30) STATEMENT -> ID ADDASSIGN ID ; .

    PRINT           reduce using rule 30 (STATEMENT -> ID ADDASSIGN ID ; .)
    IF              reduce using rule 30 (STATEMENT -> ID ADDASSIGN ID ; .)
    ID              reduce using rule 30 (STATEMENT -> ID ADDASSIGN ID ; .)
    $end            reduce using rule 30 (STATEMENT -> ID ADDASSIGN ID ; .)
    ELSE            reduce using rule 30 (STATEMENT -> ID ADDASSIGN ID ; .)


state 60

    (31) STATEMENT -> ID SUBASSIGN ID ; .

    PRINT           reduce using rule 31 (STATEMENT -> ID SUBASSIGN ID ; .)
    IF              reduce using rule 31 (STATEMENT -> ID SUBASSIGN ID ; .)
    ID              reduce using rule 31 (STATEMENT -> ID SUBASSIGN ID ; .)
    $end            reduce using rule 31 (STATEMENT -> ID SUBASSIGN ID ; .)
    ELSE            reduce using rule 31 (STATEMENT -> ID SUBASSIGN ID ; .)


state 61

    (32) STATEMENT -> ID MULASSIGN ID ; .

    PRINT           reduce using rule 32 (STATEMENT -> ID MULASSIGN ID ; .)
    IF              reduce using rule 32 (STATEMENT -> ID MULASSIGN ID ; .)
    ID              reduce using rule 32 (STATEMENT -> ID MULASSIGN ID ; .)
    $end            reduce using rule 32 (STATEMENT -> ID MULASSIGN ID ; .)
    ELSE            reduce using rule 32 (STATEMENT -> ID MULASSIGN ID ; .)


state 62

    (33) STATEMENT -> ID DIVASSIGN ID ; .

    PRINT           reduce using rule 33 (STATEMENT -> ID DIVASSIGN ID ; .)
    IF              reduce using rule 33 (STATEMENT -> ID DIVASSIGN ID ; .)
    ID              reduce using rule 33 (STATEMENT -> ID DIVASSIGN ID ; .)
    $end            reduce using rule 33 (STATEMENT -> ID DIVASSIGN ID ; .)
    ELSE            reduce using rule 33 (STATEMENT -> ID DIVASSIGN ID ; .)


state 63

    (37) IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) . EXPRESSION ELSE_STATEMENT
    (1) EXPRESSION -> . TERM
    (2) EXPRESSION -> . EXPRESSION TERM
    (3) EXPRESSION -> . EXPRESSION IF_CONDITION
    (4) TERM -> . STATEMENT
    (5) TERM -> . PRINT
    (34) TERM -> . PRINT ( ID ) ;
    (35) TERM -> . PRINT ( VAR ) ;
    (36) TERM -> . PRINT ( STRING ) ;
    (28) STATEMENT -> . ID = VAR ;
    (29) STATEMENT -> . ID [ INTNUM , INTNUM ] = NUM ;
    (30) STATEMENT -> . ID ADDASSIGN ID ;
    (31) STATEMENT -> . ID SUBASSIGN ID ;
    (32) STATEMENT -> . ID MULASSIGN ID ;
    (33) STATEMENT -> . ID DIVASSIGN ID ;

    PRINT           shift and go to state 4
    ID              shift and go to state 5

    EXPRESSION                     shift and go to state 83
    TERM                           shift and go to state 2
    STATEMENT                      shift and go to state 3

state 64

    (40) LOGICAL_EXPRESSION -> ID EQUAL . INTNUM

    INTNUM          shift and go to state 84


state 65

    (34) TERM -> PRINT ( ID ) ; .

    PRINT           reduce using rule 34 (TERM -> PRINT ( ID ) ; .)
    IF              reduce using rule 34 (TERM -> PRINT ( ID ) ; .)
    ID              reduce using rule 34 (TERM -> PRINT ( ID ) ; .)
    $end            reduce using rule 34 (TERM -> PRINT ( ID ) ; .)
    ELSE            reduce using rule 34 (TERM -> PRINT ( ID ) ; .)


state 66

    (20) VAR -> ID + ID .

    )               reduce using rule 20 (VAR -> ID + ID .)
    ;               reduce using rule 20 (VAR -> ID + ID .)


state 67

    (21) VAR -> ID - ID .

    )               reduce using rule 21 (VAR -> ID - ID .)
    ;               reduce using rule 21 (VAR -> ID - ID .)


state 68

    (22) VAR -> ID * ID .

    )               reduce using rule 22 (VAR -> ID * ID .)
    ;               reduce using rule 22 (VAR -> ID * ID .)


state 69

    (23) VAR -> ID / ID .

    )               reduce using rule 23 (VAR -> ID / ID .)
    ;               reduce using rule 23 (VAR -> ID / ID .)


state 70

    (24) MATRIX -> ID DOTADD ID .

    )               reduce using rule 24 (MATRIX -> ID DOTADD ID .)
    ;               reduce using rule 24 (MATRIX -> ID DOTADD ID .)


state 71

    (25) MATRIX -> ID DOTSUB ID .

    )               reduce using rule 25 (MATRIX -> ID DOTSUB ID .)
    ;               reduce using rule 25 (MATRIX -> ID DOTSUB ID .)


state 72

    (26) MATRIX -> ID DOTMUL ID .

    )               reduce using rule 26 (MATRIX -> ID DOTMUL ID .)
    ;               reduce using rule 26 (MATRIX -> ID DOTMUL ID .)


state 73

    (27) MATRIX -> ID DOTDIV ID .

    )               reduce using rule 27 (MATRIX -> ID DOTDIV ID .)
    ;               reduce using rule 27 (MATRIX -> ID DOTDIV ID .)


state 74

    (35) TERM -> PRINT ( VAR ) ; .

    PRINT           reduce using rule 35 (TERM -> PRINT ( VAR ) ; .)
    IF              reduce using rule 35 (TERM -> PRINT ( VAR ) ; .)
    ID              reduce using rule 35 (TERM -> PRINT ( VAR ) ; .)
    $end            reduce using rule 35 (TERM -> PRINT ( VAR ) ; .)
    ELSE            reduce using rule 35 (TERM -> PRINT ( VAR ) ; .)


state 75

    (36) TERM -> PRINT ( STRING ) ; .

    PRINT           reduce using rule 36 (TERM -> PRINT ( STRING ) ; .)
    IF              reduce using rule 36 (TERM -> PRINT ( STRING ) ; .)
    ID              reduce using rule 36 (TERM -> PRINT ( STRING ) ; .)
    $end            reduce using rule 36 (TERM -> PRINT ( STRING ) ; .)
    ELSE            reduce using rule 36 (TERM -> PRINT ( STRING ) ; .)


state 76

    (14) MATRIX -> [ VECTORS ] .

    )               reduce using rule 14 (MATRIX -> [ VECTORS ] .)
    ;               reduce using rule 14 (MATRIX -> [ VECTORS ] .)


state 77

    (12) VECTORS -> VECTORS ; . VECTOR
    (10) VECTOR -> . VECTOR , NUM
    (11) VECTOR -> . NUM
    (8) NUM -> . INTNUM
    (9) NUM -> . FLOATNUM

    INTNUM          shift and go to state 23
    FLOATNUM        shift and go to state 24

    VECTOR                         shift and go to state 85
    NUM                            shift and go to state 53

state 78

    (10) VECTOR -> VECTOR , . NUM
    (8) NUM -> . INTNUM
    (9) NUM -> . FLOATNUM

    INTNUM          shift and go to state 23
    FLOATNUM        shift and go to state 24

    NUM                            shift and go to state 86

state 79

    (15) MATRIX -> ZEROS ( INTNUM . )

    )               shift and go to state 87


state 80

    (16) MATRIX -> ONES ( INTNUM . )

    )               shift and go to state 88


state 81

    (17) MATRIX -> EYE ( INTNUM . )

    )               shift and go to state 89


state 82

    (29) STATEMENT -> ID [ INTNUM , INTNUM . ] = NUM ;

    ]               shift and go to state 90


state 83

    (37) IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) EXPRESSION . ELSE_STATEMENT
    (2) EXPRESSION -> EXPRESSION . TERM
    (3) EXPRESSION -> EXPRESSION . IF_CONDITION
    (38) ELSE_STATEMENT -> . ELSE EXPRESSION
    (39) ELSE_STATEMENT -> .
    (4) TERM -> . STATEMENT
    (5) TERM -> . PRINT
    (34) TERM -> . PRINT ( ID ) ;
    (35) TERM -> . PRINT ( VAR ) ;
    (36) TERM -> . PRINT ( STRING ) ;
    (37) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) EXPRESSION ELSE_STATEMENT
    (28) STATEMENT -> . ID = VAR ;
    (29) STATEMENT -> . ID [ INTNUM , INTNUM ] = NUM ;
    (30) STATEMENT -> . ID ADDASSIGN ID ;
    (31) STATEMENT -> . ID SUBASSIGN ID ;
    (32) STATEMENT -> . ID MULASSIGN ID ;
    (33) STATEMENT -> . ID DIVASSIGN ID ;

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    ELSE            shift and go to state 92
    $end            reduce using rule 39 (ELSE_STATEMENT -> .)
    PRINT           shift and go to state 4
    IF              shift and go to state 8
    ID              shift and go to state 5

  ! ELSE            [ reduce using rule 39 (ELSE_STATEMENT -> .) ]
  ! PRINT           [ reduce using rule 39 (ELSE_STATEMENT -> .) ]
  ! IF              [ reduce using rule 39 (ELSE_STATEMENT -> .) ]
  ! ID              [ reduce using rule 39 (ELSE_STATEMENT -> .) ]

    ELSE_STATEMENT                 shift and go to state 91
    TERM                           shift and go to state 6
    IF_CONDITION                   shift and go to state 7
    STATEMENT                      shift and go to state 3

state 84

    (40) LOGICAL_EXPRESSION -> ID EQUAL INTNUM .

    )               reduce using rule 40 (LOGICAL_EXPRESSION -> ID EQUAL INTNUM .)


state 85

    (12) VECTORS -> VECTORS ; VECTOR .
    (10) VECTOR -> VECTOR . , NUM

    ]               reduce using rule 12 (VECTORS -> VECTORS ; VECTOR .)
    ;               reduce using rule 12 (VECTORS -> VECTORS ; VECTOR .)
    ,               shift and go to state 78


state 86

    (10) VECTOR -> VECTOR , NUM .

    ,               reduce using rule 10 (VECTOR -> VECTOR , NUM .)
    ]               reduce using rule 10 (VECTOR -> VECTOR , NUM .)
    ;               reduce using rule 10 (VECTOR -> VECTOR , NUM .)


state 87

    (15) MATRIX -> ZEROS ( INTNUM ) .

    )               reduce using rule 15 (MATRIX -> ZEROS ( INTNUM ) .)
    ;               reduce using rule 15 (MATRIX -> ZEROS ( INTNUM ) .)


state 88

    (16) MATRIX -> ONES ( INTNUM ) .

    )               reduce using rule 16 (MATRIX -> ONES ( INTNUM ) .)
    ;               reduce using rule 16 (MATRIX -> ONES ( INTNUM ) .)


state 89

    (17) MATRIX -> EYE ( INTNUM ) .

    )               reduce using rule 17 (MATRIX -> EYE ( INTNUM ) .)
    ;               reduce using rule 17 (MATRIX -> EYE ( INTNUM ) .)


state 90

    (29) STATEMENT -> ID [ INTNUM , INTNUM ] . = NUM ;

    =               shift and go to state 93


state 91

    (37) IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) EXPRESSION ELSE_STATEMENT .

    PRINT           reduce using rule 37 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) EXPRESSION ELSE_STATEMENT .)
    IF              reduce using rule 37 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) EXPRESSION ELSE_STATEMENT .)
    ID              reduce using rule 37 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) EXPRESSION ELSE_STATEMENT .)
    $end            reduce using rule 37 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) EXPRESSION ELSE_STATEMENT .)
    ELSE            reduce using rule 37 (IF_CONDITION -> IF ( LOGICAL_EXPRESSION ) EXPRESSION ELSE_STATEMENT .)


state 92

    (38) ELSE_STATEMENT -> ELSE . EXPRESSION
    (1) EXPRESSION -> . TERM
    (2) EXPRESSION -> . EXPRESSION TERM
    (3) EXPRESSION -> . EXPRESSION IF_CONDITION
    (4) TERM -> . STATEMENT
    (5) TERM -> . PRINT
    (34) TERM -> . PRINT ( ID ) ;
    (35) TERM -> . PRINT ( VAR ) ;
    (36) TERM -> . PRINT ( STRING ) ;
    (28) STATEMENT -> . ID = VAR ;
    (29) STATEMENT -> . ID [ INTNUM , INTNUM ] = NUM ;
    (30) STATEMENT -> . ID ADDASSIGN ID ;
    (31) STATEMENT -> . ID SUBASSIGN ID ;
    (32) STATEMENT -> . ID MULASSIGN ID ;
    (33) STATEMENT -> . ID DIVASSIGN ID ;

    PRINT           shift and go to state 4
    ID              shift and go to state 5

    EXPRESSION                     shift and go to state 94
    TERM                           shift and go to state 2
    STATEMENT                      shift and go to state 3

state 93

    (29) STATEMENT -> ID [ INTNUM , INTNUM ] = . NUM ;
    (8) NUM -> . INTNUM
    (9) NUM -> . FLOATNUM

    INTNUM          shift and go to state 23
    FLOATNUM        shift and go to state 24

    NUM                            shift and go to state 95

state 94

    (38) ELSE_STATEMENT -> ELSE EXPRESSION .
    (2) EXPRESSION -> EXPRESSION . TERM
    (3) EXPRESSION -> EXPRESSION . IF_CONDITION
    (4) TERM -> . STATEMENT
    (5) TERM -> . PRINT
    (34) TERM -> . PRINT ( ID ) ;
    (35) TERM -> . PRINT ( VAR ) ;
    (36) TERM -> . PRINT ( STRING ) ;
    (37) IF_CONDITION -> . IF ( LOGICAL_EXPRESSION ) EXPRESSION ELSE_STATEMENT
    (28) STATEMENT -> . ID = VAR ;
    (29) STATEMENT -> . ID [ INTNUM , INTNUM ] = NUM ;
    (30) STATEMENT -> . ID ADDASSIGN ID ;
    (31) STATEMENT -> . ID SUBASSIGN ID ;
    (32) STATEMENT -> . ID MULASSIGN ID ;
    (33) STATEMENT -> . ID DIVASSIGN ID ;

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    ELSE            reduce using rule 38 (ELSE_STATEMENT -> ELSE EXPRESSION .)
    $end            reduce using rule 38 (ELSE_STATEMENT -> ELSE EXPRESSION .)
    PRINT           shift and go to state 4
    IF              shift and go to state 8
    ID              shift and go to state 5

  ! PRINT           [ reduce using rule 38 (ELSE_STATEMENT -> ELSE EXPRESSION .) ]
  ! IF              [ reduce using rule 38 (ELSE_STATEMENT -> ELSE EXPRESSION .) ]
  ! ID              [ reduce using rule 38 (ELSE_STATEMENT -> ELSE EXPRESSION .) ]

    TERM                           shift and go to state 6
    IF_CONDITION                   shift and go to state 7
    STATEMENT                      shift and go to state 3

state 95

    (29) STATEMENT -> ID [ INTNUM , INTNUM ] = NUM . ;

    ;               shift and go to state 96


state 96

    (29) STATEMENT -> ID [ INTNUM , INTNUM ] = NUM ; .

    PRINT           reduce using rule 29 (STATEMENT -> ID [ INTNUM , INTNUM ] = NUM ; .)
    IF              reduce using rule 29 (STATEMENT -> ID [ INTNUM , INTNUM ] = NUM ; .)
    ID              reduce using rule 29 (STATEMENT -> ID [ INTNUM , INTNUM ] = NUM ; .)
    $end            reduce using rule 29 (STATEMENT -> ID [ INTNUM , INTNUM ] = NUM ; .)
    ELSE            reduce using rule 29 (STATEMENT -> ID [ INTNUM , INTNUM ] = NUM ; .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 83 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 83 resolved as shift
WARNING: shift/reduce conflict for IF in state 83 resolved as shift
WARNING: shift/reduce conflict for ID in state 83 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 94 resolved as shift
WARNING: shift/reduce conflict for IF in state 94 resolved as shift
WARNING: shift/reduce conflict for ID in state 94 resolved as shift
