
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "left+-left*/ADDASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQORGT EQORLESS EQUAL EYE FLOATNUM FOR ID IF INTNUM MULASSIGN NOTEQUAL ONES PRINT RETURN STRING SUBASSIGN WHILE ZEROSstart : EXPRESSIONEXPRESSION : INTNUMEXPRESSION : STRINGEXPRESSION : EXPRESSION '+' EXPRESSION\n                  | EXPRESSION '-' EXPRESSIONEXPRESSION : EXPRESSION '*' EXPRESSION\n                  | EXPRESSION '/' EXPRESSIONEXPRESSION : '(' EXPRESSION ')'"
    
_lr_action_items = {'INTNUM':([0,5,6,7,8,9,],[3,3,3,3,3,3,]),'STRING':([0,5,6,7,8,9,],[4,4,4,4,4,4,]),'(':([0,5,6,7,8,9,],[5,5,5,5,5,5,]),'$end':([1,2,3,4,11,12,13,14,15,],[0,-1,-2,-3,-4,-5,-6,-7,-8,]),'+':([2,3,4,10,11,12,13,14,15,],[6,-2,-3,6,-4,-5,-6,-7,-8,]),'-':([2,3,4,10,11,12,13,14,15,],[7,-2,-3,7,-4,-5,-6,-7,-8,]),'*':([2,3,4,10,11,12,13,14,15,],[8,-2,-3,8,8,8,-6,-7,-8,]),'/':([2,3,4,10,11,12,13,14,15,],[9,-2,-3,9,9,9,-6,-7,-8,]),')':([3,4,10,11,12,13,14,15,],[-2,-3,15,-4,-5,-6,-7,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'EXPRESSION':([0,5,6,7,8,9,],[2,10,11,12,13,14,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> EXPRESSION','start',1,'p_start','parser.py',21),
  ('EXPRESSION -> INTNUM','EXPRESSION',1,'p_expression_number','parser.py',25),
  ('EXPRESSION -> STRING','EXPRESSION',1,'p_expression_string','parser.py',29),
  ('EXPRESSION -> EXPRESSION + EXPRESSION','EXPRESSION',3,'p_expression_sum','parser.py',34),
  ('EXPRESSION -> EXPRESSION - EXPRESSION','EXPRESSION',3,'p_expression_sum','parser.py',35),
  ('EXPRESSION -> EXPRESSION * EXPRESSION','EXPRESSION',3,'p_expression_mul','parser.py',41),
  ('EXPRESSION -> EXPRESSION / EXPRESSION','EXPRESSION',3,'p_expression_mul','parser.py',42),
  ('EXPRESSION -> ( EXPRESSION )','EXPRESSION',3,'p_expression_group','parser.py',48),
]
